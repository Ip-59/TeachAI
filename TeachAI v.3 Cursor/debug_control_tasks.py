#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
"""

import os
import sys
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.getcwd())

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('debug_control_tasks.log', mode='w', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def test_control_tasks_generator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    logger.info("=== –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¢–û–†–ê –ö–û–ù–¢–†–û–õ–¨–ù–´–• –ó–ê–î–ê–ù–ò–ô ===")
    
    try:
        from control_tasks_generator import ControlTasksGenerator
        from config import ConfigManager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager()
        if not config_manager.load_config():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return False
        
        api_key = config_manager.get_api_key()
        if not api_key:
            logger.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = ControlTasksGenerator(api_key)
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
        lesson_data = {
            "title": "–°–ø–∏—Å–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä–∏",
            "description": "–ò–∑—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∏ —Å–ª–æ–≤–∞—Ä—è–º–∏ –≤ Python"
        }
        
        lesson_content = """
# –°–ø–∏—Å–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä–∏ –≤ Python

## –°–ø–∏—Å–∫–∏
–°–ø–∏—Å–∫–∏ - —ç—Ç–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–æ–≤.

### –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
```python
my_list = [1, 2, 3, 'apple', 'banana']
```

### –ú–µ—Ç–æ–¥—ã —Å–ø–∏—Å–∫–æ–≤
- `append()` - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü
- `insert()` - –≤—Å—Ç–∞–≤–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
- `remove()` - —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
- `pop()` - —É–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç —ç–ª–µ–º–µ–Ω—Ç–∞

## –°–ª–æ–≤–∞—Ä–∏
–°–ª–æ–≤–∞—Ä–∏ - —ç—Ç–æ –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.

### –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
```python
my_dict = {'a': 'apple', 'b': 'banana', 'c': 'cherry'}
```

### –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ: `my_dict['d'] = 'dog'`
- –ü–æ–ª—É—á–µ–Ω–∏–µ: `value = my_dict['a']`
- –£–¥–∞–ª–µ–Ω–∏–µ: `del my_dict['b']`
        """
        
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ...")
        task_data = generator.generate_control_task(
            lesson_data=lesson_data,
            lesson_content=lesson_content,
            communication_style="friendly"
        )
        
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        logger.info(f"title: {task_data.get('title', '–ù–ï–¢')}")
        logger.info(f"description: {task_data.get('description', '–ù–ï–¢')[:100]}...")
        logger.info(f"task_code: {task_data.get('task_code', '–ù–ï–¢')[:100]}...")
        logger.info(f"expected_output: {task_data.get('expected_output', '–ù–ï–¢')}")
        logger.info(f"is_needed: {task_data.get('is_needed', '–ù–ï–¢')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        with open('debug_responses/test_task_generation.json', 'w', encoding='utf-8') as f:
            json.dump(task_data, f, ensure_ascii=False, indent=2)
        
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_responses/test_task_generation.json")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {str(e)}")
        return False

def test_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–∞–¥–∞–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    logger.info("=== –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ó–ê–î–ê–ù–ò–ô ===")
    
    try:
        from control_tasks_generator import ControlTasksGenerator
        from config import ConfigManager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        config_manager = ConfigManager()
        config_manager.load_config()
        api_key = config_manager.get_api_key()
        generator = ControlTasksGenerator(api_key)
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–∑ print
        logger.info("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–∑ print")
        user_code = "result = 10 - 5"
        expected_output = ""
        check_variable = "result"
        expected_variable_value = 5
        
        result = generator.validate_task_execution(
            user_code=user_code,
            expected_output=expected_output,
            check_variable=check_variable,
            expected_variable_value=expected_variable_value
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å print
        logger.info("–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å print")
        user_code = "print('Hello, World!')"
        expected_output = "Hello, World!"
        
        result = generator.validate_task_execution(
            user_code=user_code,
            expected_output=expected_output
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –¢–µ—Å—Ç 3: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        logger.info("–¢–µ—Å—Ç 3: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        user_code = "result = 10 - 3"  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5, –∞ –Ω–µ 7
        expected_output = ""
        check_variable = "result"
        expected_variable_value = 5
        
        result = generator.validate_task_execution(
            user_code=user_code,
            expected_output=expected_output,
            check_variable=check_variable,
            expected_variable_value=expected_variable_value
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        return False

def test_interface():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    logger.info("=== –¢–ï–°–¢ –ò–ù–¢–ï–†–§–ï–ô–°–ê –ö–û–ù–¢–†–û–õ–¨–ù–´–• –ó–ê–î–ê–ù–ò–ô ===")
    
    try:
        from control_tasks_interface import ControlTasksInterface
        from content_generator import ContentGenerator
        from config import ConfigManager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config_manager = ConfigManager()
        config_manager.load_config()
        api_key = config_manager.get_api_key()
        
        content_generator = ContentGenerator(api_key)
        
        # –°–æ–∑–¥–∞–µ–º mock lesson_interface
        class MockLessonInterface:
            def __init__(self):
                self.current_course_info = {"user_profile": {"communication_style": "friendly"}}
        
        lesson_interface = MockLessonInterface()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        interface = ControlTasksInterface(content_generator, lesson_interface)
        logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        lesson_data = {
            "title": "–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫",
            "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        }
        
        lesson_content = """
# –¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫

## –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞
```python
numbers = [1, 2, 3, 4, 5]
result = sum(numbers)
print(result)
```
        """
        
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ –∑–∞–¥–∞–Ω–∏—è...")
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–∑-–∑–∞ ipywidgets
        logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ö–û–ù–¢–†–û–õ–¨–ù–´–ú–ò –ó–ê–î–ê–ù–ò–Ø–ú–ò")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger = setup_logging()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è debug_responses
    Path("debug_responses").mkdir(exist_ok=True)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    for file in Path("debug_responses").glob("test_*"):
        file.unlink()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", test_control_tasks_generator),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π", test_validation),
        ("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", test_interface)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_name}")
        try:
            result = test_func()
            results[test_name] = result
            status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"   {status}")
        except Exception as e:
            results[test_name] = False
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
    debug_files = list(Path("debug_responses").glob("test_*"))
    if debug_files:
        for file in debug_files:
            print(f"   {file.name}")
    else:
        print("   –§–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
    
    print("\nüîç –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: debug_control_tasks.log")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: debug_responses/")

if __name__ == "__main__":
    main()