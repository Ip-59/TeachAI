#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä Python –∫–æ–¥–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Python.
"""

def demonstrate_basic_python():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Python."""
    
    print("üêç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ê–ó–û–í–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô PYTHON")
    print("=" * 50)
    
    # 1. –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
    print("\nüìã 1. –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏:")
    numbers = [1, 2, 3, 4, 5]
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫: {numbers}")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    numbers.append(6)
    print(f"–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 6: {numbers}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
    even_numbers = [x for x in numbers if x % 2 == 0]
    print(f"–ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞: {even_numbers}")
    
    # 2. –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
    print("\nüìö 2. –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏:")
    student = {
        "name": "–ò–≤–∞–Ω",
        "age": 20,
        "subjects": ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"]
    }
    print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ: {student}")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    student["subjects"].append("–ò—Å—Ç–æ—Ä–∏—è")
    print(f"–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {student['subjects']}")
    
    # 3. –§—É–Ω–∫—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    print("\n‚öôÔ∏è 3. –§—É–Ω–∫—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã:")
    
    def fibonacci(n):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–æ n."""
        a, b = 0, 1
        count = 0
        while count < n:
            yield a
            a, b = b, a + b
            count += 1
    
    print("–ü–µ—Ä–≤—ã–µ 10 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏:")
    fib_list = list(fibonacci(10))
    print(fib_list)
    
    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    print("\nüõ°Ô∏è 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:")
    
    def safe_divide(a, b):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            result = a / b
            return result
        except ZeroDivisionError:
            return "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!"
        except TypeError:
            return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö!"
    
    print(f"10 / 2 = {safe_divide(10, 2)}")
    print(f"10 / 0 = {safe_divide(10, 0)}")
    print(f"10 / 'a' = {safe_divide(10, 'a')}")
    
    # 5. –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
    print("\nüìÅ 5. –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = "temp_demo.txt"
    
    try:
        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª\n")
            f.write("–°–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏\n")
        
        print(f"–§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω")
        
        # –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n{content}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        os.remove(filename)
        print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filename} —É–¥–∞–ª–µ–Ω")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º: {e}")
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("–≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Python!")

if __name__ == "__main__":
    demonstrate_basic_python() 