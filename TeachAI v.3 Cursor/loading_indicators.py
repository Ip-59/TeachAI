"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç OpenAI API.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
"""

import logging
import time
from typing import Optional, Callable, Any
from IPython.display import display, clear_output, HTML
import ipywidgets as widgets
from threading import Thread, Event

class LoadingIndicator:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏."""
        self.logger = logging.getLogger(__name__)
        self.is_active = False
        self.widget = None
        self.stop_event = Event()
    
    def show(self, message: str = "–ó–∞–≥—Ä—É–∑–∫–∞...") -> widgets.Widget:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            widgets.Widget: –í–∏–¥–∂–µ—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        """
        try:
            self.is_active = True
            self.stop_event.clear()
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
            html_content = f"""
            <div style='background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 10px 0; text-align: center; border: 2px solid #ecf0f1;'>
                <div style='display: inline-block; width: 40px; height: 40px; border: 4px solid #ecf0f1; border-top: 4px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;'></div>
                <p style='margin: 15px 0 0 0; color: #2c3e50; font-size: 1em; font-weight: 500;'>{message}</p>
                <p style='margin: 5px 0 0 0; color: #7f8c8d; font-size: 0.8em;'>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</p>
                <style>
                    @keyframes spin {{
                        0% {{ transform: rotate(0deg); }}
                        100% {{ transform: rotate(360deg); }}
                    }}
                </style>
            </div>
            """
            
            self.widget = widgets.HTML(value=html_content)
            self.logger.info(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞–∑–∞–Ω: {message}")
            return self.widget
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            return self._create_error_widget(str(e))
    
    def hide(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏."""
        try:
            self.is_active = False
            self.stop_event.set()
            
            if self.widget:
                # –û—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥
                clear_output(wait=True)
                self.logger.info("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä—ã—Ç")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    def _create_error_widget(self, error_message: str) -> widgets.Widget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ."""
        html_content = f"""
        <div style='background: #fee; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid #e74c3c;'>
            <h4 style='margin: 0 0 15px 0; color: #c0392b;'>‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h4>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                {error_message}
            </p>
        </div>
        """
        
        return widgets.HTML(value=html_content)


class OpenAIAPILoadingIndicator(LoadingIndicator):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å OpenAI API."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è OpenAI API."""
        super().__init__()
        self.operation_messages = {
            "generate_lesson": "üéì –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É—Ä–æ–∫...",
            "generate_examples": "üìù –°–æ–∑–¥–∞—é –ø—Ä–∏–º–µ—Ä—ã...",
            "generate_test": "üìã –§–æ—Ä–º–∏—Ä—É—é —Ç–µ—Å—Ç...",
            "generate_explanation": "üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...",
            "generate_control_task": "üíª –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ...",
            "check_relevance": "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å...",
            "generate_qa": "‚ùì –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã...",
            "default": "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –∫ OpenAI..."
        }
    
    def show_for_operation(self, operation: str, custom_message: Optional[str] = None) -> widgets.Widget:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            custom_message: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            widgets.Widget: –í–∏–¥–∂–µ—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        """
        message = custom_message or self.operation_messages.get(operation, self.operation_messages["default"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è API –æ–ø–µ—Ä–∞—Ü–∏–π
        enhanced_message = f"{message}\n\n‚è±Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
        
        return self.show(enhanced_message)
    
    def show_with_progress(self, operation: str, progress_callback: Optional[Callable] = None) -> widgets.Widget:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            progress_callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            widgets.Widget: –í–∏–¥–∂–µ—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        """
        message = self.operation_messages.get(operation, self.operation_messages["default"])
        
        html_content = f"""
        <div style='background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 10px 0; text-align: center; border: 2px solid #ecf0f1;'>
            <div style='display: inline-block; width: 40px; height: 40px; border: 4px solid #ecf0f1; border-top: 4px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;'></div>
            <p style='margin: 15px 0 0 0; color: #2c3e50; font-size: 1em; font-weight: 500;'>{message}</p>
            <p style='margin: 5px 0 0 0; color: #7f8c8d; font-size: 0.8em;'>‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI API...</p>
            <div id='progress-container' style='margin: 10px 0;'>
                <div style='background: #ecf0f1; height: 6px; border-radius: 3px; overflow: hidden;'>
                    <div id='progress-bar' style='background: #3498db; height: 100%; width: 0%; transition: width 0.3s ease;'></div>
                </div>
                <p id='progress-text' style='margin: 5px 0; font-size: 0.8em; color: #7f8c8d;'>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...</p>
            </div>
            <style>
                @keyframes spin {{
                    0% {{ transform: rotate(0deg); }}
                    100% {{ transform: rotate(360deg); }}
                }}
            </style>
        </div>
        """
        
        self.widget = widgets.HTML(value=html_content)
        self.logger.info(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation}")
        return self.widget
    
    def update_progress(self, progress: int, status_message: str = ""):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞.
        
        Args:
            progress: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
            status_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        if not self.is_active or not self.widget:
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º HTML —Å –Ω–æ–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            current_html = self.widget.value
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar_style = f"width: {progress}%;"
            current_html = current_html.replace(
                'id="progress-bar" style="background: #3498db; height: 100%; width: 0%; transition: width 0.3s ease;"',
                f'id="progress-bar" style="background: #3498db; height: 100%; {progress_bar_style} transition: width 0.3s ease;"'
            )
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
            if status_message:
                current_html = current_html.replace(
                    'id="progress-text" style="margin: 5px 0; font-size: 0.8em; color: #7f8c8d;">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...</p>',
                    f'id="progress-text" style="margin: 5px 0; font-size: 0.8em; color: #7f8c8d;">{status_message}</p>'
                )
            
            self.widget.value = current_html
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")


class LessonLoadingIndicator(OpenAIAPILoadingIndicator):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Ä–æ–∫–æ–≤."""
        super().__init__()
        self.lesson_operation_messages = {
            "loading_lesson": "üìñ –ó–∞–≥—Ä—É–∂–∞—é —É—Ä–æ–∫...",
            "generating_content": "‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞...",
            "preparing_examples": "üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–º–µ—Ä—ã...",
            "creating_test": "üìã –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π...",
            "finalizing": "‚úÖ –ó–∞–≤–µ—Ä—à–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —É—Ä–æ–∫–∞..."
        }
    
    def show_lesson_loading(self, lesson_title: str = "") -> widgets.Widget:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞.
        
        Args:
            lesson_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —É—Ä–æ–∫–∞
            
        Returns:
            widgets.Widget: –í–∏–¥–∂–µ—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        """
        title_text = f" –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_title}'" if lesson_title else ""
        message = f"üìñ –ó–∞–≥—Ä—É–∂–∞—é —É—Ä–æ–∫{title_text}..."
        
        html_content = f"""
        <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; margin: 10px 0; text-align: center;'>
            <div style='display: inline-block; width: 50px; height: 50px; border: 4px solid rgba(255,255,255,0.3); border-top: 4px solid white; border-radius: 50%; animation: spin 1s linear infinite;'></div>
            <h3 style='margin: 15px 0 0 0; color: white;'>{message}</h3>
            <p style='margin: 10px 0 0 0; opacity: 0.9; font-size: 0.9em;'>‚è±Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...</p>
            <div style='margin: 15px 0 0 0;'>
                <div style='background: rgba(255,255,255,0.2); height: 8px; border-radius: 4px; overflow: hidden;'>
                    <div id='lesson-progress' style='background: white; height: 100%; width: 0%; transition: width 0.5s ease;'></div>
                </div>
                <p id='lesson-status' style='margin: 5px 0 0 0; opacity: 0.8; font-size: 0.8em;'>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</p>
            </div>
            <style>
                @keyframes spin {{
                    0% {{ transform: rotate(0deg); }}
                    100% {{ transform: rotate(360deg); }}
                }}
            </style>
        </div>
        """
        
        self.widget = widgets.HTML(value=html_content)
        self.logger.info(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞ –ø–æ–∫–∞–∑–∞–Ω: {lesson_title}")
        return self.widget
    
    def update_lesson_progress(self, stage: str, progress: int = 0):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞.
        
        Args:
            stage: –≠—Ç–∞–ø –∑–∞–≥—Ä—É–∑–∫–∏
            progress: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not self.is_active or not self.widget:
            return
        
        try:
            stage_messages = {
                "loading_lesson": "–ó–∞–≥—Ä—É–∂–∞—é —É—Ä–æ–∫...",
                "generating_content": "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...",
                "preparing_examples": "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–º–µ—Ä—ã...",
                "creating_test": "–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç...",
                "finalizing": "–ó–∞–≤–µ—Ä—à–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É..."
            }
            
            status_message = stage_messages.get(stage, "–û–±—Ä–∞–±–æ—Ç–∫–∞...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º HTML
            current_html = self.widget.value
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar_style = f"width: {progress}%;"
            current_html = current_html.replace(
                'id="lesson-progress" style="background: white; height: 100%; width: 0%; transition: width 0.5s ease;"',
                f'id="lesson-progress" style="background: white; height: 100%; {progress_bar_style} transition: width 0.5s ease;"'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            current_html = current_html.replace(
                'id="lesson-status" style="margin: 5px 0 0 0; opacity: 0.8; font-size: 0.8em;">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</p>',
                f'id="lesson-status" style="margin: 5px 0 0 0; opacity: 0.8; font-size: 0.8em;">{status_message}</p>'
            )
            
            self.widget.value = current_html
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞: {str(e)}")


class LoadingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏."""
        self.logger = logging.getLogger(__name__)
        self.current_indicator = None
        self.indicators = {
            "default": LoadingIndicator(),
            "openai": OpenAIAPILoadingIndicator(),
            "lesson": LessonLoadingIndicator()
        }
    
    def show_loading(self, indicator_type: str = "default", **kwargs) -> widgets.Widget:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.
        
        Args:
            indicator_type: –¢–∏–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            widgets.Widget: –í–∏–¥–∂–µ—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        """
        try:
            indicator = self.indicators.get(indicator_type, self.indicators["default"])
            
            if indicator_type == "openai" and "operation" in kwargs:
                self.current_indicator = indicator.show_for_operation(kwargs["operation"])
            elif indicator_type == "lesson":
                lesson_title = kwargs.get("lesson_title", "")
                self.current_indicator = indicator.show_lesson_loading(lesson_title)
            else:
                message = kwargs.get("message", "–ó–∞–≥—Ä—É–∑–∫–∞...")
                self.current_indicator = indicator.show(message)
            
            self.logger.info(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞–∑–∞–Ω: {indicator_type}")
            return self.current_indicator
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            return self._create_error_widget(str(e))
    
    def hide_loading(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏."""
        try:
            if self.current_indicator:
                # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                for indicator in self.indicators.values():
                    if indicator.is_active:
                        indicator.hide()
                        break
                
                self.current_indicator = None
                self.logger.info("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä—ã—Ç")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    def update_progress(self, progress: int, status_message: str = ""):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞.
        
        Args:
            progress: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            status_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            for indicator in self.indicators.values():
                if indicator.is_active and hasattr(indicator, 'update_progress'):
                    indicator.update_progress(progress, status_message)
                    break
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")
    
    def _create_error_widget(self, error_message: str) -> widgets.Widget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ."""
        html_content = f"""
        <div style='background: #fee; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid #e74c3c;'>
            <h4 style='margin: 0 0 15px 0; color: #c0392b;'>‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h4>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                {error_message}
            </p>
        </div>
        """
        
        return widgets.HTML(value=html_content) 