#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
"""

import os
import sys
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.getcwd())

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('test_control_tasks_fixed.log', mode='w', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def test_variable_checking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–µ–∑ print()"""
    logger = logging.getLogger(__name__)
    logger.info("=== –¢–ï–°–¢ –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–ú–ï–ù–ù–´–• –ë–ï–ó PRINT() ===")
    
    try:
        from control_tasks_generator import ControlTasksGenerator
        from config import ConfigManager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        config_manager = ConfigManager()
        config_manager.load_config()
        api_key = config_manager.get_api_key()
        generator = ControlTasksGenerator(api_key)
        
        # –¢–µ—Å—Ç 1: –ó–∞–¥–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–∑ print
        logger.info("–¢–µ—Å—Ç 1: –ó–∞–¥–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–∑ print")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        test_task = {
            "title": "–†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏",
            "description": "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é result –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π —Ä–∞–∑–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª 10 –∏ 5",
            "task_code": "# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n# –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é result",
            "expected_output": "",  # –ü—É—Å—Ç–æ–π –≤—ã–≤–æ–¥
            "solution_code": "result = 10 - 5",
            "check_variable": "result",
            "expected_variable_value": 5
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        test_cases = [
            ("–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "result = 10 - 5", True),
            ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "result = 10 - 3", False),
            ("–° print", "result = 10 - 5\nprint(result)", True),
            ("–ë–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π", "print(5)", False)
        ]
        
        for case_name, user_code, should_be_correct in test_cases:
            logger.info(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º: {case_name}")
            result = generator.validate_task_execution(
                user_code=user_code,
                expected_output=test_task["expected_output"],
                check_variable=test_task["check_variable"],
                expected_variable_value=test_task["expected_variable_value"]
            )
            
            is_correct = result["is_correct"]
            logger.info(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {is_correct} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {should_be_correct})")
            logger.info(f"    –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {result.get('actual_variable')}")
            
            if is_correct == should_be_correct:
                logger.info(f"    ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
            else:
                logger.error(f"    ‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {str(e)}")
        return False

def test_task_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    logger.info("=== –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –†–ï–õ–ï–í–ê–ù–¢–ù–´–• –ó–ê–î–ê–ù–ò–ô ===")
    
    try:
        from control_tasks_generator import ControlTasksGenerator
        from config import ConfigManager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        config_manager = ConfigManager()
        config_manager.load_config()
        api_key = config_manager.get_api_key()
        generator = ControlTasksGenerator(api_key)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ –ø–æ —Å–ø–∏—Å–∫–∞–º –∏ —Å–ª–æ–≤–∞—Ä—è–º
        lesson_data = {
            "title": "–°–ø–∏—Å–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä–∏ –≤ Python",
            "description": "–ò–∑—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∏ —Å–ª–æ–≤–∞—Ä—è–º–∏"
        }
        
        lesson_content = """
# –°–ø–∏—Å–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä–∏ –≤ Python

## –°–ø–∏—Å–∫–∏
–°–ø–∏—Å–∫–∏ - —ç—Ç–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–æ–≤.

### –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
```python
my_list = [1, 2, 3, 'apple', 'banana']
```

### –ú–µ—Ç–æ–¥—ã —Å–ø–∏—Å–∫–æ–≤
- `append()` - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü
- `insert()` - –≤—Å—Ç–∞–≤–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
- `remove()` - —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
- `pop()` - —É–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç —ç–ª–µ–º–µ–Ω—Ç–∞

## –°–ª–æ–≤–∞—Ä–∏
–°–ª–æ–≤–∞—Ä–∏ - —ç—Ç–æ –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.

### –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
```python
my_dict = {'a': 'apple', 'b': 'banana', 'c': 'cherry'}
```

### –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ: `my_dict['d'] = 'dog'`
- –ü–æ–ª—É—á–µ–Ω–∏–µ: `value = my_dict['a']`
- –£–¥–∞–ª–µ–Ω–∏–µ: `del my_dict['b']`
        """
        
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ...")
        task_data = generator.generate_control_task(
            lesson_data=lesson_data,
            lesson_content=lesson_content,
            communication_style="friendly"
        )
        
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        logger.info(f"title: {task_data.get('title', '–ù–ï–¢')}")
        logger.info(f"description: {task_data.get('description', '–ù–ï–¢')[:100]}...")
        logger.info(f"is_needed: {task_data.get('is_needed', '–ù–ï–¢')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        title = task_data.get('title', '').lower()
        description = task_data.get('description', '').lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∑–∞–¥–∞–Ω–∏–∏
        required_keywords = ['—Å–ø–∏—Å–æ–∫', '—Å–ª–æ–≤–∞—Ä—å', 'append', 'insert', 'remove', 'dict']
        found_keywords = [kw for kw in required_keywords if kw in title or kw in description]
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
        
        if len(found_keywords) >= 2:
            logger.info("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ —Ç–µ–º–µ")
        else:
            logger.warning("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('debug_responses/test_relevant_task.json', 'w', encoding='utf-8') as f:
            json.dump(task_data, f, ensure_ascii=False, indent=2)
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return False

def test_dashboard_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    logger = logging.getLogger(__name__)
    logger.info("=== –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –î–ê–®–ë–û–†–î–û–ú ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        from control_tasks_interface import ControlTasksInterface
        from content_generator import ContentGenerator
        from config import ConfigManager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config_manager = ConfigManager()
        config_manager.load_config()
        api_key = config_manager.get_api_key()
        
        content_generator = ContentGenerator(api_key)
        
        # –°–æ–∑–¥–∞–µ–º mock lesson_interface
        class MockLessonInterface:
            def __init__(self):
                self.current_course_info = {"user_profile": {"communication_style": "friendly"}}
                self.current_lesson_id = "test_lesson_1"
        
        lesson_interface = MockLessonInterface()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        interface = ControlTasksInterface(content_generator, lesson_interface)
        logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É—Å–ø–µ—Ö–∞
        success_buttons = interface._create_success_buttons()
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∫–Ω–æ–ø–æ–∫ —É—Å–ø–µ—Ö–∞: {len(success_buttons)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
        dashboard_button_found = any(
            "–¥–∞—à–±–æ—Ä–¥" in str(button.description).lower() 
            for button in success_buttons 
            if hasattr(button, 'description')
        )
        
        if dashboard_button_found:
            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥–∞—à–±–æ—Ä–¥–æ–º: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ö–û–ù–¢–†–û–õ–¨–ù–´–• –ó–ê–î–ê–ù–ò–ô")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger = setup_logging()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è debug_responses
    Path("debug_responses").mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–µ–∑ print()", test_variable_checking),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", test_task_generation),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞—à–±–æ—Ä–¥–æ–º", test_dashboard_integration)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_name}")
        try:
            result = test_func()
            results[test_name] = result
            status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"   {status}")
        except Exception as e:
            results[test_name] = False
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
    debug_files = list(Path("debug_responses").glob("test_*"))
    if debug_files:
        for file in debug_files:
            print(f"   {file.name}")
    else:
        print("   –§–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
    
    print("\nüîç –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: test_control_tasks_fixed.log")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: debug_responses/")

if __name__ == "__main__":
    main() 