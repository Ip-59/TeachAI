#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è TeachAI.
–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π.
"""

import logging
import json
from typing import Dict, List, Any, Optional
from content_utils import BaseContentGenerator


class ControlTasksGenerator(BaseContentGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""

    def __init__(self, api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.

        Args:
            api_key (str): API –∫–ª—é—á –¥–ª—è OpenAI
        """
        super().__init__(api_key)
        self.logger = logging.getLogger(__name__)

    def generate_control_task(
        self, lesson_data: Dict[str, Any], lesson_content: str, communication_style: str = "friendly", course_context: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞.

        Args:
            lesson_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            communication_style (str): –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
            course_context (Optional[Dict[str, Any]]): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞

        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        """
        print("\n" + "="*80)
        print("üîç [DIAGNOSTIC] generate_control_task –í–´–ó–í–ê–ù")
        print("="*80)
        
        try:
            # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            prompt = self._build_control_task_prompt(lesson_data, lesson_content, communication_style, course_context)
            
            print(f"\nüì§ [DIAGNOSTIC] –ü—Ä–æ–º–ø—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤ OpenAI:")
            print(f"–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {prompt[:500]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            messages = [
                {
                    "role": "system",
                    "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–∑–¥–∞—é—â–∏–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.",
                },
                {"role": "user", "content": prompt},
            ]
            
            response = self.make_api_request(
                messages=messages,
                temperature=0.7,
                max_tokens=1500,
                response_format={"type": "json_object"},
            )
            
            print(f"\nüì• [DIAGNOSTIC] –û—Ç–≤–µ—Ç –æ—Ç OpenAI:")
            print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {response[:500]}...")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            task_data = self._parse_control_task_response(response)
            
            print(f"\n‚úÖ [DIAGNOSTIC] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            print(f"title: {task_data.get('title', '–ù–ï–¢')}")
            print(f"description: {task_data.get('description', '–ù–ï–¢')[:100]}...")
            print(f"task_code: {task_data.get('task_code', '–ù–ï–¢')[:100]}...")
            print(f"expected_output: {task_data.get('expected_output', '–ù–ï–¢')}")
            print("="*80 + "\n")
            
            return task_data

        except Exception as e:
            print(f"\n‚ùå [DIAGNOSTIC] –û–®–ò–ë–ö–ê –≤ generate_control_task: {str(e)}")
            print("="*80 + "\n")
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
            return {
                "title": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                "description": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ: {str(e)}",
                "task_code": "",
                "expected_output": "",
                "solution_code": "",
                "is_needed": False,
                "skip_reason": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            }

    def _check_task_relevance(
        self,
        lesson_title: str,
        lesson_description: str,
        lesson_content: str,
        communication_style: str,
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –∫–æ–¥–æ–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞.

        Args:
            lesson_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            lesson_description (str): –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            communication_style (str): –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:
                - is_needed (bool): –ù—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
                - reason (str): –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ—à–µ–Ω–∏—è
        """
        try:
            # –†–∞—Å—à–∏—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —É—Ä–æ–∫–∞
            extended_content = lesson_content[:2000] if len(lesson_content) > 2000 else lesson_content
            
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—Ä–æ–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞ –Ω–∞ Python.

            –ù–ê–ó–í–ê–ù–ò–ï –£–†–û–ö–ê: {lesson_title}
            –û–ü–ò–°–ê–ù–ò–ï –£–†–û–ö–ê: {lesson_description}
            –°–û–î–ï–†–ñ–ê–ù–ò–ï –£–†–û–ö–ê: {extended_content}

            –ö–†–ò–¢–ï–†–ò–ò –ê–ù–ê–õ–ò–ó–ê:
            1. –ï—Å–ª–∏ —É—Ä–æ–∫ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å—Ä–µ–¥—ã, —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º, —Ç–µ–æ—Ä–∏–∏ –±–µ–∑ –∫–æ–¥–∞ - –∑–∞–¥–∞–Ω–∏–µ –ù–ï –ù–£–ñ–ù–û
            2. –ï—Å–ª–∏ —É—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω—è–µ—Ç –∫–∞–∫ —á—Ç–æ-—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å - –∑–∞–¥–∞–Ω–∏–µ –ù–£–ñ–ù–û
            3. –ï—Å–ª–∏ —É—Ä–æ–∫ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ —É–º–µ—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å - –∑–∞–¥–∞–Ω–∏–µ –ù–ï –ù–£–ñ–ù–û
            4. –ï—Å–ª–∏ —É—Ä–æ–∫ –æ–±—ä—è—Å–Ω—è–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –±–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏ - –∑–∞–¥–∞–Ω–∏–µ –ù–ï –ù–£–ñ–ù–û
            5. –ï—Å–ª–∏ —É—Ä–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ø–∏—Å–∞—Ç—å –∫–æ–¥ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã - –∑–∞–¥–∞–Ω–∏–µ –ù–£–ñ–ù–û

            –ü–†–ò–ú–ï–†–´ –£–†–û–ö–û–í –ë–ï–ó –ó–ê–î–ê–ù–ò–Ø:
            - "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã"
            - "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
            - "–ò—Å—Ç–æ—Ä–∏—è Python"
            - "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ IDE"

            –ü–†–ò–ú–ï–†–´ –£–†–û–ö–û–í –° –ó–ê–î–ê–ù–ò–ï–ú:
            - "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö"
            - "–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã"
            - "–¶–∏–∫–ª—ã –≤ Python"
            - "–§—É–Ω–∫—Ü–∏–∏"

            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ JSON):
            {{
                "is_needed": true/false,
                "reason": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –∑–∞–¥–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –∏–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ"
            }}

            –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI
            messages = [
                {
                    "role": "system",
                    "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π —É—Ä–æ–∫–∏. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.",
                },
                {"role": "user", "content": prompt},
            ]

            response = self.make_api_request(
                messages=messages,
                temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                max_tokens=500,
                response_format={"type": "json_object"},
            )

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            import json
            try:
                # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
                start_idx = response.find("{")
                end_idx = response.rfind("}") + 1
                
                if start_idx != -1 and end_idx != -1:
                    json_str = response[start_idx:end_idx]
                    result = json.loads(json_str)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if "is_needed" not in result:
                        result["is_needed"] = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
                    if "reason" not in result:
                        result["reason"] = "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è"
                    
                    return result
                else:
                    # Fallback - —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
                    return {"is_needed": True, "reason": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫"}
                    
            except json.JSONDecodeError:
                # Fallback - —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
                return {"is_needed": True, "reason": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞"}

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
            # Fallback - —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
            return {"is_needed": True, "reason": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ"}

    def _build_control_task_prompt(
        self,
        lesson_data: Dict[str, Any],
        lesson_content: str,
        communication_style: str,
        course_context: Optional[Dict[str, Any]] = None,
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç prompt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.

        Args:
            lesson_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            communication_style (str): –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
            course_context (Dict[str, Any]): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞

        Returns:
            str: Prompt –¥–ª—è OpenAI
        """
        style_instruction = (
            "–¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ"
            if communication_style == "friendly"
            else "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ"
        )

        extended_content = lesson_content

        return f"""
–°–æ–∑–¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –°–¢–†–û–ì–û –Ω–∞ –æ—Å–Ω–æ–≤–µ lesson_content.

lesson_content:
{extended_content}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –∫–æ–¥–∞ –∏–∑ lesson_content.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω—ã –∏ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ lesson_content.
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π generic –∑–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!" –∏–ª–∏ "–í—ã–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5".
- –ï—Å–ª–∏ –≤ lesson_content –Ω–µ—Ç –∫–æ–¥–∞ –∏–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –≤–µ—Ä–Ω–∏ is_needed: false –∏ skip_reason: "–í —É—Ä–æ–∫–µ –Ω–µ—Ç –∫–æ–¥–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏".
- –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —è–≤–Ω–æ –∑–∞–¥–∞–Ω—ã –≤ task_code.
- expected_output –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥—É print –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π input() –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
- –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –°–õ–û–ñ–ù–´–ú –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.

–í–ê–ñ–ù–û: –í –£–°–õ–û–í–ò–ò –ó–ê–î–ê–ù–ò–Ø –í–°–ï–ì–î–ê –ü–†–ò–í–û–î–ò –í–ï–°–¨ –ù–ï–û–ë–•–û–î–ò–ú–´–ô –ö–û–î!
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Ç–∏–ø–∞ "–≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞", "—Å–º. –ø—Ä–∏–º–µ—Ä –≤—ã—à–µ", "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ —É—Ä–æ–∫–∞" –∏ —Ç.–ø.
- –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–Ω—è—Ç–Ω–æ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –¥—Ä—É–≥–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.
- –í description –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤–µ–¥—ë–Ω –≤–µ—Å—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è—Ç—å.

–ö–†–ò–°–¢–ê–õ–¨–ù–û –ß–ï–¢–ö–ò–ï –§–û–†–ú–£–õ–ò–†–û–í–ö–ò:
- –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —è–≤–Ω–æ —É–∫–∞–∂–∏ "—Å–æ–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫", "–Ω–∞–∫–æ–ø–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "—Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫"
- –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ‚Äî —è–≤–Ω–æ —É–∫–∞–∂–∏ "–≤—ã–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ", "–≤—ã–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
- –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—É–º–º–∞ ‚Äî —è–≤–Ω–æ —É–∫–∞–∂–∏ "–Ω–∞–π–¥–∏—Ç–µ —Å—É–º–º—É", "–≤—ã—á–∏—Å–ª–∏—Ç–µ —Å—É–º–º—É", "—Å–ª–æ–∂–∏—Ç–µ –≤—Å–µ —á–∏—Å–ª–∞"
- –ù–ï –¥–æ–ø—É—Å–∫–∞–π –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–µ–π —Ç–∏–ø–∞ "–≤—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" (–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ: –∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ —Å–ø–∏—Å–æ–∫)
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã: "—Å–æ–±–µ—Ä–∏—Ç–µ", "–Ω–∞–∫–æ–ø–∏—Ç–µ", "–≤—ã–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥–æ–µ", "–Ω–∞–π–¥–∏—Ç–µ —Å—É–º–º—É"

–í–ê–ñ–ù–û: –≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (solution_code) –¥–æ–ª–∂–Ω–æ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è!
- –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç "–≤—Å—Ç–∞–≤—å—Ç–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É 2" - –≤ solution_code –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å insert(2, ...)
- –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç "—É–¥–∞–ª–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç X" - –≤ solution_code –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å remove(X)
- –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ expected_output —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–º—É –≤—ã–≤–æ–¥—É solution_code

–ö–†–ò–¢–ò–ß–ï–°–ö–û –í–ê–ñ–ù–û: task_code –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –í–°–ï –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
- –ï—Å–ª–∏ –≤ description —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "—Å–ø–∏—Å–æ–∫ my_list = [1, 2, 3]" - –≤ task_code –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "my_list = [1, 2, 3]"
- –ï—Å–ª–∏ –≤ description —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "—Å–ª–æ–≤–∞—Ä—å my_dict = {{'a': 'apple'}}" - –≤ task_code –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "my_dict = {{'a': 'apple'}}"
- –ù–ï –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ task_code!
- –°—Ç—É–¥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –í–°–ï –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ task_code

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–¢–û–õ–¨–ö–û JSON!):
{{{{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
  "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ü–û–õ–ù–´–ú –ö–û–î–û–ú, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å",
  "task_code": "–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ä–µ—à–µ–Ω–∏–∏",
  "expected_output": "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤—ã–≤–æ–¥)",
  "solution_code": "–ü–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
  "hints": ["–ü–æ–¥—Å–∫–∞–∑–∫–∞ 1", "–ü–æ–¥—Å–∫–∞–∑–∫–∞ 2"],
  "is_needed": true/false,
  "skip_reason": "–ü—Ä–∏—á–∏–Ω–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
}}}}

–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:
{{{{
  "title": "–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∏ —Å–ª–æ–≤–∞—Ä—è–º–∏",
  "description": "–î–∞–Ω —Å–ø–∏—Å–æ–∫ my_list = [1, 2, 3, 'apple', 'banana', 'cherry'] –∏ —Å–ª–æ–≤–∞—Ä—å my_dict = {{{{'a': 'apple', 'b': 'banana', 'c': 'cherry'}}}}. –î–æ–±–∞–≤—å—Ç–µ —á–∏—Å–ª–æ 5 –≤ —Å–ø–∏—Å–æ–∫, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É 'grape' –ø–æ –∏–Ω–¥–µ–∫—Å—É 2, —É–¥–∞–ª–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç 'cherry' –∏–∑ —Å–ø–∏—Å–∫–∞. –ó–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ 'd'-'dog' –≤ —Å–ª–æ–≤–∞—Ä—å. –í –∫–æ–Ω—Ü–µ –≤—ã–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è —Å–ø–∏—Å–æ–∫ –∏ —Å–ª–æ–≤–∞—Ä—å.",
  "task_code": "my_list = [1, 2, 3, 'apple', 'banana', 'cherry']\nmy_dict = {{{{'a': 'apple', 'b': 'banana', 'c': 'cherry'}}}}\n# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å",
  "expected_output": "[1, 2, 'grape', 3, 'apple', 'banana', 5]\n{{{{'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'dog'}}}}",
  "solution_code": "my_list = [1, 2, 3, 'apple', 'banana', 'cherry']\nmy_dict = {{{{'a': 'apple', 'b': 'banana', 'c': 'cherry'}}}}\nmy_list.append(5)\nmy_list.insert(2, 'grape')\nmy_list.remove('cherry')\nmy_dict['d'] = 'dog'\nprint(my_list)\nprint(my_dict)",
  "hints": ["–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã append –∏ insert –¥–ª—è —Å–ø–∏—Å–∫–∞", "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ remove", "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã –≤ —Å–ª–æ–≤–∞—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ my_dict['d'] = 'dog'"],
  "is_needed": true,
  "skip_reason": ""
}}}}

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""

    def _parse_control_task_response(self, response: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

        Args:
            response (str): –û—Ç–≤–µ—Ç –æ—Ç OpenAI

        Returns:
            Dict[str, Any]: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        """
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            start_idx = response.find("{")
            end_idx = response.rfind("}") + 1

            if start_idx != -1 and end_idx != -1:
                json_str = response[start_idx:end_idx]
                task_data = json.loads(json_str)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = [
                    "title",
                    "description",
                    "task_code",
                    "expected_output",
                    "solution_code",
                ]
                for field in required_fields:
                    if field not in task_data:
                        task_data[field] = ""

                # –î–æ–±–∞–≤–ª—è–µ–º hints –µ—Å–ª–∏ –Ω–µ—Ç
                if "hints" not in task_data:
                    task_data["hints"] = []

                # --- –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –≠–¢–ê–õ–û–ù–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø ---
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ solution_code —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç expected_output
                try:
                    import io
                    from contextlib import redirect_stdout
                    output_buffer = io.StringIO()
                    local_vars = {}
                    with redirect_stdout(output_buffer):
                        exec(task_data["solution_code"], {}, local_vars)
                    actual_solution_output = output_buffer.getvalue().strip()
                    
                    # –ï—Å–ª–∏ expected_output –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–º—É –≤—ã–≤–æ–¥—É solution_code
                    if task_data["expected_output"] and actual_solution_output != task_data["expected_output"].strip():
                        print(f"‚ö†Ô∏è [DIAGNOSTIC] –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏:")
                        print(f"   expected_output: '{task_data['expected_output']}'")
                        print(f"   actual_solution_output: '{actual_solution_output}'")
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º expected_output
                        task_data["expected_output"] = actual_solution_output
                        print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω expected_output")
                except Exception as e:
                    print(f"‚ö†Ô∏è [DIAGNOSTIC] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")

                # --- –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–¢–´ TASK_CODE ---
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ task_code —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                try:
                    import re
                    
                    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –≤ description
                    description = task_data.get("description", "")
                    task_code = task_data.get("task_code", "")
                    
                    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∏ —Å–ª–æ–≤–∞—Ä–µ–π –≤ description
                    list_patterns = [
                        r"—Å–ø–∏—Å–æ–∫\s+(\w+)\s*=\s*\[([^\]]+)\]",
                        r"(\w+)\s*=\s*\[([^\]]+)\].*—Å–ø–∏—Å–æ–∫",
                        r"—Å–ø–∏—Å–æ–∫\s+(\w+).*=\s*\[([^\]]+)\]"
                    ]
                    
                    dict_patterns = [
                        r"—Å–ª–æ–≤–∞—Ä—å\s+(\w+)\s*=\s*\{([^}]+)\}",
                        r"(\w+)\s*=\s*\{([^}]+)\}.*—Å–ª–æ–≤–∞—Ä—å",
                        r"—Å–ª–æ–≤–∞—Ä—å\s+(\w+).*=\s*\{([^}]+)\}"
                    ]
                    
                    missing_data = []
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∫–∏
                    for pattern in list_patterns:
                        matches = re.findall(pattern, description, re.IGNORECASE)
                        for var_name, var_content in matches:
                            if f"{var_name} = [" not in task_code:
                                missing_data.append(f"–°–ø–∏—Å–æ–∫ {var_name} = [{var_content}]")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä–∏
                    for pattern in dict_patterns:
                        matches = re.findall(pattern, description, re.IGNORECASE)
                        for var_name, var_content in matches:
                            if f"{var_name} = {{" not in task_code:
                                missing_data.append(f"–°–ª–æ–≤–∞—Ä—å {var_name} = {{{var_content}}}")
                    
                    if missing_data:
                        print(f"‚ö†Ô∏è [DIAGNOSTIC] –í task_code –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                        for item in missing_data:
                            print(f"   - {item}")
                        print(f"   task_code: '{task_code}'")
                        print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è [DIAGNOSTIC] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ task_code: {e}")

                # --- –£–õ–£–ß–®–ï–ù–û: —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ---
                # –ï—Å–ª–∏ expected_output –ø—É—Å—Ç–æ–π, –∞ –≤ solution_code –µ—Å—Ç—å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
                if not task_data["expected_output"].strip():
                    import re
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: –∏–º—è = –∑–Ω–∞—á–µ–Ω–∏–µ (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫)
                    lines = task_data["solution_code"].strip().split('\n')
                    for line in lines:
                        # –ò—â–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                        match = re.search(r"^(\w+)\s*=\s*(.+)$", line.strip())
                        if match:
                            var_name = match.group(1)
                            var_value = match.group(2).strip()
                            # –ü—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                            try:
                                # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è eval
                                safe_dict = {}
                                expected_value = eval(var_value, {"__builtins__": {}}, safe_dict)
                                task_data["check_variable"] = var_name
                                task_data["expected_variable_value"] = expected_value
                                print(f"üîç [DIAGNOSTIC] –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var_name} = {expected_value}")
                                break
                            except Exception as e:
                                print(f"‚ö†Ô∏è [DIAGNOSTIC] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ {var_value}: {e}")
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ fallback
                                task_data["check_variable"] = var_name
                                task_data["expected_variable_value"] = var_value
                                break
                # --- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ description –µ—Å—Ç—å –∫–æ–¥ ---
                description = task_data.get("description", "")
                if not ("code:" in description.lower() or "–∫–æ–¥:" in description.lower() or "```" in description or "\n" in description and any(word in description for word in ["=", "print", "if", "for", "while", "def", "class"])):
                    print(f"‚ö†Ô∏è [DIAGNOSTIC] –í–ù–ò–ú–ê–ù–ò–ï: –í description –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∫–æ–¥–∞! –ó–∞–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º –∏–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º.")
                    print(f"   description: {description}")

                # --- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ description –∏ expected_output ---
                expected_output = task_data.get("expected_output", "")
                description_lower = description.lower()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ –≤ expected_output –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ [...], –Ω–æ –≤ description –Ω–µ—Ç —Å–ª–æ–≤ –æ —Å–ø–∏—Å–∫–µ
                if "[" in expected_output and "]" in expected_output and not any(word in description_lower for word in ["—Å–ø–∏—Å–æ–∫", "—Å–æ–±–µ—Ä–∏—Ç–µ", "–Ω–∞–∫–æ–ø–∏—Ç–µ", "—Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫"]):
                    print(f"‚ö†Ô∏è [DIAGNOSTIC] –í–ù–ò–ú–ê–ù–ò–ï: –í expected_output –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –≤ description –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è '—Å–æ–±–µ—Ä–∏—Ç–µ –≤ —Å–ø–∏—Å–æ–∫'!")
                    print(f"   description: {description}")
                    print(f"   expected_output: {expected_output}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ –≤ expected_output –µ—Å—Ç—å print() –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–æ –≤ description –Ω–µ—Ç "–∫–∞–∂–¥–æ–µ"
                if "print(" in expected_output and not any(word in description_lower for word in ["–∫–∞–∂–¥–æ–µ", "–∫–∞–∂–¥—ã–π", "–æ—Ç–¥–µ–ª—å–Ω–æ"]):
                    print(f"‚ö†Ô∏è [DIAGNOSTIC] –í–ù–ò–ú–ê–ù–ò–ï: –í expected_output –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–æ –≤ description –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è '–∫–∞–∂–¥–æ–µ'!")
                    print(f"   description: {description}")
                    print(f"   expected_output: {expected_output}")
                return task_data
            else:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return self._create_fallback_task("–ó–∞–¥–∞–Ω–∏–µ")

    def _create_fallback_task(self, lesson_title: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç fallback –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        Args:
            lesson_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            Dict[str, Any]: Fallback –∑–∞–¥–∞–Ω–∏–µ
        """
        self.logger.warning(
            f"–°—Ä–∞–±–æ—Ç–∞–ª fallback –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ: {lesson_title}"
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ fallback –∑–∞–¥–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã —É—Ä–æ–∫–∞
        if "—Ü–∏–∫–ª" in lesson_title.lower() or "—Ü–∏–∫–ª—ã" in lesson_title.lower():
            return {
                "is_needed": True,
                "title": f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ '{lesson_title}'",
                "description": "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for.",
                "task_code": "# –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for –¥–ª—è –≤—ã–≤–æ–¥–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 5",
                "expected_output": "1\n2\n3\n4\n5",
                "solution_code": "# –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ\nfor i in range(1, 6):\n    print(i)",
                "hints": [
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for",
                    "–§—É–Ω–∫—Ü–∏—è range(1, 6) —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 5",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ print() –¥–ª—è –≤—ã–≤–æ–¥–∞",
                ],
            }
        elif "—É—Å–ª–æ–≤–Ω" in lesson_title.lower() or "if" in lesson_title.lower():
            return {
                "is_needed": True,
                "title": f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ '{lesson_title}'",
                "description": "–î–∞–Ω–æ —á–∏—Å–ª–æ number = 10. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ —á–µ—Ç–Ω—ã–º, –∏ –≤—ã–≤–æ–¥–∏—Ç '–ß–µ—Ç–Ω–æ–µ' –∏–ª–∏ '–ù–µ—á–µ—Ç–Ω–æ–µ'.",
                "task_code": "number = 10\n# –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ number —á–µ—Ç–Ω—ã–º",
                "expected_output": "–ß–µ—Ç–Ω–æ–µ",
                "solution_code": "number = 10\nif number % 2 == 0:\n    print('–ß–µ—Ç–Ω–æ–µ')\nelse:\n    print('–ù–µ—á–µ—Ç–Ω–æ–µ')",
                "hints": [
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä % –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞",
                    "–£—Å–ª–æ–≤–∏–µ: –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 2 —Ä–∞–≤–µ–Ω 0",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ if-else",
                ],
            }
        else:
            return {
                "is_needed": True,
                "title": f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ '{lesson_title}'",
                "description": "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–µ–∫—Å—Ç '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print().",
                "task_code": "# –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ print() –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞",
                "expected_output": "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!",
                "solution_code": "# –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ\nprint('–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!')",
                "hints": [
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print()",
                    "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å",
                ],
            }

    def validate_task_execution(
        self, user_code: str, expected_output: str, check_variable: Optional[str] = None, expected_variable_value: Optional[Any] = None
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

        Args:
            user_code (str): –ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            expected_output (str): –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (stdout)
            check_variable (Optional[str], optional): –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            expected_variable_value (Optional[Any], optional): –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:
                - is_correct (bool): –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                - actual_output (str): –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                - actual_variable (Any): –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è)
                - error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        try:
            import io
            from contextlib import redirect_stdout
            output_buffer = io.StringIO()
            local_vars = {}
            with redirect_stdout(output_buffer):
                exec(user_code, {}, local_vars)
            actual_output = output_buffer.getvalue().strip()
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            if check_variable is not None:
                actual_var = local_vars.get(check_variable, None)
                is_correct = actual_var == expected_variable_value
                return {
                    "is_correct": is_correct,
                    "actual_output": actual_output,
                    "actual_variable": actual_var,
                    "error_message": "",
                }
            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞
            is_correct = actual_output == expected_output.strip()
            return {
                "is_correct": is_correct,
                "actual_output": actual_output,
                "actual_variable": None,
                "error_message": "",
            }
        except Exception as e:
            import traceback
            tb = traceback.format_exc()
            return {"is_correct": False, "actual_output": "", "actual_variable": None, "error_message": f"{e}\n{tb}"}
