"""
–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫–∞–º.
–í—ã–Ω–µ—Å–µ–Ω–∞ –∏–∑ lesson_interface.py –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏.
"""

import ipywidgets as widgets
import logging
from lesson_utils import LessonUtils
import re
from cell_integration import cell_adapter


class LessonNavigation:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫–∞–º."""

    def __init__(self, lesson_interface):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

        Args:
            lesson_interface: –≠–∫–∑–µ–º–ø–ª—è—Ä LessonInterface
        """
        self.lesson_interface = lesson_interface
        self.logger = logging.getLogger(__name__)
        self.utils = LessonUtils()

    def create_enhanced_navigation_buttons(self, section_id, topic_id, lesson_id):
        """
        –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —É—Ä–æ–∫–∞.

        Args:
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            widgets.HBox: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """
        try:
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º"
            back_button = widgets.Button(
                description="‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º",
                button_style="warning",
                layout=widgets.Layout(width="auto", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
            test_button = widgets.Button(
                description="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
                button_style="info",
                layout=widgets.Layout(width="auto", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
            ask_button = widgets.Button(
                description="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                button_style="success",
                layout=widgets.Layout(width="auto", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–û–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
            explain_button = widgets.Button(
                description="üìö –û–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
                button_style="primary",
                layout=widgets.Layout(width="auto", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã"
            examples_button = widgets.Button(
                description="üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã",
                button_style="info",
                layout=widgets.Layout(width="auto", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"
            control_tasks_button = widgets.Button(
                description="üõ†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
                button_style="danger",
                layout=widgets.Layout(width="auto", margin="5px"),
                disabled=True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
                tooltip="–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞",
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ
            self.control_tasks_button = control_tasks_button

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self._setup_button_handlers(
                back_button,
                test_button,
                ask_button,
                explain_button,
                examples_button,
                control_tasks_button,
                section_id,
                topic_id,
                lesson_id,
            )

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
            navigation_container = widgets.HBox(
                [
                    examples_button,
                    explain_button,
                    ask_button,
                    test_button,
                    control_tasks_button,
                    back_button,
                ],
                layout=widgets.Layout(
                    width="100%",
                    justify_content="space-between",
                    padding="10px",
                    border="1px solid #ddd",
                    border_radius="5px",
                    margin="10px 0",
                ),
            )

            return navigation_container

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            back_button = widgets.Button(
                description="‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", button_style="warning"
            )
            back_button.on_click(lambda b: self._handle_back_button_clicked(b))
            return widgets.HBox([back_button])

    def _setup_button_handlers(
        self,
        back_button,
        test_button,
        ask_button,
        explain_button,
        examples_button,
        control_tasks_button,
        section_id,
        topic_id,
        lesson_id,
    ):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

        Args:
            back_button: –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            test_button: –ö–Ω–æ–ø–∫–∞ "–¢–µ—Å—Ç"
            ask_button: –ö–Ω–æ–ø–∫–∞ "–í–æ–ø—Ä–æ—Å"
            explain_button: –ö–Ω–æ–ø–∫–∞ "–û–±—ä—è—Å–Ω–∏—Ç—å"
            examples_button: –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ—Ä—ã"
            control_tasks_button: –ö–Ω–æ–ø–∫–∞ "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞
        """

        def on_back_button_clicked(b):
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
            self.utils.clear_lesson_cache(self.lesson_interface)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
            from interface import InterfaceState

            self.lesson_interface.interface.current_state = (
                InterfaceState.COURSE_SELECTION
            )
            self.lesson_interface.interface.show_course_selection()

        def on_test_button_clicked(b):
            from IPython.display import display

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
            if (
                hasattr(self.lesson_interface, "assessment_interface")
                and self.lesson_interface.assessment_interface
            ):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AssessmentInterface –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ—Å—Ç–∞
                # –ü–æ–ª—É—á–∞–µ–º course_id –±–µ–∑–æ–ø–∞—Å–Ω–æ
                course_id = self.lesson_interface.current_course_info.get(
                    "course_plan", {}
                ).get("course_id", "default")

                display(
                    self.lesson_interface.assessment_interface.show_assessment(
                        current_course=course_id,
                        current_section=self.lesson_interface.current_course_info[
                            "section_id"
                        ],
                        current_topic=self.lesson_interface.current_course_info[
                            "topic_id"
                        ],
                        current_lesson=self.lesson_interface.current_course_info[
                            "lesson_id"
                        ],
                        current_lesson_content=self.lesson_interface.current_lesson_content,
                    )
                )
            elif self.lesson_interface.assessment:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ assessment_interface –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                self.logger.warning(
                    "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - assessment_interface –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fallback –ª–æ–≥–∏–∫—É –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                from IPython.display import display, HTML

                display(
                    HTML(
                        "<p style='color: orange;'>–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>"
                    )
                )
            else:
                self.logger.warning("–ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                from IPython.display import display, HTML

                display(HTML("<p style='color: red;'>–ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>"))

        def on_ask_button_clicked(b):
            # –°–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            self.lesson_interface._hide_other_containers()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤
            if self.lesson_interface.qa_container:
                self.lesson_interface.qa_container.layout.display = "block"

        def on_explain_button_clicked(b):
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            # –°–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            self.lesson_interface._hide_other_containers()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            self.lesson_interface._show_explanation_choice()

        def extract_code_blocks_from_html(html: str) -> list:
            """
            –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –≤—Å–µ <pre><code>...</code></pre> –≤ HTML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤ –∫–æ–¥–∞.
            """
            code_blocks = []
            for match in re.finditer(r"<pre><code>([\s\S]*?)</code></pre>", html):
                code = match.group(1)
                code = re.sub(r"<.*?>", "", code)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML-—Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞
                code_blocks.append(code.strip())
            return code_blocks

        def extract_titles_and_texts(html: str) -> list:
            """
            –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ (<h3>) –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è (<p>) –∏–∑ HTML, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç).
            """
            blocks = []
            last_title = None
            last_text = None
            # –ò—â–µ–º <h3> –∏ <p> –≤ –ø–æ—Ä—è–¥–∫–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            pattern = re.compile(r"(<h3>.*?</h3>|<p>.*?</p>)", re.DOTALL)
            for match in pattern.finditer(html):
                block = match.group(0)
                if block.startswith("<h3>"):
                    last_title = re.sub("<.*?>", "", block)
                elif block.startswith("<p>"):
                    last_text = re.sub("<.*?>", "", block)
                if last_title or last_text:
                    blocks.append((last_title, last_text))
                    last_title = None
                    last_text = None
            return blocks

        def on_examples_button_clicked(b):
            # –°–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            self.lesson_interface._hide_other_containers()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤
            if self.lesson_interface.examples_container:
                self.lesson_interface.examples_container.layout.display = "block"
                loading_html = widgets.HTML(
                    value="<p><strong>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤...</strong></p>"
                )
                self.lesson_interface.examples_container.children = [loading_html]
                try:
                    from examples_generator import ExamplesGenerator

                    examples_generator = ExamplesGenerator(
                        self.lesson_interface.content_generator.api_key
                    )
                    examples = examples_generator.generate_examples(
                        lesson_data=self.lesson_interface.current_lesson_data,
                        lesson_content=self.lesson_interface.current_lesson_content,
                        communication_style=self.lesson_interface.current_course_info[
                            "user_profile"
                        ]["communication_style"],
                        course_context=self.lesson_interface.current_course_info,
                    )
                    # --- –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤—Å–µ –∫–æ–¥—ã ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ ---
                    widgets_to_display = []
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ü—Ä–∏–º–µ—Ä—ã:" (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ)
                    if "–ü—Ä–∏–º–µ—Ä—ã" in examples:
                        widgets_to_display.append(widgets.HTML("<h3>–ü—Ä–∏–º–µ—Ä—ã</h3>"))
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
                    code_blocks = extract_code_blocks_from_html(examples)
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    titles_and_texts = extract_titles_and_texts(examples)
                    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —è—á–µ–π–∫–∞, –ø–µ—Ä–µ–¥ –Ω–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫/–ø–æ—è—Å–Ω–µ–Ω–∏–µ
                    for i, code in enumerate(code_blocks):
                        if i < len(titles_and_texts):
                            title, text = titles_and_texts[i]
                            if title:
                                widgets_to_display.append(
                                    widgets.HTML(f"<h4>{title}</h4>")
                                )
                            if text:
                                widgets_to_display.append(
                                    widgets.HTML(f"<p>{text}</p>")
                                )
                        demo_cells = cell_adapter.create_demo_cells([{"code": code}])
                        widgets_to_display.extend(demo_cells)
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ ‚Äî fallback: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    if not code_blocks:
                        widgets_to_display.append(widgets.HTML(value=examples))
                    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                    close_button = widgets.Button(
                        description="‚úï –ó–∞–∫—Ä—ã—Ç—å",
                        button_style="danger",
                        layout=widgets.Layout(width="auto", margin="10px 0"),
                    )

                    def on_close_button_clicked(b):
                        self.lesson_interface.examples_container.layout.display = "none"

                    close_button.on_click(on_close_button_clicked)
                    widgets_to_display.append(close_button)
                    self.lesson_interface.examples_container.children = (
                        widgets_to_display
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {str(e)}")
                    error_html = widgets.HTML(
                        value=f"<p style='color: red;'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {str(e)}</p>"
                    )
                    close_button = widgets.Button(
                        description="‚úï –ó–∞–∫—Ä—ã—Ç—å",
                        button_style="danger",
                        layout=widgets.Layout(width="auto", margin="10px 0"),
                    )

                    def on_close_button_clicked(b):
                        self.lesson_interface.examples_container.layout.display = "none"

                    close_button.on_click(on_close_button_clicked)
                    self.lesson_interface.examples_container.children = [
                        error_html,
                        close_button,
                    ]

        def on_control_tasks_button_clicked(b):
            # –°–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            self.lesson_interface._hide_other_containers()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            if self.lesson_interface.control_tasks_container:
                self.lesson_interface.control_tasks_container.layout.display = "block"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                loading_html = widgets.HTML(
                    value="<p><strong>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è...</strong></p>"
                )
                self.lesson_interface.control_tasks_container.children = [loading_html]

                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                    task_interface = (
                        self.lesson_interface.control_tasks_interface.show_control_task(
                            lesson_data=self.lesson_interface.current_lesson_data,
                            lesson_content=self.lesson_interface.current_lesson_content,
                        )
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
                    close_button = widgets.Button(
                        description="‚úï –ó–∞–∫—Ä—ã—Ç—å",
                        button_style="danger",
                        layout=widgets.Layout(width="auto", margin="10px 0"),
                    )

                    def on_close_button_clicked(b):
                        self.lesson_interface.control_tasks_container.layout.display = (
                            "none"
                        )

                    close_button.on_click(on_close_button_clicked)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    self.lesson_interface.control_tasks_container.children = [
                        task_interface,
                        close_button,
                    ]

                except Exception as e:
                    self.logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {str(e)}"
                    )
                    error_html = widgets.HTML(
                        value=f"<p style='color: red;'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}</p>"
                    )
                    close_button = widgets.Button(
                        description="‚úï –ó–∞–∫—Ä—ã—Ç—å",
                        button_style="danger",
                        layout=widgets.Layout(width="auto", margin="10px 0"),
                    )

                    def on_close_button_clicked(b):
                        self.lesson_interface.control_tasks_container.layout.display = (
                            "none"
                        )

                    close_button.on_click(on_close_button_clicked)
                    self.lesson_interface.control_tasks_container.children = [
                        error_html,
                        close_button,
                    ]

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        back_button.on_click(on_back_button_clicked)
        test_button.on_click(on_test_button_clicked)
        ask_button.on_click(on_ask_button_clicked)
        explain_button.on_click(on_explain_button_clicked)
        examples_button.on_click(on_examples_button_clicked)
        control_tasks_button.on_click(on_control_tasks_button_clicked)

    def _handle_back_button_clicked(self, b):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (fallback)."""
        try:
            self.utils.clear_lesson_cache(self.lesson_interface)
            from interface import InterfaceState

            self.lesson_interface.interface.current_state = (
                InterfaceState.COURSE_SELECTION
            )
            self.lesson_interface.interface.show_course_selection()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {str(e)}")
