"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ Jupyter Notebook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã InteractiveCellWidget.
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from cell_widget_base import CellWidgetBase
from interactive_cell_widget import InteractiveCellWidget, create_interactive_cell
from result_checker import CheckResult, check_result
from control_tasks_logger import get_cell_stats, is_cell_completed, default_logger
from IPython.display import display
import ipywidgets as widgets


def test_basic_math_task():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞"""
    print("=== –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ ===")

    task = create_interactive_cell(
        task_description="–í—ã—á–∏—Å–ª–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–µ–ª 15 –∏ 27. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'result'.",
        expected_result=42,
        check_type="exact",
        initial_code="# –í—ã—á–∏—Å–ª–∏—Ç–µ —Å—É–º–º—É 15 + 27\nresult = ",
        title="–ó–∞–¥–∞—á–∞ 1: –°–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª",
        cell_id="math_task_1",
    )

    display(task)
    return task


def test_list_manipulation():
    """–¢–µ—Å—Ç 2: –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏"""
    print("=== –¢–µ—Å—Ç 2: –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ ===")

    task = create_interactive_cell(
        task_description="–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 5. –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å [1, 4, 9, 16, 25]. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É 'squares' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
        expected_result=[1, 4, 9, 16, 25],
        check_type="list",
        initial_code="""# –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
squares = []
# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
for i in range(1, 6):  # –ø–æ–¥—Å–∫–∞–∑–∫–∞: –æ—Ç 1 –¥–æ 5 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    # –¥–æ–±–∞–≤—å—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ i –≤ —Å–ø–∏—Å–æ–∫
    pass

squares  # —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç""",
        title="–ó–∞–¥–∞—á–∞ 2: –°–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤",
        cell_id="list_task_1",
    )

    display(task)
    return task


def test_function_creation():
    """–¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("=== –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===")

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
    test_cases = [
        ((5,), 120),  # 5! = 120
        ((3,), 6),  # 3! = 6
        ((1,), 1),  # 1! = 1
        ((0,), 1),  # 0! = 1
    ]

    task = create_interactive_cell(
        task_description="–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é factorial(n), –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n.",
        expected_result=None,  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è
        check_type="function",
        check_kwargs={"test_cases": test_cases},
        initial_code="""def factorial(n):
    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    pass

factorial""",
        title="–ó–∞–¥–∞—á–∞ 3: –§—É–Ω–∫—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞",
        cell_id="function_task_1",
    )

    display(task)
    return task


def test_numeric_precision():
    """–¢–µ—Å—Ç 4: –ß–∏—Å–ª–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"""
    print("=== –¢–µ—Å—Ç 4: –ß–∏—Å–ª–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ===")

    task = create_interactive_cell(
        task_description="–í—ã—á–∏—Å–ª–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–æ–º 3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ œÄ = 3.14159.",
        expected_result=28.27431,
        check_type="numeric",
        check_kwargs={"tolerance": 1e-3},
        initial_code="""import math

radius = 3
pi = 3.14159
# –í—ã—á–∏—Å–ª–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞
area =

area""",
        title="–ó–∞–¥–∞—á–∞ 4: –ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞",
        cell_id="numeric_task_1",
    )

    display(task)
    return task


def test_string_processing():
    """–¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫"""
    print("=== –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ ===")

    task = create_interactive_cell(
        task_description="–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É 'Hello World' –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø–æ–ª—É—á–∏—Ç–µ 'HELLO WORLD'.",
        expected_result="HELLO WORLD",
        check_type="exact",
        initial_code="""text = "Hello World"
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
result =

result""",
        title="–ó–∞–¥–∞—á–∞ 5: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏",
        cell_id="string_task_1",
        max_attempts=3,
    )

    display(task)
    return task


def test_with_solution():
    """–¢–µ—Å—Ç 6: –ó–∞–¥–∞—á–∞ —Å –ø–æ–∫–∞–∑–æ–º —Ä–µ—à–µ–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç 6: –ó–∞–¥–∞—á–∞ —Å –ø–æ–∫–∞–∑–æ–º —Ä–µ—à–µ–Ω–∏—è ===")

    task = create_interactive_cell(
        task_description="–ù–∞–π–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–ø–∏—Å–∫–µ [3, 1, 4, 1, 5, 9, 2, 6].",
        expected_result=9,
        check_type="exact",
        initial_code="""numbers = [3, 1, 4, 1, 5, 9, 2, 6]
# –ù–∞–π–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
max_number =

max_number""",
        title="–ó–∞–¥–∞—á–∞ 6: –ú–∞–∫—Å–∏–º—É–º –≤ —Å–ø–∏—Å–∫–µ",
        cell_id="max_task_1",
        show_solution=True,
        solution_code="""numbers = [3, 1, 4, 1, 5, 9, 2, 6]
# –ù–∞–π–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
max_number = max(numbers)

max_number""",
    )

    display(task)
    return task


def test_complex_logic():
    """–¢–µ—Å—Ç 7: –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞"""
    print("=== –¢–µ—Å—Ç 7: –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ ===")

    task = create_interactive_cell(
        task_description="""–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 2 –¥–æ 20 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
        –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20].""",
        expected_result=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20],
        check_type="list",
        check_kwargs={"order_matters": True},
        initial_code="""# –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 2 –¥–æ 20
even_numbers = []

# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å

even_numbers""",
        title="–ó–∞–¥–∞—á–∞ 7: –ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞",
        cell_id="logic_task_1",
    )

    display(task)
    return task


def test_error_handling():
    """–¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    print("=== –¢–µ—Å—Ç 8: –ó–∞–¥–∞—á–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏ ===")

    task = create_interactive_cell(
        task_description="–†–∞–∑–¥–µ–ª–∏—Ç–µ —á–∏—Å–ª–æ 100 –Ω–∞ —á–∏—Å–ª–æ 5 –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'result'.",
        expected_result=20.0,
        check_type="numeric",
        check_kwargs={"tolerance": 1e-6},
        initial_code="""# –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–ª–µ–Ω–∏–µ
numerator = 100
denominator = 5
result =

result""",
        title="–ó–∞–¥–∞—á–∞ 8: –î–µ–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª",
        cell_id="division_task_1",
    )

    display(task)
    return task


def test_statistics_display():
    """–¢–µ—Å—Ç 9: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("=== –¢–µ—Å—Ç 9: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º ===")

    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_widget = widgets.HTML()

    def update_stats():
        overall_stats = default_logger.get_overall_stats()

        stats_html = f"""
        <div style='background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 10px 0;'>
            <h4 style='margin-top: 0; color: #1976d2;'>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
            <div style='display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;'>
                <div>
                    <strong>–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</strong> {overall_stats['total_cells']}<br>
                    <strong>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</strong> {overall_stats['completed_cells']}<br>
                    <strong>–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {overall_stats['completion_rate']:.1%}
                </div>
                <div>
                    <strong>–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:</strong> {overall_stats['total_attempts']}<br>
                    <strong>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</strong> {overall_stats['success_rate']:.1%}<br>
                    <strong>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:</strong> {overall_stats['average_execution_time_ms']:.1f} –º—Å
                </div>
            </div>
        </div>
        """

        stats_widget.value = stats_html

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    refresh_button = widgets.Button(
        description="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", button_style="info"
    )

    def on_refresh(button):
        update_stats()

    refresh_button.on_click(on_refresh)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_stats()

    display(widgets.VBox([refresh_button, stats_widget]))

    return stats_widget


def test_cell_management():
    """–¢–µ—Å—Ç 10: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∞–º–∏"""
    print("=== –¢–µ—Å—Ç 10: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∞–º–∏ ===")

    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    cell_selector = widgets.Dropdown(
        options=[], description="–Ø—á–µ–π–∫–∞:", style={"description_width": "80px"}
    )

    info_area = widgets.HTML()

    clear_button = widgets.Button(
        description="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏", button_style="danger"
    )

    clear_all_button = widgets.Button(
        description="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", button_style="danger"
    )

    refresh_list_button = widgets.Button(
        description="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", button_style="info"
    )

    def update_cell_list():
        cell_ids = list(default_logger.log_data["cell_stats"].keys())
        if cell_ids:
            cell_selector.options = cell_ids
        else:
            cell_selector.options = []
            cell_selector.value = None

    def on_cell_selected(change):
        if change["new"]:
            cell_id = change["new"]
            stats = get_cell_stats(cell_id)
            completed = is_cell_completed(cell_id)

            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            best_score_text = f"{stats['best_score']:.1%}" if stats else "N/A"

            info_html = f"""
            <div style='background: #f8f9fa; padding: 10px; border-radius: 5px; margin: 5px 0;'>
                <strong>–Ø—á–µ–π–∫–∞:</strong> {cell_id}<br>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' if completed else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}<br>
                <strong>–ü–æ–ø—ã—Ç–æ–∫:</strong> {stats['total_attempts'] if stats else 0}<br>
                <strong>–£—Å–ø–µ—à–Ω—ã—Ö:</strong> {stats['successful_attempts'] if stats else 0}<br>
                <strong>–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {best_score_text}
            </div>
            """
            info_area.value = info_html

    def on_refresh_list(button):
        update_cell_list()
        info_area.value = (
            "<div style='color: blue; font-weight: bold;'>üîÑ –°–ø–∏—Å–æ–∫ —è—á–µ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω</div>"
        )

    def on_clear_cell(button):
        if cell_selector.value:
            cell_id = cell_selector.value
            default_logger.clear_cell_data(cell_id)
            update_cell_list()
            # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            cell_selector.value = None
            info_area.value = f"<div style='color: green; font-weight: bold;'>‚úÖ –î–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ '{cell_id}' –æ—á–∏—â–µ–Ω—ã</div>"

    def on_clear_all(button):
        # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–º–µ–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        if button.description == "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ":
            button.description = "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É"
            button.button_style = "warning"
            info_area.value = "<div style='color: orange; font-weight: bold;'>‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>"
        else:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            default_logger.clear_all_data()
            update_cell_list()
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            button.description = "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
            button.button_style = "danger"
            # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            cell_selector.value = None
            info_area.value = "<div style='color: green; font-weight: bold;'>‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã</div>"

    # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    cell_selector.observe(on_cell_selected, names="value")
    refresh_list_button.on_click(on_refresh_list)
    clear_button.on_click(on_clear_cell)
    clear_all_button.on_click(on_clear_all)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫
    update_cell_list()

    management_widget = widgets.VBox(
        [
            widgets.HTML("<h4>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —è—á–µ–µ–∫</h4>"),
            widgets.HBox([cell_selector, refresh_list_button]),
            info_area,
            widgets.HBox([clear_button, clear_all_button]),
        ]
    )

    display(management_widget)

    return management_widget


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —è—á–µ–µ–∫"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–• –Ø–ß–ï–ï–ö")
    print("=" * 50)

    tasks = []

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tasks.append(test_basic_math_task())
    print()
    tasks.append(test_list_manipulation())
    print()
    tasks.append(test_function_creation())
    print()
    tasks.append(test_numeric_precision())
    print()
    tasks.append(test_string_processing())
    print()
    tasks.append(test_with_solution())
    print()
    tasks.append(test_complex_logic())
    print()
    tasks.append(test_error_handling())
    print()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    stats_widget = test_statistics_display()
    print()
    management_widget = test_cell_management()

    print("\n" + "=" * 50)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!")
    print("\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á–∏ –≤—ã—à–µ, –≤–≤–æ–¥—è –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã")
    print("2. –ù–∞–∂–∏–º–∞–π—Ç–µ 'üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí° –†–µ—à–µ–Ω–∏–µ' –µ—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏")
    print("4. –°–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–º–∏")
    print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –∏ —Å–∏—Ç—É–∞—Ü–∏–π")

    return {
        "tasks": tasks,
        "stats_widget": stats_widget,
        "management_widget": management_widget,
    }


# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    result = run_all_tests()
