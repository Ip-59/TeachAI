"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.
–†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –í—ã–¥–µ–ª–µ–Ω –∏–∑ assessment_interface.py –¥–ª—è –ª—É—á—à–µ–π –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏ (—á–∞—Å—Ç—å 1/2)
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging


class AssessmentResultsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    def __init__(
        self,
        state_manager,
        assessment,
        system_logger,
        content_generator=None,
        lesson_interface=None,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
            lesson_interface: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞ (–¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫)
        """
        self.state_manager = state_manager
        self.assessment = assessment
        self.system_logger = system_logger
        self.lesson_interface = lesson_interface
        self.logger = logging.getLogger(__name__)

        # –°–æ–∑–¥–∞–µ–º content_generator –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
        if content_generator is None:
            try:
                from content_generator import ContentGenerator
                from config import ConfigManager

                config_manager = ConfigManager()
                config_manager.load_config()
                api_key = config_manager.get_api_key()
                self.content_generator = ContentGenerator(api_key)
            except Exception as e:
                self.logger.error(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ContentGenerator: {str(e)}")
                self.content_generator = None
        else:
            self.content_generator = content_generator

    def handle_test_submission(
        self,
        results_output,
        current_questions,
        current_answers,
        course_plan,
        course_title,
        section_title,
        topic_title,
        lesson_title,
        current_course,
        current_section,
        current_topic,
        current_lesson,
    ):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞.
        """
        with results_output:
            # –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–´–í–û–î–ê –í –ù–ê–ß–ê–õ–ï
            clear_output(wait=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–∞–Ω—ã –æ—Ç–≤–µ—Ç—ã
            unanswered_questions = [
                i + 1 for i, answer in enumerate(current_answers) if answer is None
            ]
            if unanswered_questions:
                display(
                    widgets.HTML(
                        value=f"<p style='color: #856404; background-color: #fff3cd; padding: 10px; border-radius: 5px; margin: 3px 0;'>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã: {', '.join(map(str, unanswered_questions))} –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞.</p>"
                    )
                )
                return

            try:
                # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                score, results, correct_answers = self.assessment.calculate_score(
                    current_questions, current_answers
                )

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ä–æ–∫ –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–∞
                # –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π/–Ω–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π
                lesson_id = f"{current_section}:{current_topic}:{current_lesson}"
                is_test_passed = score > 40  # –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –ø—Ä–∏ >40%

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                self.state_manager.save_lesson_assessment(lesson_id, score, is_test_passed)

                # –ü–æ–ª—É—á–∞–µ–º ID –∫—É—Ä—Å–∞
                course_id = course_plan.get("id", current_course)

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.assessment.log_assessment_results(
                    course=course_id,
                    section=current_section,
                    topic=current_topic,
                    lesson=current_lesson,
                    questions=current_questions,
                    user_answers=current_answers,
                    correct_answers=correct_answers,
                    score=score,
                )

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—á–∏—Å—Ç–æ–∫
                self.display_enhanced_test_results(
                    score,
                    correct_answers,
                    current_questions,
                    current_answers,
                    current_section,
                    current_topic,
                    current_lesson,
                    is_test_passed,
                    lesson_id,
                )

            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                display(
                    widgets.HTML(
                        value=f"<p style='color: #721c24; background-color: #f8d7da; padding: 10px; border-radius: 5px; margin: 3px 0;'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {str(e)}</p>"
                    )
                )

    def display_enhanced_test_results(
        self,
        score,
        correct_answers,
        current_questions,
        current_answers,
        current_section,
        current_topic,
        current_lesson,
        is_passed,
        lesson_id,
    ):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —É—Ä–æ–∫–æ–≤.

        Args:
            score (float): –û—Ü–µ–Ω–∫–∞ –∑–∞ —Ç–µ—Å—Ç
            correct_answers (list): –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            current_questions (list): –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            current_answers (list): –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_section, current_topic, current_lesson (str): ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            is_passed (bool): –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É—Ä–æ–∫
            lesson_id (str): –ü–æ–ª–Ω—ã–π ID —É—Ä–æ–∫–∞
        """
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_widgets = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_widgets.append(widgets.HTML(
            value="<h2 style='margin: 5px 0; font-size: 20px;'>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</h2>"
        ))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–∞ —Ç–µ—Å—Ç
        if score >= 80:
            score_style = (
                "background-color: #d4edda; color: #155724; border: 2px solid #c3e6cb;"
            )
        elif score >= 60:
            score_style = (
                "background-color: #fff3cd; color: #856404; border: 2px solid #ffeaa7;"
            )
        else:
            score_style = (
                "background-color: #f8d7da; color: #721c24; border: 2px solid #f5c6cb;"
            )

        result_widgets.append(widgets.HTML(
            value=f"<div style='text-align: center; padding: 12px; margin: 5px 0; border-radius: 8px; font-size: 24px; font-weight: bold; {score_style}'>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score:.1f}%</div>"
        ))

        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É
        course_stats = self.state_manager.get_detailed_course_statistics()

        result_widgets.append(widgets.HTML(
            value=f"""
            <div style='background-color: #e9ecef; padding: 15px; margin: 10px 0; border-radius: 8px; border: 1px solid #adb5bd;'>
                <h3 style='margin: 0 0 10px 0; color: #495057; font-size: 18px;'>üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É</h3>
                <p style='margin: 5px 0; font-size: 16px;'><strong>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –∫—É—Ä—Å—É:</strong> {course_stats['average_score']:.1f}%</p>
                <p style='margin: 5px 0; font-size: 16px;'><strong>–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:</strong> {course_stats['total_assessments']}</p>
                <p style='margin: 5px 0; font-size: 16px;'><strong>–ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞:</strong> {course_stats['course_progress_percent']:.1f}% ({course_stats['completed_lessons']} –∏–∑ {course_stats['total_lessons']} —É—Ä–æ–∫–æ–≤)</p>
            </div>
            """
        ))

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
        result_widgets.append(widgets.HTML(
            value="<h3 style='margin: 10px 0 5px 0; font-size: 18px;'>–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>"
        ))

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        for i, (question, user_answer, correct_answer) in enumerate(
            zip(current_questions, current_answers, correct_answers)
        ):
            options = question.get("options", ["–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"])

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
            correct_answer_num = correct_answer if isinstance(correct_answer, int) else int(correct_answer)

            result_html = f"""
            <div style="margin: 5px 0; padding: 8px; border: 1px solid #dee2e6; border-radius: 6px; background-color: #ffffff;">
                <div style="font-weight: bold; margin-bottom: 4px; font-size: 16px; color: #212529; line-height: 1.3;">–í–æ–ø—Ä–æ—Å {i+1}: {question['text']}</div>
                <div style="margin-top: 8px; padding: 8px; background-color: #f8f9fa; border-radius: 4px; border-left: 3px solid #007bff;">
                    <strong style="color: #495057;">–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</strong>
                    <div style="margin-top: 4px; color: #212529; line-height: 1.4;">{options[correct_answer_num - 1]}</div>
                </div>
            """

            for j, option in enumerate(options):
                option_num = j + 1
                if option_num == user_answer and option_num == correct_answer_num:
                    result_html += f'<div style="margin: 2px 0; padding: 4px 6px; border-radius: 4px; font-size: 15px; line-height: 1.3; background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb;">{option} ‚úì (–í–∞—à –æ—Ç–≤–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ)</div>'
                elif option_num == user_answer:
                    result_html += f'<div style="margin: 2px 0; padding: 4px 6px; border-radius: 4px; font-size: 15px; line-height: 1.3; background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb;">{option} ‚úó (–í–∞—à –æ—Ç–≤–µ—Ç, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)</div>'
                elif option_num == correct_answer_num:
                    result_html += f'<div style="margin: 2px 0; padding: 4px 6px; border-radius: 4px; font-size: 15px; line-height: 1.3; background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb;">{option} ‚úì (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)</div>'
                else:
                    result_html += f'<div style="margin: 2px 0; padding: 4px 6px; border-radius: 4px; font-size: 15px; line-height: 1.3; background-color: #f8f9fa; color: #495057; border: 1px solid #dee2e6;">{option}</div>'

            result_html += "</div>"
            result_widgets.append(widgets.HTML(value=result_html))

        # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
        if is_passed:  # –û—Ü–µ–Ω–∫–∞ > 40%
            result_widgets.append(widgets.HTML(
                value="<h3 style='margin: 15px 0 10px 0; font-size: 18px; color: #28a745;'>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!</h3>"
            ))

            # –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ
            if is_passed:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"
                self._activate_control_tasks_button()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏
                result_widgets.append(widgets.HTML(
                    value=f"<p style='color: green; font-weight: bold;'>üéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞.</p>"
                ))

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
                control_tasks_button = widgets.Button(
                    description="üõ†Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º",
                    button_style="success",
                    layout=widgets.Layout(width="300px", margin="10px 0"),
                    tooltip="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
                )

                def on_control_tasks_clicked(b):
                    # –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
                    clear_output(wait=True)
                    self._show_control_tasks()

                control_tasks_button.on_click(on_control_tasks_clicked)
                result_widgets.append(control_tasks_button)

        else:
            # –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            result_widgets.append(widgets.HTML(
                value="<h3 style='margin: 15px 0 10px 0; font-size: 18px; color: #dc3545;'>üòî –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω</h3>"
            ))

            result_widgets.append(widgets.HTML(
                value="<p style='color: #721c24; background-color: #f8d7da; padding: 10px; border-radius: 5px; margin: 10px 0;'>–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å –±–æ–ª–µ–µ 40%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å —Ç–µ–∫—É—â–µ–π –æ—Ü–µ–Ω–∫–æ–π.</p>"
            ))

            # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —É—Ä–æ–∫–∞
            repeat_lesson_button = widgets.Button(
                description="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫",
                button_style="warning",
                tooltip="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Ä–æ–∫–∞",
                icon="refresh",
                layout=widgets.Layout(margin="5px 5px 5px 0px"),
            )

            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–π –æ—Ü–µ–Ω–∫–æ–π
            continue_anyway_button = widgets.Button(
                description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–π –æ—Ü–µ–Ω–∫–æ–π",
                button_style="info",
                tooltip="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                icon="arrow-right",
                layout=widgets.Layout(margin="5px 0px 5px 5px"),
            )

            def on_repeat_lesson_clicked(b):
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                self.state_manager.mark_lesson_incomplete(lesson_id)

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ display() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                clear_output(wait=True)
                from lesson_interface import LessonInterface

                lesson_ui = LessonInterface(
                    self.state_manager,
                    self.content_generator,
                    self.system_logger,
                    self.assessment,
                )
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —É—Ä–æ–∫–∞
                lesson_widget = lesson_ui.show_lesson(
                        current_section, current_topic, current_lesson
                )
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                display(lesson_widget)

            def on_continue_anyway_clicked(b):
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                self.state_manager.mark_lesson_complete_manually(lesson_id)

                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"
                self._activate_control_tasks_button()

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
                (
                    next_section_id,
                    next_topic_id,
                    next_lesson_id,
                    next_lesson_data,
                ) = self.state_manager.get_next_lesson()

                clear_output(wait=True)
                if next_section_id and next_topic_id and next_lesson_id:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ display() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    from lesson_interface import LessonInterface

                    lesson_ui = LessonInterface(
                        self.state_manager,
                        self.content_generator,
                        self.system_logger,
                        self.assessment,
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —É—Ä–æ–∫–∞
                    lesson_widget = lesson_ui.show_lesson(
                            next_section_id, next_topic_id, next_lesson_id
                    )
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    display(lesson_widget)
                else:
                    # –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                    from completion_interface import CompletionInterface

                    completion_ui = CompletionInterface(
                        self.state_manager,
                        self.system_logger,
                        self.content_generator,
                        self.assessment,
                    )
                    display(completion_ui.show_course_completion())

            repeat_lesson_button.on_click(on_repeat_lesson_clicked)
            continue_anyway_button.on_click(on_continue_anyway_clicked)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            buttons_container = widgets.HBox([repeat_lesson_button, continue_anyway_button])
            result_widgets.append(buttons_container)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –û–î–ù–ò–ú –≤—ã–∑–æ–≤–æ–º display()
        # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_container = widgets.VBox(result_widgets)
        display(results_container)

    def _activate_control_tasks_button(self):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —É—Ä–æ–∫–∞.
        """
        try:
            if self.lesson_interface and hasattr(self.lesson_interface, "navigation"):
                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ navigation
                navigation = self.lesson_interface.navigation
                if (
                    hasattr(navigation, "control_tasks_button")
                    and navigation.control_tasks_button
                ):
                    navigation.control_tasks_button.disabled = False
                    navigation.control_tasks_button.tooltip = "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                    self.logger.info("–ö–Ω–æ–ø–∫–∞ '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    self.logger.warning(
                        "–ö–Ω–æ–ø–∫–∞ '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ navigation"
                    )
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    if hasattr(navigation, "__dict__"):
                        self.logger.debug(
                            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã navigation: {list(navigation.__dict__.keys())}"
                        )
            else:
                self.logger.warning("lesson_interface –∏–ª–∏ navigation –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                if self.lesson_interface:
                    self.logger.debug(
                        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã lesson_interface: {list(self.lesson_interface.__dict__.keys())}"
                    )
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {str(e)}"
            )
            import traceback

            self.logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")

    def _show_control_tasks(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        try:
            if self.lesson_interface and hasattr(
                self.lesson_interface, "control_tasks_interface"
            ):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                task_interface = (
                    self.lesson_interface.control_tasks_interface.show_control_task(
                        lesson_data=self.lesson_interface.current_lesson_data,
                        lesson_content=self.lesson_interface.current_lesson_content,
                    )
                )
                display(task_interface)
            else:
                display(
                    widgets.HTML(
                        value="<p style='color: red;'>–û—à–∏–±–∫–∞: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>"
                    )
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {str(e)}")
            display(
                widgets.HTML(
                    value=f"<p style='color: red;'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {str(e)}</p>"
                )
            )
