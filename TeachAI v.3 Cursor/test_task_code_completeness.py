#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã task_code
"""

import re

def test_task_code_completeness():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ—Ç—É task_code"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ª—É—á–∞–π - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã",
            "description": "–î–∞–Ω —Å–ø–∏—Å–æ–∫ my_list = [1, 2, 3, 'apple', 'banana'] –∏ —Å–ª–æ–≤–∞—Ä—å my_dict = {'a': 'apple', 'b': 'banana', 'c': 'cherry'}. –î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç 'orange' –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.",
            "task_code": "my_list = [1, 2, 3, 'apple', 'banana']\nmy_dict = {'a': 'apple', 'b': 'banana', 'c': 'cherry'}\n# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å",
            "expected": "‚úÖ –ü–æ–ª–Ω—ã–π"
        },
        {
            "name": "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ task_code",
            "description": "–î–∞–Ω —Å–ø–∏—Å–æ–∫ my_list = [1, 2, 3, 'apple', 'banana'] –∏ —Å–ª–æ–≤–∞—Ä—å my_dict = {'a': 'apple', 'b': 'banana', 'c': 'cherry'}. –î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç 'orange' –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.",
            "task_code": "# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n# –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ —Å–ª–æ–≤–∞—Ä—å",
            "expected": "‚ùå –ù–µ–ø–æ–ª–Ω—ã–π"
        },
        {
            "name": "–ß–∞—Å—Ç–∏—á–Ω–æ –Ω–µ–ø–æ–ª–Ω—ã–π - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å",
            "description": "–î–∞–Ω —Å–ø–∏—Å–æ–∫ my_list = [1, 2, 3, 'apple', 'banana'] –∏ —Å–ª–æ–≤–∞—Ä—å my_dict = {'a': 'apple', 'b': 'banana', 'c': 'cherry'}. –î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç 'orange' –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.",
            "task_code": "my_list = [1, 2, 3, 'apple', 'banana']\n# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å",
            "expected": "‚ùå –ù–µ–ø–æ–ª–Ω—ã–π"
        }
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–¢–´ TASK_CODE")
    print("=" * 60)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case['name']}")
        print("-" * 40)
        
        description = test_case["description"]
        task_code = test_case["task_code"]
        
        print(f"Description: {description}")
        print(f"Task_code: {task_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É
        missing_data = check_task_code_completeness(description, task_code)
        
        if missing_data:
            print(f"‚ùå –ù–ï–ü–û–õ–ù–´–ô TASK_CODE:")
            for item in missing_data:
                print(f"   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {item}")
            print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        else:
            print(f"‚úÖ –ü–û–õ–ù–´–ô TASK_CODE")
            print(f"   ‚úÖ –í—Å–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã")
        
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_case['expected']}")
    
    print("\n" + "=" * 60)
    print("üìä –í–´–í–û–î–´:")
    print("1. task_code –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –í–°–ï –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ description")
    print("2. –ï—Å–ª–∏ –≤ description —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è '—Å–ø–∏—Å–æ–∫ my_list = [1, 2, 3]'")
    print("   —Ç–æ –≤ task_code –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'my_list = [1, 2, 3]'")
    print("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ control_tasks_generator.py")

def check_task_code_completeness(description, task_code):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É task_code"""
    missing_data = []
    
    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∏ —Å–ª–æ–≤–∞—Ä–µ–π –≤ description
    list_patterns = [
        r"—Å–ø–∏—Å–æ–∫\s+(\w+)\s*=\s*\[([^\]]+)\]",
        r"(\w+)\s*=\s*\[([^\]]+)\].*—Å–ø–∏—Å–æ–∫",
        r"—Å–ø–∏—Å–æ–∫\s+(\w+).*=\s*\[([^\]]+)\]"
    ]
    
    dict_patterns = [
        r"—Å–ª–æ–≤–∞—Ä—å\s+(\w+)\s*=\s*\{([^}]+)\}",
        r"(\w+)\s*=\s*\{([^}]+)\}.*—Å–ª–æ–≤–∞—Ä—å",
        r"—Å–ª–æ–≤–∞—Ä—å\s+(\w+).*=\s*\{([^}]+)\}"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∫–∏
    for pattern in list_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for var_name, var_content in matches:
            if f"{var_name} = [" not in task_code:
                missing_data.append(f"–°–ø–∏—Å–æ–∫ {var_name} = [{var_content}]")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä–∏
    for pattern in dict_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for var_name, var_content in matches:
            if f"{var_name} = {{" not in task_code:
                missing_data.append(f"–°–ª–æ–≤–∞—Ä—å {var_name} = {{{var_content}}}")
    
    return missing_data

if __name__ == "__main__":
    test_task_code_completeness()