"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ TeachAI.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è, –≤—Ä–µ–º–µ–Ω–∏, –æ—Ü–µ–Ω–∫–∞—Ö –∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞—Ö.
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Tuple
from IPython.display import display, HTML
import ipywidgets as widgets
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º InterfaceState –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
from interface import InterfaceState

class StartupDashboard:
    """–î–∞—à–±–æ—Ä–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self, state_manager, content_generator=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞.
        
        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏)
        """
        self.state_manager = state_manager
        self.content_generator = content_generator
        self.logger = logging.getLogger(__name__)
        
    def show_dashboard(self) -> widgets.Widget:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ–±—É—á–µ–Ω–∏—è.
        
        Returns:
            widgets.Widget: –í–∏–¥–∂–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        """
        try:
            self.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            dashboard_data = self._collect_dashboard_data()
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            dashboard_content = self._create_dashboard_widget(dashboard_data)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
            continue_button = widgets.Button(
                description="üéØ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
                button_style='success',
                layout=widgets.Layout(
                    width='auto',
                    height='40px',
                    margin='20px 0 0 0'
                )
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            self.continue_button = continue_button
            self.logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ' —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {type(continue_button)}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–∞—à–±–æ—Ä–¥–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
            dashboard_widget = widgets.VBox(
                [dashboard_content, continue_button],
                layout=widgets.Layout(
                    width='100%',
                    padding='20px',
                    border='2px solid #ecf0f1',
                    margin='10px 0'
                )
            )
            
            self.logger.info("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return dashboard_widget
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")
            return self._create_error_widget(str(e))
    
    def setup_continue_button_handler(self, engine, display_callback):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ".
        
        Args:
            engine: –≠–∫–∑–µ–º–ø–ª—è—Ä TeachAIEngine
            display_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        def on_continue_click(b):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."""
            try:
                self.logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'")
                
                # –û—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                from IPython.display import clear_output
                clear_output(wait=True)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                if self.content_generator and hasattr(self.content_generator, 'loading_manager') and self.content_generator.loading_manager:
                    loading_indicator = self.content_generator.loading_manager.show_loading(
                        "default", message="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é –æ–±—É—á–µ–Ω–∏—è..."
                    )
                    if display_callback:
                        display_callback(loading_indicator)
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    loading_indicator = self.show_loading_indicator("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é –æ–±—É—á–µ–Ω–∏—è...")
                    if display_callback:
                        display_callback(loading_indicator)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                next_interface = self.get_next_lesson_interface(engine)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if display_callback:
                    display_callback(next_interface)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É: {str(e)}")
                import traceback
                self.logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                error_widget = self._create_error_widget(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: {str(e)}")
                if display_callback:
                    display_callback(error_widget)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ
        if hasattr(self, 'continue_button') and self.continue_button:
            self.continue_button.on_click(on_continue_click)
            self.logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ' –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            self.logger.warning("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            if hasattr(self, '__dict__'):
                for attr_name, attr_value in self.__dict__.items():
                    if hasattr(attr_value, 'description') and '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ' in str(attr_value.description):
                        self.logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ: {attr_name}")
                        attr_value.on_click(on_continue_click)
                        self.logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
                        break
    
    def get_next_lesson_interface(self, engine):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –¥–∞—à–±–æ—Ä–¥–∞.
        
        Args:
            engine: –≠–∫–∑–µ–º–ø–ª—è—Ä TeachAIEngine –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            
        Returns:
            widgets.Widget: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞ –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
        """
        try:
            self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Ä–æ–∫–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ engine.interface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not engine.interface:
                self.logger.error("engine.interface –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return self._create_error_widget("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫
            current_lesson_info = engine._check_current_lesson_status()
            self.logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ: {current_lesson_info}")
            
            if current_lesson_info:
                # –ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
                section_id, topic_id, lesson_id = current_lesson_info
                self.logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É —É—Ä–æ–∫—É: {section_id}:{topic_id}:{lesson_id}")
                
                engine.interface.current_state = InterfaceState.LESSON_VIEW
                lesson_widget = engine.interface.show_lesson(section_id, topic_id, lesson_id)
                self.logger.info("–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                return lesson_widget
            else:
                # –ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
                self.logger.info("–ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞")
                engine.interface.current_state = InterfaceState.COURSE_SELECTION
                course_selection_widget = engine.interface.show_course_selection()
                self.logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
                return course_selection_widget
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É: {str(e)}")
            import traceback
            self.logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return self._create_error_widget(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: {str(e)}")
    
    def _collect_dashboard_data(self) -> Dict[str, Any]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞.
        
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            state = self.state_manager.state
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
            course_info = self._get_course_info()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_stats = self._get_progress_statistics()
            
            # –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
            time_stats = self._get_time_statistics()
            
            # –û—Ü–µ–Ω–∫–∏ –∏ —Ç–µ—Å—Ç—ã
            assessment_stats = self._get_assessment_statistics()
            
            # –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
            incomplete_lessons = self._get_incomplete_lessons()
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            control_tasks_stats = self._get_control_tasks_statistics()
            
            return {
                "course_info": course_info,
                "progress_stats": progress_stats,
                "time_stats": time_stats,
                "assessment_stats": assessment_stats,
                "incomplete_lessons": incomplete_lessons,
                "control_tasks_stats": control_tasks_stats
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")
            return {"error": str(e)}
    
    def _get_course_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ."""
        try:
            state = self.state_manager.state
            course_plan = state.get("course_plan", {})
            
            return {
                "title": course_plan.get("title", "–ö—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω"),
                "description": course_plan.get("description", ""),
                "total_duration": course_plan.get("total_duration_minutes", 0),
                "sections_count": len(course_plan.get("sections", [])),
                "current_course": state.get("learning", {}).get("current_course", "")
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ: {str(e)}")
            return {"title": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "description": ""}
    
    def _get_progress_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è."""
        try:
            state = self.state_manager.state
            learning = state.get("learning", {})
            
            completed_lessons = learning.get("completed_lessons", [])
            course_plan = state.get("course_plan", {})
            sections = course_plan.get("sections", [])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
            total_lessons = 0
            for section in sections:
                for topic in section.get("topics", []):
                    total_lessons += len(topic.get("lessons", []))
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            progress_percent = learning.get("course_progress_percent", 0)
            if total_lessons > 0:
                progress_percent = (len(completed_lessons) / total_lessons) * 100
            
            return {
                "completed_lessons_count": len(completed_lessons),
                "total_lessons_count": total_lessons,
                "progress_percent": round(progress_percent, 1),
                "current_lesson": learning.get("current_lesson", ""),
                "current_section": learning.get("current_section", ""),
                "current_topic": learning.get("current_topic", "")
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")
            return {"progress_percent": 0, "completed_lessons_count": 0}
    
    def _get_time_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è."""
        try:
            state = self.state_manager.state
            system = state.get("system", {})
            
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            last_access_str = system.get("last_access", "")
            if last_access_str:
                try:
                    last_access = datetime.fromisoformat(last_access_str)
                    time_since_last = datetime.now() - last_access
                    days_since_last = time_since_last.days
                except:
                    days_since_last = 0
            else:
                days_since_last = 0
            
            # –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
            user_profile = state.get("user", {})
            lesson_duration = user_profile.get("lesson_duration_minutes", 30)
            completed_lessons = state.get("learning", {}).get("completed_lessons", [])
            
            estimated_total_time = len(completed_lessons) * lesson_duration
            
            return {
                "days_since_last_access": days_since_last,
                "estimated_total_time_minutes": estimated_total_time,
                "lesson_duration_minutes": lesson_duration,
                "last_access": last_access_str
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
            return {"days_since_last_access": 0, "estimated_total_time_minutes": 0}
    
    def _get_assessment_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫."""
        try:
            state = self.state_manager.state
            learning = state.get("learning", {})
            
            lesson_scores = learning.get("lesson_scores", {})
            lesson_attempts = learning.get("lesson_attempts", {})
            
            # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
            average_score = learning.get("average_score", 0)
            if lesson_scores:
                scores = list(lesson_scores.values())
                average_score = sum(scores) / len(scores)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            passed_tests = sum(1 for score in lesson_scores.values() if score >= 70)
            total_tests = len(lesson_scores)
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            total_attempts = sum(len(attempts) for attempts in lesson_attempts.values())
            
            return {
                "average_score": round(average_score, 1),
                "passed_tests_count": passed_tests,
                "total_tests_count": total_tests,
                "total_attempts_count": total_attempts,
                "best_score": max(lesson_scores.values()) if lesson_scores else 0,
                "worst_score": min(lesson_scores.values()) if lesson_scores else 0
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤: {str(e)}")
            return {"average_score": 0, "passed_tests_count": 0}
    
    def _get_incomplete_lessons(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤."""
        try:
            state = self.state_manager.state
            learning = state.get("learning", {})
            course_plan = state.get("course_plan", {})
            
            incomplete_lessons = []
            lesson_completion_status = learning.get("lesson_completion_status", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –≤ –ø–ª–∞–Ω–µ –∫—É—Ä—Å–∞
            for section in course_plan.get("sections", []):
                for topic in section.get("topics", []):
                    for lesson in topic.get("lessons", []):
                        lesson_id = f"{section['id']}:{topic['id']}:{lesson['id']}"
                        
                        # –ï—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º
                        if not lesson_completion_status.get(lesson_id, False):
                            incomplete_lessons.append({
                                "lesson_id": lesson_id,
                                "title": lesson.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                                "section": section.get("title", ""),
                                "topic": topic.get("title", ""),
                                "has_attempts": lesson_id in learning.get("lesson_attempts", {})
                            })
            
            return incomplete_lessons
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: {str(e)}")
            return []
    
    def _get_control_tasks_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""
        try:
            state = self.state_manager.state
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è state
            control_tasks = state.get("control_tasks", {})
            
            completed_tasks = 0
            failed_tasks = 0
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: control_tasks —Å–æ–¥–µ—Ä–∂–∏—Ç dict –¥–ª—è –∫–∞–∂–¥–æ–≥–æ lesson_id
            for lesson_id, task_result in control_tasks.items():
                if isinstance(task_result, dict):
                    if task_result.get("is_correct", False):
                        completed_tasks += 1
                    else:
                        failed_tasks += 1
            
            total_tasks = completed_tasks + failed_tasks
            
            return {
                "completed_tasks_count": completed_tasks,
                "failed_tasks_count": failed_tasks,
                "total_tasks_count": total_tasks,
                "success_rate": round((completed_tasks / total_tasks * 100), 1) if total_tasks > 0 else 0
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {str(e)}")
            return {"completed_tasks_count": 0, "total_tasks_count": 0, "success_rate": 0}
    
    def _create_dashboard_widget(self, data: Dict[str, Any]) -> widgets.Widget:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–∞—à–±–æ—Ä–¥–∞.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            widgets.Widget: –í–∏–¥–∂–µ—Ç –¥–∞—à–±–æ—Ä–¥–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = widgets.HTML(
                value="<h2 style='color: #2c3e50; text-align: center; margin-bottom: 20px;'>üìä –î–∞—à–±–æ—Ä–¥ –æ–±—É—á–µ–Ω–∏—è TeachAI</h2>",
                layout=widgets.Layout(margin='0 0 20px 0')
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
            sections = []
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
            if "course_info" in data:
                course_section = self._create_course_section(data["course_info"])
                sections.append(course_section)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            if "progress_stats" in data:
                progress_section = self._create_progress_section(data["progress_stats"])
                sections.append(progress_section)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            if "time_stats" in data:
                time_section = self._create_time_section(data["time_stats"])
                sections.append(time_section)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
            if "assessment_stats" in data:
                assessment_section = self._create_assessment_section(data["assessment_stats"])
                sections.append(assessment_section)
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            if "control_tasks_stats" in data:
                control_tasks_section = self._create_control_tasks_section(data["control_tasks_stats"])
                sections.append(control_tasks_section)
            
            # –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
            if "incomplete_lessons" in data and data["incomplete_lessons"]:
                incomplete_section = self._create_incomplete_lessons_section(data["incomplete_lessons"])
                sections.append(incomplete_section)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
            dashboard_content = [header] + sections
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            dashboard_widget = widgets.VBox(
                dashboard_content,
                layout=widgets.Layout(
                    width='100%',
                    padding='20px',
                    border='2px solid #ecf0f1',
                    margin='10px 0'
                )
            )
            
            return dashboard_widget
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")
            return self._create_error_widget(str(e))
    
    def _create_course_section(self, course_info: Dict[str, Any]) -> widgets.Widget:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–µ."""
        course_title = course_info.get("title", "–ö—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        course_description = course_info.get("description", "")
        total_duration = course_info.get("total_duration", 0)
        
        html_content = f"""
        <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px; border-radius: 10px; margin: 10px 0;'>
            <h3 style='margin: 0 0 10px 0;'>üìö {course_title}</h3>
            <p style='margin: 5px 0; opacity: 0.9;'>{course_description}</p>
            <p style='margin: 5px 0; font-size: 0.9em; opacity: 0.8;'>
                ‚è±Ô∏è –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration} –º–∏–Ω—É—Ç
            </p>
        </div>
        """
        
        return widgets.HTML(value=html_content)
    
    def _create_progress_section(self, progress_stats: Dict[str, Any]) -> widgets.Widget:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –æ–±—É—á–µ–Ω–∏—è."""
        completed = progress_stats.get("completed_lessons_count", 0)
        total = progress_stats.get("total_lessons_count", 0)
        progress_percent = progress_stats.get("progress_percent", 0)
        current_lesson = progress_stats.get("current_lesson", "")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar_width = min(progress_percent, 100)
        progress_bar_color = "#27ae60" if progress_percent >= 70 else "#f39c12" if progress_percent >= 40 else "#e74c3c"
        
        html_content = f"""
        <div style='background: #f8f9fa; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid {progress_bar_color};'>
            <h4 style='margin: 0 0 15px 0; color: #2c3e50;'>üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è</h4>
            <div style='margin: 10px 0;'>
                <div style='background: #ecf0f1; height: 20px; border-radius: 10px; overflow: hidden;'>
                    <div style='background: {progress_bar_color}; height: 100%; width: {progress_bar_width}%; transition: width 0.3s ease;'></div>
                </div>
                <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                    {completed} –∏–∑ {total} —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({progress_percent}%)
                </p>
            </div>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {self._get_current_lesson_display_name(progress_stats)}
            </p>
        </div>
        """
        
        return widgets.HTML(value=html_content)
    
    def _create_time_section(self, time_stats: Dict[str, Any]) -> widgets.Widget:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏."""
        days_since_last = time_stats.get("days_since_last_access", 0)
        estimated_time = time_stats.get("estimated_total_time_minutes", 0)
        lesson_duration = time_stats.get("lesson_duration_minutes", 30)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        hours = estimated_time // 60
        minutes = estimated_time % 60
        time_str = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if days_since_last == 0:
            last_access_color = "#27ae60"
            last_access_text = "–°–µ–≥–æ–¥–Ω—è"
        elif days_since_last == 1:
            last_access_color = "#f39c12"
            last_access_text = "–í—á–µ—Ä–∞"
        else:
            last_access_color = "#e74c3c"
            last_access_text = f"{days_since_last} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
        
        html_content = f"""
        <div style='background: #f8f9fa; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid {last_access_color};'>
            <h4 style='margin: 0 0 15px 0; color: #2c3e50;'>‚è∞ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è</h4>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                üïê –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: <strong>{time_str}</strong>
            </p>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø: <strong style='color: {last_access_color};'>{last_access_text}</strong>
            </p>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è: {lesson_duration} –º–∏–Ω—É—Ç
            </p>
        </div>
        """
        
        return widgets.HTML(value=html_content)
    
    def _create_assessment_section(self, assessment_stats: Dict[str, Any]) -> widgets.Widget:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç–µ—Å—Ç–æ–≤."""
        average_score = assessment_stats.get("average_score", 0)
        passed_tests = assessment_stats.get("passed_tests_count", 0)
        total_tests = assessment_stats.get("total_tests_count", 0)
        total_attempts = assessment_stats.get("total_attempts_count", 0)
        best_score = assessment_stats.get("best_score", 0)
        worst_score = assessment_stats.get("worst_score", 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
        if average_score >= 80:
            score_color = "#27ae60"
        elif average_score >= 60:
            score_color = "#f39c12"
        else:
            score_color = "#e74c3c"
        
        html_content = f"""
        <div style='background: #f8f9fa; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid {score_color};'>
            <h4 style='margin: 0 0 15px 0; color: #2c3e50;'>üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h4>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <strong style='color: {score_color};'>{average_score}%</strong>
            </p>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed_tests} –∏–∑ {total_tests} —Ç–µ—Å—Ç–æ–≤
            </p>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                üîÑ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts}
            </p>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score}% | –•—É–¥—à–∏–π: {worst_score}%
            </p>
        </div>
        """
        
        return widgets.HTML(value=html_content)
    
    def _create_control_tasks_section(self, control_tasks_stats: Dict[str, Any]) -> widgets.Widget:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""
        completed_tasks = control_tasks_stats.get("completed_tasks_count", 0)
        total_tasks = control_tasks_stats.get("total_tasks_count", 0)
        success_rate = control_tasks_stats.get("success_rate", 0)
        
        if total_tasks == 0:
            html_content = """
            <div style='background: #f8f9fa; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid #95a5a6;'>
                <h4 style='margin: 0 0 15px 0; color: #2c3e50;'>üíª –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h4>
                <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                    üìù –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
                </p>
                <p style='margin: 5px 0; font-size: 0.8em; color: #95a5a6;'>
                    ‚ÑπÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ —É—Ä–æ–∫—É
                </p>
            </div>
            """
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            if success_rate >= 80:
                success_color = "#27ae60"
            elif success_rate >= 60:
                success_color = "#f39c12"
            else:
                success_color = "#e74c3c"
            
            html_content = f"""
            <div style='background: #f8f9fa; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid {success_color};'>
                <h4 style='margin: 0 0 15px 0; color: #2c3e50;'>üíª –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h4>
                <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                    ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks} –∏–∑ {total_tasks} –∑–∞–¥–∞–Ω–∏–π
                </p>
                <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                    üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <strong style='color: {success_color};'>{success_rate}%</strong>
                </p>
            </div>
            """
        
        return widgets.HTML(value=html_content)
    
    def _create_incomplete_lessons_section(self, incomplete_lessons: List[Dict[str, Any]]) -> widgets.Widget:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏."""
        lessons_html = ""
        for lesson in incomplete_lessons[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            lesson_title = lesson.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            section_title = lesson.get("section", "")
            topic_title = lesson.get("topic", "")
            has_attempts = lesson.get("has_attempts", False)
            
            status_icon = "üîÑ" if has_attempts else "‚è≥"
            status_text = "–ï—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏" if has_attempts else "–ù–µ –Ω–∞—á–∞—Ç"
            
            lessons_html += f"""
            <div style='background: #fff; padding: 8px; margin: 5px 0; border-radius: 5px; border-left: 3px solid #e74c3c;'>
                <p style='margin: 2px 0; font-size: 0.9em; color: #2c3e50;'>
                    <strong>{lesson_title}</strong>
                </p>
                <p style='margin: 2px 0; font-size: 0.8em; color: #7f8c8d;'>
                    {section_title} ‚Üí {topic_title}
                </p>
                <p style='margin: 2px 0; font-size: 0.8em; color: #7f8c8d;'>
                    {status_icon} {status_text}
                </p>
            </div>
            """
        
        if len(incomplete_lessons) > 5:
            lessons_html += f"""
            <div style='background: #fff; padding: 8px; margin: 5px 0; border-radius: 5px; border-left: 3px solid #95a5a6;'>
                <p style='margin: 2px 0; font-size: 0.8em; color: #7f8c8d; text-align: center;'>
                    ... –∏ –µ—â–µ {len(incomplete_lessons) - 5} —É—Ä–æ–∫–æ–≤
                </p>
            </div>
            """
        
        html_content = f"""
        <div style='background: #f8f9fa; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid #e74c3c;'>
            <h4 style='margin: 0 0 15px 0; color: #2c3e50;'>‚ö†Ô∏è –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ ({len(incomplete_lessons)})</h4>
            {lessons_html}
        </div>
        """
        
        return widgets.HTML(value=html_content)
    
    def _create_error_widget(self, error_message: str) -> widgets.Widget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ."""
        html_content = f"""
        <div style='background: #fee; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid #e74c3c;'>
            <h4 style='margin: 0 0 15px 0; color: #c0392b;'>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞</h4>
            <p style='margin: 5px 0; font-size: 0.9em; color: #7f8c8d;'>
                {error_message}
            </p>
        </div>
        """
        
        return widgets.HTML(value=html_content)
    
    def _get_current_lesson_display_name(self, progress_stats: Dict[str, Any]) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞.
        
        Args:
            progress_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –∏–ª–∏ "–ù–µ –≤—ã–±—Ä–∞–Ω"
        """
        try:
            current_lesson = progress_stats.get("current_lesson", "")
            current_section = progress_stats.get("current_section", "")
            current_topic = progress_stats.get("current_topic", "")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if current_section and current_topic and current_lesson:
                course_plan = self.state_manager.state.get("course_plan", {})
                
                # –ò—â–µ–º —É—Ä–æ–∫ –≤ –ø–ª–∞–Ω–µ –∫—É—Ä—Å–∞
                for section in course_plan.get("sections", []):
                    if section.get("id") == current_section:
                        for topic in section.get("topics", []):
                            if topic.get("id") == current_topic:
                                for lesson in topic.get("lessons", []):
                                    if lesson.get("id") == current_lesson:
                                        return lesson.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –∏–∑ –ø–ª–∞–Ω–∞
            course_plan = self.state_manager.state.get("course_plan", {})
            if course_plan.get("sections"):
                first_section = course_plan["sections"][0]
                if first_section.get("topics"):
                    first_topic = first_section["topics"][0]
                    if first_topic.get("lessons"):
                        first_lesson = first_topic["lessons"][0]
                        return first_lesson.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            
            return "–ù–µ –≤—ã–±—Ä–∞–Ω"
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞: {str(e)}")
            return "–ù–µ –≤—ã–±—Ä–∞–Ω"

    def show_loading_indicator(self, message: str = "–ó–∞–≥—Ä—É–∑–∫–∞...") -> widgets.Widget:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            widgets.Widget: –í–∏–¥–∂–µ—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        """
        html_content = f"""
        <div style='background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 10px 0; text-align: center;'>
            <div style='display: inline-block; width: 40px; height: 40px; border: 4px solid #ecf0f1; border-top: 4px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;'></div>
            <p style='margin: 10px 0 0 0; color: #7f8c8d; font-size: 0.9em;'>{message}</p>
            <style>
                @keyframes spin {{
                    0% {{ transform: rotate(0deg); }}
                    100% {{ transform: rotate(360deg); }}
                }}
            </style>
        </div>
        """
        
        return widgets.HTML(value=html_content) 