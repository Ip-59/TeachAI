"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—Ä–æ–∫–æ–≤.
–í—ã–Ω–µ—Å–µ–Ω—ã –∏–∑ lesson_interface.py –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏.
"""

import ipywidgets as widgets
import logging
from lesson_utils import LessonUtils


class LessonInteraction:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—Ä–æ–∫–æ–≤."""

    def __init__(self, lesson_interface):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.

        Args:
            lesson_interface: –≠–∫–∑–µ–º–ø–ª—è—Ä LessonInterface
        """
        self.lesson_interface = lesson_interface
        self.logger = logging.getLogger(__name__)
        self.utils = LessonUtils()

    def show_explanation_choice(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_html = widgets.HTML(value="<h3>üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:</h3>")

            # –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
            full_explanation_button = widgets.Button(
                description="üìñ –ü–æ–ª–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–∞",
                button_style="primary",
                layout=widgets.Layout(width="auto", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è"
            concepts_button = widgets.Button(
                description="üîë –ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è",
                button_style="info",
                layout=widgets.Layout(width="auto", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            back_button = widgets.Button(
                description="‚Üê –ù–∞–∑–∞–¥",
                button_style="warning",
                layout=widgets.Layout(width="auto", margin="5px"),
            )

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            def on_full_explanation_clicked(b):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
                    course_info = self.lesson_interface.current_course_info
                    course_title = course_info.get("course_title", "–ö—É—Ä—Å")
                    section_title = course_info.get("section_title", "–†–∞–∑–¥–µ–ª")
                    topic_title = course_info.get("topic_title", "–¢–µ–º–∞")
                    lesson_title = course_info.get("lesson_title", "–£—Ä–æ–∫")

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                    explanation = self.lesson_interface.content_generator.get_detailed_explanation(
                        course=course_title,
                        section=section_title,
                        topic=topic_title,
                        lesson=lesson_title,
                        lesson_content=self.lesson_interface.current_lesson_content,
                        communication_style=self.lesson_interface.current_course_info[
                            "user_profile"
                        ]["communication_style"],
                    )

                    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
                    explanation_html = widgets.HTML(value=explanation)

                    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                    close_button = widgets.Button(
                        description="‚úï –ó–∞–∫—Ä—ã—Ç—å",
                        button_style="danger",
                        layout=widgets.Layout(width="auto", margin="10px 0"),
                    )

                    def on_close_clicked(b):
                        self.lesson_interface.explain_container.layout.display = "none"

                    close_button.on_click(on_close_clicked)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    self.lesson_interface.explain_container.children = [
                        explanation_html,
                        close_button,
                    ]

                except Exception as e:
                    self.logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}"
                    )
                    error_html = widgets.HTML(
                        value=f"<p style='color: red;'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}</p>"
                    )
                    self.lesson_interface.explain_container.children = [error_html]

            def on_concepts_explanation_clicked(b):
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è
                    concepts = self.lesson_interface.content_generator.generate_concepts(
                        lesson_content=self.lesson_interface.current_lesson_content,
                        communication_style=self.lesson_interface.current_course_info[
                            "user_profile"
                        ]["communication_style"],
                    )

                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—è—Ç–∏–π
                    concepts_list = []
                    for concept_data in concepts:
                        concept_button = widgets.Button(
                            description=f"üîë {concept_data['title']}",
                            button_style="info",
                            layout=widgets.Layout(width="auto", margin="2px"),
                        )

                        def create_concept_handler(concept_data):
                            def handle_concept_click(b):
                                self.show_concept_explanation(concept_data)

                            return handle_concept_click

                        concept_button.on_click(create_concept_handler(concept_data))
                        concepts_list.append(concept_button)

                    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                    back_to_choice_button = widgets.Button(
                        description="‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É",
                        button_style="warning",
                        layout=widgets.Layout(width="auto", margin="10px 0"),
                    )

                    def on_back_clicked(b):
                        self.show_explanation_choice()

                    back_to_choice_button.on_click(on_back_clicked)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    self.lesson_interface.explain_container.children = [
                        widgets.HTML(value="<h3>üîë –ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è:</h3>"),
                        widgets.VBox(concepts_list),
                        back_to_choice_button,
                    ]

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–∏–π: {str(e)}")
                    error_html = widgets.HTML(
                        value=f"<p style='color: red;'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–Ω—è—Ç–∏–π: {str(e)}</p>"
                    )
                    self.lesson_interface.explain_container.children = [error_html]

            def on_back_clicked(b):
                self.lesson_interface.explain_container.layout.display = "none"

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            full_explanation_button.on_click(on_full_explanation_clicked)
            concepts_button.on_click(on_concepts_explanation_clicked)
            back_button.on_click(on_back_clicked)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            choice_container = widgets.VBox(
                [title_html, full_explanation_button, concepts_button, back_button],
                layout=widgets.Layout(
                    width="100%",
                    padding="20px",
                    border="1px solid #ddd",
                    border_radius="10px",
                ),
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.lesson_interface.explain_container.children = [choice_container]
            self.lesson_interface.explain_container.layout.display = "block"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}")

    def show_concept_explanation(self, concept):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è.

        Args:
            concept (dict): –î–∞–Ω–Ω—ã–µ –æ –ø–æ–Ω—è—Ç–∏–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_html = widgets.HTML(value=f"<h3>üîë {concept['title']}</h3>")

            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–Ω—è—Ç–∏—è
            description_html = widgets.HTML(value=f"<p>{concept['description']}</p>")

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –ø–æ–Ω—è—Ç–∏—è–º"
            back_button = widgets.Button(
                description="‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ–Ω—è—Ç–∏—è–º",
                button_style="warning",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )

            def on_back_clicked(b):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–Ω—è—Ç–∏–π
                try:
                    concepts = self.lesson_interface.content_generator.generate_concepts(
                        lesson_content=self.lesson_interface.current_lesson_content,
                        communication_style=self.lesson_interface.current_course_info[
                            "user_profile"
                        ]["communication_style"],
                    )

                    concepts_list = []
                    for concept_data in concepts:
                        concept_button = widgets.Button(
                            description=f"üîë {concept_data['title']}",
                            button_style="info",
                            layout=widgets.Layout(width="auto", margin="2px"),
                        )

                        def create_concept_handler(concept_data):
                            def handle_concept_click(b):
                                self.show_concept_explanation(concept_data)

                            return handle_concept_click

                        concept_button.on_click(create_concept_handler(concept_data))
                        concepts_list.append(concept_button)

                    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"
                    back_to_choice_button = widgets.Button(
                        description="‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É",
                        button_style="warning",
                        layout=widgets.Layout(width="auto", margin="10px 0"),
                    )

                    def on_back_to_choice_clicked(b):
                        self.show_explanation_choice()

                    back_to_choice_button.on_click(on_back_to_choice_clicked)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    self.lesson_interface.explain_container.children = [
                        widgets.HTML(value="<h3>üîë –ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è:</h3>"),
                        widgets.VBox(concepts_list),
                        back_to_choice_button,
                    ]

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–æ–Ω—è—Ç–∏—è–º: {str(e)}")

            back_button.on_click(on_back_clicked)

            # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
            close_button = widgets.Button(
                description="‚úï –ó–∞–∫—Ä—ã—Ç—å",
                button_style="danger",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )

            def on_close_clicked(b):
                self.lesson_interface.explain_container.layout.display = "none"

            close_button.on_click(on_close_clicked)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            concept_container = widgets.VBox(
                [title_html, description_html, back_button, close_button],
                layout=widgets.Layout(
                    width="100%",
                    padding="20px",
                    border="1px solid #ddd",
                    border_radius="10px",
                ),
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.lesson_interface.explain_container.children = [concept_container]

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–Ω—è—Ç–∏—è: {str(e)}")

    def setup_enhanced_qa_container(self, qa_container):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.

        Args:
            qa_container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
        """
        try:
            self.logger.info("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π QA –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
            self.logger.info(f"qa_container: {qa_container}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_html = widgets.HTML(value="<h3>‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ä–æ–∫—É:</h3>")

            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
            question_input = widgets.Textarea(
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å...",
                layout=widgets.Layout(width="100%", height="100px"),
            )

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
            send_button = widgets.Button(
                description="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                button_style="success",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )

            # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            answer_area = widgets.HTML(
                value="<p>–û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.</p>",
                layout=widgets.Layout(
                    width="100%", padding="10px", border="1px solid #ddd"
                ),
            )

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button = widgets.Button(
                description="‚úï –ó–∞–∫—Ä—ã—Ç—å",
                button_style="danger",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )

            self.logger.info("–í–∏–¥–∂–µ—Ç—ã QA –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã")

            def on_send_question_button_clicked(b):
                self.logger.info("–ö–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å' –Ω–∞–∂–∞—Ç–∞")
                try:
                    question = question_input.value.strip()
                    if not question:
                        self.logger.warning("–í–æ–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π")
                        answer_area.value = (
                            "<p style='color: orange;'>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.</p>"
                        )
                        return

                    self.logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å: {question[:50]}...")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                    answer_area.value = (
                        "<p><strong>–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞...</strong></p>"
                    )

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤
                    course_info = self.lesson_interface.current_course_info

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Ä–æ–∫–∞ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞
                    lesson_full_id = f"{course_info.get('section_id', 'unknown')}:{course_info.get('topic_id', 'unknown')}:{course_info.get('lesson_id', 'unknown')}"
                    questions_count = (
                        self.lesson_interface.state_manager.increment_questions_count(
                            lesson_full_id
                        )
                    )

                    self.logger.info(f"–°—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {questions_count}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
                    relevance_result = self.lesson_interface.content_generator.check_question_relevance(
                        question,
                        self.lesson_interface.current_lesson_content,
                        self.lesson_interface.current_lesson_data,
                    )

                    self.logger.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞: {relevance_result}")

                    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω
                    if not relevance_result.get("is_relevant", True):
                        self.logger.warning("–í–æ–ø—Ä–æ—Å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω —É—Ä–æ–∫—É")
                        answer_area.value = f"""
                        <div style='background-color: #fff3cd; color: #856404; padding: 15px;
                                    border-radius: 8px; border: 1px solid #ffeaa7;'>
                            <h4>‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å —É—Ä–æ–∫–æ–º</h4>
                            <p><strong>–í–∞—à –≤–æ–ø—Ä–æ—Å:</strong> {question}</p>
                            <p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> {relevance_result.get('explanation', '–í–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ —É—Ä–æ–∫–∞')}</p>
                            <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —É—Ä–æ–∫–∞.</p>
                        </div>
                        """
                        return

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    self.logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ answer_question
                    course_info = self.lesson_interface.current_course_info
                    course_title = course_info.get("course_title", "–ö—É—Ä—Å")
                    section_title = course_info.get("section_title", "–†–∞–∑–¥–µ–ª")
                    topic_title = course_info.get("topic_title", "–¢–µ–º–∞")
                    lesson_title = course_info.get("lesson_title", "–£—Ä–æ–∫")
                    user_name = course_info.get("user_profile", {}).get(
                        "name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    )

                    answer = self.lesson_interface.content_generator.answer_question(
                        course=course_title,
                        section=section_title,
                        topic=topic_title,
                        lesson=lesson_title,
                        user_question=question,
                        lesson_content=self.lesson_interface.current_lesson_content,
                        user_name=user_name,
                        communication_style=course_info["user_profile"][
                            "communication_style"
                        ],
                    )

                    self.logger.info(
                        f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤"
                    )

                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
                    answer_area.value = answer

                    # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    question_input.value = ""

                    self.logger.info("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
                    answer_area.value = f"<p style='color: red;'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}</p>"

            def on_close_button_clicked(b):
                self.logger.info("–ö–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –Ω–∞–∂–∞—Ç–∞")
                qa_container.layout.display = "none"

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            send_button.on_click(on_send_question_button_clicked)
            close_button.on_click(on_close_button_clicked)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            qa_container.children = [
                title_html,
                question_input,
                send_button,
                answer_area,
                close_button,
            ]

            self.logger.info("QA –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.logger.info(
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {len(qa_container.children)}"
            )
            self.logger.info(
                f"–í–∏–¥–∂–µ—Ç—ã: {[type(widget).__name__ for widget in qa_container.children]}"
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ QA –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {str(e)}")

    def hide_other_containers(self):
        """
        –°–∫—Ä—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
        """
        try:
            if self.lesson_interface.explain_container:
                self.lesson_interface.explain_container.layout.display = "none"
            if self.lesson_interface.examples_container:
                self.lesson_interface.examples_container.layout.display = "none"
            if self.lesson_interface.qa_container:
                self.lesson_interface.qa_container.layout.display = "none"
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {str(e)}")
