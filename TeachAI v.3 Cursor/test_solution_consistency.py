#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∏ expected_output
"""

import io
from contextlib import redirect_stdout

def test_solution_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∏ expected_output"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
    test_cases = [
        {
            "name": "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "solution_code": """my_list = [1, 2, 3, 'apple', 'banana', 'cherry']
my_dict = {'name': 'Alice', 'age': 30, 'city': 'New York'}
my_list.append(4)
my_list.insert(3, 'orange')  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å insert(2, 'orange')
my_list.remove('banana')
my_dict['email'] = 'alice@example.com'
print(my_list)
print(my_dict)""",
            "expected_output": "[1, 2, 3, 'orange', 'apple', 'cherry', 4]\n{'name': 'Alice', 'city': 'New York', 'email': 'alice@example.com'}"
        },
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            "solution_code": """my_list = [1, 2, 3, 'apple', 'banana', 'cherry']
my_dict = {'name': 'Alice', 'age': 30, 'city': 'New York'}
my_list.append(4)
my_list.insert(2, 'orange')  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ò–Ω–¥–µ–∫—Å 2
my_list.remove('banana')
my_dict['email'] = 'alice@example.com'
print(my_list)
print(my_dict)""",
            "expected_output": "[1, 2, 'orange', 3, 'apple', 'cherry', 4]\n{'name': 'Alice', 'age': 30, 'city': 'New York', 'email': 'alice@example.com'}"
        }
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –≠–¢–ê–õ–û–ù–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø")
    print("=" * 60)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case['name']}")
        print("-" * 40)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        try:
            output_buffer = io.StringIO()
            local_vars = {}
            with redirect_stdout(output_buffer):
                exec(test_case["solution_code"], {}, local_vars)
            actual_output = output_buffer.getvalue().strip()
            
            print(f"–û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: '{test_case['expected_output']}'")
            print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥: '{actual_output}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            is_consistent = actual_output == test_case["expected_output"].strip()
            
            if is_consistent:
                print("‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –î–∞")
            else:
                print("‚ùå –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –ù–µ—Ç")
                print("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: expected_output –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–º—É –≤—ã–≤–æ–¥—É solution_code")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
                print("\nüîç –ê–Ω–∞–ª–∏–∑:")
                expected_lines = test_case["expected_output"].strip().split('\n')
                actual_lines = actual_output.split('\n')
                
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(expected_lines)}")
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(actual_lines)}")
                
                for j, (expected, actual) in enumerate(zip(expected_lines, actual_lines)):
                    if expected != actual:
                        print(f"   –°—Ç—Ä–æ–∫–∞ {j+1}:")
                        print(f"     –û–∂–∏–¥–∞–ª–æ—Å—å: '{expected}'")
                        print(f"     –ü–æ–ª—É—á–µ–Ω–æ:  '{actual}'")
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
    
    print("\n" + "=" * 60)
    print("üìä –í–´–í–û–î–´:")
    print("1. –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –∫–æ–¥")
    print("2. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è solution_code –∏ expected_output")
    print("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ control_tasks_generator.py")

if __name__ == "__main__":
    test_solution_consistency()