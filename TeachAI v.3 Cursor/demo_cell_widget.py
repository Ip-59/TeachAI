"""
–í–∏–¥–∂–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞.
–ö–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å–∫–∞.
"""

import ipywidgets as widgets
from cell_widget_base import CellWidgetBase
from typing import Optional


class DemoCellWidget(CellWidgetBase):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ —Å –∫–æ–¥–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—É–¥–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """

    def __init__(
        self,
        code: str,
        cell_id: str = None,
        title: str = None,
        description: str = None,
        show_code: bool = True,
        auto_run: bool = False,
        **kwargs,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —è—á–µ–π–∫–∏.

        Args:
            code: Python –∫–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            cell_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è—á–µ–π–∫–∏
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —è—á–µ–π–∫–∏
            description: –û–ø–∏—Å–∞–Ω–∏–µ/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —è—á–µ–π–∫–∏
            show_code: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
            auto_run: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–æ–¥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        """
        self.code = code
        self.show_code = show_code
        self.auto_run = auto_run

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–æ –≤—ã–∑–æ–≤–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        self._create_widgets()

        super().__init__(
            cell_id=cell_id, title=title, description=description, **kwargs
        )

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if self.auto_run:
            self._run_code()

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤."""

        # –û–±–ª–∞—Å—Ç—å —Å –∫–æ–¥–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
        if self.show_code:
            self.code_display = widgets.HTML(
                value=self._format_code_html(),
                layout=widgets.Layout(width="100%", margin="0 0 5px 0"),
            )

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.run_button = widgets.Button(
            description="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥",
            tooltip="–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥",
            button_style="info",
            layout=widgets.Layout(width="auto", margin="0 5px 5px 0"),
        )

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
        self.run_button.on_click(self._on_run_clicked)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–¥–∞
        if self.show_code:
            self.toggle_code_button = widgets.Button(
                description="üôà –°–∫—Ä—ã—Ç—å –∫–æ–¥",
                tooltip="–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–¥",
                button_style="",
                layout=widgets.Layout(width="auto", margin="0 0 5px 0"),
            )
            self.toggle_code_button.on_click(self._on_toggle_code_clicked)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_label = widgets.HTML(
            value="<i>–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É</i>", layout=widgets.Layout(margin="0 0 5px 0")
        )

    def _get_specific_widgets(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –≤–∏–¥–∂–µ—Ç—ã."""
        widgets_list = []

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å —Å –∫–æ–¥–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        if self.show_code and hasattr(self, "code_display"):
            widgets_list.append(self.code_display)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons = [self.run_button]
        if self.show_code and hasattr(self, "toggle_code_button"):
            buttons.append(self.toggle_code_button)

        button_box = widgets.HBox(
            children=buttons, layout=widgets.Layout(margin="0 0 5px 0")
        )
        widgets_list.append(button_box)

        # –°—Ç–∞—Ç—É—Å
        widgets_list.append(self.status_label)

        return widgets_list

    def _format_code_html(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞."""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
        escaped_code = (
            self.code.replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace('"', "&quot;")
            .replace("'", "&#x27;")
        )

        # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python
        return f"""
        <div style="
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 0;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            overflow-x: auto;
            margin-bottom: 5px;
        ">
            <div style="
                background-color: #e9ecef;
                color: #495057;
                font-size: 12px;
                font-weight: bold;
                padding: 8px 12px;
                border-bottom: 1px solid #dee2e6;
                margin: 0;
            ">
                üêç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥:
            </div>
            <pre style="
                color: #495057;
                margin: 0;
                padding: 12px;
                background: transparent;
                border: none;
                font-family: inherit;
                font-size: inherit;
                line-height: 1.4;
                white-space: pre;
                overflow-x: auto;
            ">{escaped_code}</pre>
        </div>
        """

    def _on_run_clicked(self, button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–ø—É—Å–∫–∞."""
        self._run_code()

    def _on_toggle_code_clicked(self, button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–¥–∞."""
        self._toggle_code_visibility()

    def _run_code(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.value = "<span style='color: orange;'>‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...</span>"

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–≤–æ–¥
        self.clear_output()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
        result, output, success = self.execute_code(self.code)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.display_result(result, output, success)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if success:
            self.status_label.value = (
                "<span style='color: green;'>‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ</span>"
            )
        else:
            self.status_label.value = (
                "<span style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</span>"
            )

    def _toggle_code_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–¥–∞."""
        if not hasattr(self, "code_display"):
            return

        current_children = list(self.children)

        if self.code_display in current_children:
            # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–¥
            current_children.remove(self.code_display)
            self.toggle_code_button.description = "üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥"
            self.toggle_code_button.tooltip = "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥"
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ (–≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞/–æ–ø–∏—Å–∞–Ω–∏—è, –Ω–æ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏)
            insert_index = 0

            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è)
            for i, child in enumerate(current_children):
                if isinstance(child, widgets.HTML) and (
                    "h3>" in child.value or "color: #666" in child.value
                ):
                    insert_index = i + 1
                elif isinstance(child, widgets.HBox):  # –≠—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    break

            current_children.insert(insert_index, self.code_display)
            self.toggle_code_button.description = "üôà –°–∫—Ä—ã—Ç—å –∫–æ–¥"
            self.toggle_code_button.tooltip = "–°–∫—Ä—ã—Ç—å –∫–æ–¥"

        self.children = current_children

    def set_code(self, code: str):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.

        Args:
            code: –ù–æ–≤—ã–π Python –∫–æ–¥
        """
        self.code = code
        if hasattr(self, "code_display"):
            self.code_display.value = self._format_code_html()
        self.status_label.value = "<i>–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É (–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω)</i>"
        self.clear_output()

    def get_code(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–¥–æ–º
        """
        return self.code

    def run(self):
        """–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–ª–∏–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ)."""
        self._run_code()

    def get_cell_info(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —è—á–µ–π–∫–µ."""
        info = super().get_cell_info()
        info.update(
            {
                "code": self.code,
                "show_code": self.show_code,
                "auto_run": self.auto_run,
                "code_length": len(self.code),
                "code_lines": len(self.code.split("\n")),
            }
        )
        return info


def create_demo_cell(
    code: str,
    title: str = None,
    description: str = None,
    show_code: bool = True,
    auto_run: bool = False,
) -> DemoCellWidget:
    """
    –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —è—á–µ–π–∫–∏.

    Args:
        code: Python –∫–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —è—á–µ–π–∫–∏
        description: –û–ø–∏—Å–∞–Ω–∏–µ —è—á–µ–π–∫–∏
        show_code: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–æ–¥
        auto_run: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–æ–¥

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä DemoCellWidget
    """
    return DemoCellWidget(
        code=code,
        title=title,
        description=description,
        show_code=show_code,
        auto_run=auto_run,
    )
