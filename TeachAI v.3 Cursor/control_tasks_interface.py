#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
from typing import Dict, Any, Optional
from control_tasks_generator import ControlTasksGenerator


class ControlTasksInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""

    def __init__(self, content_generator, lesson_interface):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.

        Args:
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            lesson_interface: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞
        """
        self.content_generator = content_generator
        self.lesson_interface = lesson_interface
        self.logger = logging.getLogger(__name__)

        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        self.tasks_generator = ControlTasksGenerator(content_generator.api_key)

        # –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        self.current_task = None
        self.task_result = None
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        self.is_checking = False

    def show_control_task(self, lesson_data: Dict[str, Any], lesson_content: str):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            lesson_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
        """
        from IPython.display import clear_output
        try:
            print("\n" + "="*80)
            print("üîç [DIAGNOSTIC] show_control_task –í–´–ó–í–ê–ù")
            print("="*80)
            
            # –û—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            clear_output(wait=True)
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ
            communication_style = self.lesson_interface.current_course_info.get(
                "user_profile", {}
            ).get("communication_style", "friendly")

            course_context = self.lesson_interface.current_course_info

            print(f"\nüì§ [DIAGNOSTIC] –í—ã–∑—ã–≤–∞–µ–º generate_control_task...")
            self.current_task = self.tasks_generator.generate_control_task(
                lesson_data=lesson_data,
                lesson_content=lesson_content,
                communication_style=communication_style,
                course_context=course_context,
            )

            print(f"\nüì• [DIAGNOSTIC] –†–µ–∑—É–ª—å—Ç–∞—Ç generate_control_task:")
            print(f"title: {self.current_task.get('title', '–ù–ï–¢')}")
            print(f"description: {self.current_task.get('description', '–ù–ï–¢')[:100]}...")
            print(f"task_code: {self.current_task.get('task_code', '–ù–ï–¢')[:100]}...")
            print(f"expected_output: {self.current_task.get('expected_output', '–ù–ï–¢')}")
            print("="*80 + "\n")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
            if not self.current_task.get("is_needed", True):
                # –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
                return self._create_skip_task_interface(self.current_task)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–¥–∞–Ω–∏—è
            return self._create_task_interface(self.current_task)

        except Exception as e:
            print(f"\n‚ùå [DIAGNOSTIC] –û–®–ò–ë–ö–ê –≤ show_control_task: {str(e)}")
            print("="*80 + "\n")
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
            return self._create_error_interface(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è: {str(e)}"
            )

    def _create_task_interface(self, task_data: Dict[str, Any]) -> widgets.VBox:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.

        Args:
            task_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å –∑–∞–¥–∞–Ω–∏–µ–º
        """
        import pprint
        print("\n[DEBUG] –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É:\n")
        pprint.pprint(task_data)
        print("\n[DEBUG] –ö–û–ù–ï–¶ task_data\n")
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞–Ω–∏—è
        title_html = widgets.HTML(
            value=f"<h2 style='color: #2c3e50; margin: 10px 0;'>{task_data.get('title', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')}</h2>",
            layout=widgets.Layout(margin="10px 0"),
        )

        # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        description_html = widgets.HTML(
            value=f"<p style='margin: 10px 0; line-height: 1.5;'>{task_data.get('description', '')}</p>",
            layout=widgets.Layout(margin="10px 0"),
        )

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        code_input = widgets.Textarea(
            value="",  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å...",
            description="–ö–æ–¥:",
            layout=widgets.Layout(width="100%", height="200px"),
            style={"description_width": "initial"},
        )

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execute_button = widgets.Button(
            description="‚ñ∂ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥",
            button_style="success",
            layout=widgets.Layout(width="200px", margin="10px 0"),
        )

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_button = widgets.Button(
            description="‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
            button_style="primary",
            layout=widgets.Layout(width="200px", margin="10px 0"),
        )

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∫ VBox –≤–º–µ—Å—Ç–æ Output
        results_output = widgets.VBox(layout=widgets.Layout(margin="10px 0"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        def on_execute_button_clicked(b):
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_output.children = []
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                namespace = {}
                
                # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä—ã –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
                import io
                import sys
                from contextlib import redirect_stdout
                
                output_buffer = io.StringIO()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –≤—ã–≤–æ–¥–∞
                with redirect_stdout(output_buffer):
                    exec(code_input.value, namespace)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                output = output_buffer.getvalue()
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if output.strip():
                    result_html = widgets.HTML(
                        value=f"<p style='color: green;'>‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</p><pre style='background: #f8f9fa; padding: 10px; border-radius: 4px;'>{output}</pre>"
                    )
                else:
                    result_html = widgets.HTML(
                        value="<p style='color: green;'>‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! (–±–µ–∑ –≤—ã–≤–æ–¥–∞)</p>"
                        )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                results_output.children = [result_html]
                
            except Exception as e:
                error_html = widgets.HTML(
                    value=f"<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}</p>"
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                results_output.children = [error_html]

        def on_check_button_clicked(b):
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
            check_button.disabled = True
            check_button.description = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è..."
            try:
                self._check_solution(code_input.value, task_data, results_output)
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                check_button.disabled = False
                check_button.description = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"

        execute_button.on_click(on_execute_button_clicked)
        check_button.on_click(on_check_button_clicked)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons_container = widgets.HBox(
            [execute_button, check_button],
            layout=widgets.Layout(justify_content="space-around", margin="10px 0"),
        )

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        interface = widgets.VBox(
            [
                title_html,
                description_html,
                code_input,
                buttons_container,
                results_output,
            ],
            layout=widgets.Layout(width="100%"),
        )

        return interface

    def _check_solution(
        self, user_code: str, task_data: Dict[str, Any], results_output
    ):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_code (str): –ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            task_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            results_output: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if self.is_checking:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ _check_solution - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return
        self.is_checking = True
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_output.children = []

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            check_variable = task_data.get("check_variable")
            expected_variable_value = task_data.get("expected_variable_value")

            print(f"\nüîç [DIAGNOSTIC] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è:")
            print(f"check_variable: {check_variable}")
            print(f"expected_variable_value: {expected_variable_value}")
            print(f"expected_output: {task_data.get('expected_output', '–ù–ï–¢')}")
            print(f"user_code: {user_code[:200]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            validation_result = self.tasks_generator.validate_task_execution(
                user_code,
                task_data.get("expected_output", ""),
                check_variable=check_variable,
                expected_variable_value=expected_variable_value,
            )

            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_result}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if check_variable:
                print(f"üîç [DIAGNOSTIC] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π '{check_variable}':")
                print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {expected_variable_value}")
                print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {validation_result.get('actual_variable')}")
                print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {validation_result.get('actual_variable') == expected_variable_value}")
            else:
                print(f"üîç [DIAGNOSTIC] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞:")
                print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: '{task_data.get('expected_output', '')}'")
                print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥: '{validation_result.get('actual_output', '')}'")
                print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {validation_result.get('actual_output') == task_data.get('expected_output', '').strip()}")

            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result_widgets = []

            if validation_result["is_correct"]:
                # –£—Å–ø–µ—Ö
                success_html = widgets.HTML(
                    value="<div style='background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
                    "<h3 style='color: #155724; margin: 0;'>üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</h3>"
                    "<p style='color: #155724; margin: 10px 0;'>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å –∑–∞–¥–∞–Ω–∏–µ–º.</p>"
                    f"<p style='color: #155724; margin: 10px 0;'><strong>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {validation_result.get('actual_output', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')}" +
                    (f"; <strong>–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:</strong> {validation_result.get('actual_variable')}" if check_variable else "") +
                    "</p>"
                    "</div>"
                )
                result_widgets.append(success_html)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._save_task_result(task_data, True)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                success_buttons = self._create_success_buttons()
                result_widgets.extend(success_buttons)

            else:
                # –û—à–∏–±–∫–∞
                error_message = validation_result.get("error_message", "")
                error_details = ""
                if error_message:
                    error_details = f"<p style='color: #721c24; margin: 10px 0;'><strong>–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:</strong><br><pre style='background-color: #f8f9fa; padding: 10px; border-radius: 3px; margin: 5px 0; font-size: 12px;'>{error_message}</pre></p>"
                
                error_html = widgets.HTML(
                        value="<div style='background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
                        "<h3 style='color: #721c24; margin: 0;'>‚ùå –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</h3>"
                        "<p style='color: #721c24; margin: 10px 0;'>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.</p>"
                    f"<p style='color: #721c24; margin: 10px 0;'><strong>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {validation_result.get('actual_output', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')}" +
                    (f"; <strong>–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:</strong> {validation_result.get('actual_variable')}" if check_variable else "") +
                    "</p>"
                    f"<p style='color: #721c24; margin: 10px 0;'><strong>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {task_data.get('expected_output', '–ù–µ —É–∫–∞–∑–∞–Ω')}" +
                    (f"; <strong>–û–∂–∏–¥–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:</strong> {expected_variable_value}" if check_variable else "") +
                    "</p>"
                    f"{error_details}"
                        "</div>"
                    )
                result_widgets.append(error_html)

                # –≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                solution_html = widgets.HTML(
                    value=f"<div style='background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
                    f"<h4 style='color: #856404; margin: 0;'>–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</h4>"
                    f"<pre style='background-color: #f8f9fa; padding: 10px; border-radius: 3px; margin: 10px 0;'>{task_data.get('solution_code', '')}</pre>"
                    f"</div>"
                )
                result_widgets.append(solution_html)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._save_task_result(task_data, False)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                retry_buttons = self._create_retry_buttons()
                result_widgets.extend(retry_buttons)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_output.children = result_widgets

        except Exception as e:
            error_html = widgets.HTML(
                value=f"<div style='background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
                f"<h3 style='color: #721c24; margin: 0;'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ</h3>"
                f"<p style='color: #721c24; margin: 10px 0;'>{str(e)}</p>"
                f"</div>"
            )
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_output.children = [error_html]
        finally:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.is_checking = False

    def _save_task_result(self, task_data: Dict[str, Any], is_correct: bool):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ä–æ–∫ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è

        Args:
            task_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            is_correct (bool): –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state.json
            lesson_id = self.lesson_interface.current_lesson_id
            if lesson_id:
                self.lesson_interface.state_manager.save_control_task_result(
                    lesson_id, task_data.get("title", "–ó–∞–¥–∞–Ω–∏–µ"), is_correct
                )
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ò —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω - —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                if is_correct:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —Ç–µ—Å—Ç
                    if self.lesson_interface.state_manager.is_test_passed(lesson_id):
                        # –£—Ä–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω: —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω + –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                        self.lesson_interface.state_manager.save_lesson_assessment(
                            lesson_id, 
                            self.lesson_interface.state_manager.get_lesson_score(lesson_id), 
                            True  # –¢–µ–ø–µ—Ä—å —É—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
                        )
                        # –î–û–ë–ê–í–õ–ï–ù–û: –≤—Å–µ–≥–¥–∞ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏
                        self.lesson_interface.state_manager.mark_lesson_complete_manually(lesson_id)
                        self.logger.info(f"–£—Ä–æ–∫ {lesson_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω: —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω + –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                    else:
                        self.logger.info(f"–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–∫–∞ {lesson_id}")
                else:
                    self.logger.info(f"–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è —É—Ä–æ–∫–∞ {lesson_id}")
                    
                self.logger.info(
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {is_correct}"
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")

    def _create_success_buttons(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
        –¢–µ–ø–µ—Ä—å —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞—à–±–æ—Ä–¥, –∞ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ.
        Returns:
            List[widgets.Widget]: –°–ø–∏—Å–æ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
        """
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥
        dashboard_button = widgets.Button(
            description="üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –æ–±—É—á–µ–Ω–∏—è",
            button_style="info",
            layout=widgets.Layout(width="300px", margin="10px"),
        )

        def on_dashboard_clicked(b):
            from IPython.display import clear_output, display
            clear_output(wait=True)
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ startup_dashboard —á–µ—Ä–µ–∑ lesson_interface
            startup_dashboard = None
            engine = getattr(self.lesson_interface, "engine", None)
            if engine and hasattr(engine, "startup_dashboard") and engine.startup_dashboard:
                startup_dashboard = engine.startup_dashboard
            elif hasattr(self.lesson_interface, "startup_dashboard"):
                startup_dashboard = self.lesson_interface.startup_dashboard
            if startup_dashboard:
                dashboard_widget = startup_dashboard.show_dashboard()
                display(dashboard_widget)
                # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'
                def after_dashboard(_):
                    clear_output(wait=True)
                    self._navigate_to_next_lesson()
                if hasattr(startup_dashboard, "continue_button") and startup_dashboard.continue_button:
                    startup_dashboard.continue_button.on_click(after_dashboard)
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ ‚Äî fallback: —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥
                self._navigate_to_next_lesson()

        dashboard_button.on_click(on_dashboard_clicked)
        return [dashboard_button]

    # –û—Å—Ç–∞–≤–ª—è—é _show_success_buttons –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def _show_success_buttons(self):
        buttons = self._create_success_buttons()
        for button in buttons:
            display(button)

    def _create_retry_buttons(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
        
        Returns:
            List[widgets.Widget]: –°–ø–∏—Å–æ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
        """
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫
        retry_button = widgets.Button(
            description="üîÑ –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–∫ –µ—â—ë —Ä–∞–∑",
            button_style="warning",
            layout=widgets.Layout(width="200px", margin="10px"),
        )

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        continue_button = widgets.Button(
            description="‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
            button_style="info",
            layout=widgets.Layout(width="250px", margin="10px"),
        )

        def on_retry_clicked(b):
            # –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É—Ä–æ–∫—É
            self._return_to_lesson()

        def on_continue_clicked(b):
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            self._force_next_lesson()

        retry_button.on_click(on_retry_clicked)
        continue_button.on_click(on_continue_clicked)

        buttons_container = widgets.HBox([retry_button, continue_button])
        return [buttons_container]
    
    def _show_retry_buttons(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
        """
        buttons = self._create_retry_buttons()
        for button in buttons:
            display(button)

    def _navigate_to_next_lesson(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–≤–æ–¥ –Ω–µ –æ—á–∏—â–µ–Ω
            display(widgets.HTML(value="<p>üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É...</p>"))

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            next_lesson = self.lesson_interface.state_manager.get_next_lesson()
            self.logger.info(f"get_next_lesson() –≤–µ—Ä–Ω—É–ª: {next_lesson}")

            if next_lesson and len(next_lesson) >= 3:
                section_id, topic_id, lesson_id = next_lesson[:3]
                current_lesson_id = self.lesson_interface.current_lesson_id
                next_lesson_id = f"{section_id}:{topic_id}:{lesson_id}"
                
                self.logger.info(f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {current_lesson_id}")
                self.logger.info(f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫: {next_lesson_id}")
                
                if current_lesson_id == next_lesson_id:
                    self.logger.warning("–í–ù–ò–ú–ê–ù–ò–ï: –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º!")
                
                self.logger.info(
                    f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É: {section_id}:{topic_id}:{lesson_id}"
                )

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
                clear_output(wait=True)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
                lesson_widget = self.lesson_interface.show_lesson(
                    section_id, topic_id, lesson_id
                )
                if lesson_widget:
                    display(lesson_widget)
                else:
                    display(
                        widgets.HTML(
                            value="<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞</p>"
                        )
                    )
            else:
                # –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                clear_output(wait=True)
                display(widgets.HTML(value="<p>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å!</p>"))

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É: {str(e)}")
            clear_output(wait=True)
            display(
                widgets.HTML(
                    value=f"<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É: {str(e)}</p>"
                )
            )

    def _return_to_lesson(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É.
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—Ä–æ–∫—É
            clear_output(wait=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
            current_info = self.lesson_interface.current_course_info
            lesson_widget = self.lesson_interface.show_lesson(
                current_info["section_id"],
                current_info["topic_id"],
                current_info["lesson_id"],
            )
            
            if lesson_widget:
                display(lesson_widget)
            else:
                display(
                    widgets.HTML(
                        value="<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞</p>"
                    )
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —É—Ä–æ–∫—É: {str(e)}")
            clear_output(wait=True)
            display(
                widgets.HTML(
                    value=f"<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —É—Ä–æ–∫—É: {str(e)}</p>"
                )
            )

    def _force_next_lesson(self):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            lesson_id = self.lesson_interface.current_lesson_id
            if lesson_id:
                # –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –≤—Ä—É—á–Ω—É—é
                self.lesson_interface.state_manager.mark_lesson_complete_manually(lesson_id)
                self.logger.info(f"–£—Ä–æ–∫ {lesson_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.lesson_interface.state_manager.save_state()

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            clear_output(wait=True)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
            self._navigate_to_next_lesson()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ: {str(e)}")
            clear_output(wait=True)
            display(
                widgets.HTML(
                    value=f"<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ: {str(e)}</p>"
                )
            )

    def _create_skip_task_interface(self, task_data: Dict[str, Any]) -> widgets.VBox:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—Ä–æ–∫–æ–≤, –≥–¥–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ.

        Args:
            task_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–ø—É—Å–∫–∞

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞
        """
        # –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è
        skip_reason = task_data.get("skip_reason", "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ
        skip_message = widgets.HTML(
            value=f"<div style='background-color: #e7f3ff; border: 1px solid #b8daff; border-radius: 5px; padding: 20px; margin: 10px 0;'>"
            f"<h3 style='color: #004085; margin: 0 0 10px 0;'>‚ÑπÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</h3>"
            f"<p style='color: #004085; margin: 0;'>{skip_reason}</p>"
            f"<p style='color: #004085; margin: 10px 0 0 0;'>–£—Ä–æ–∫ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.</p>"
            f"</div>"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
        next_lesson_button = widgets.Button(
            description="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É",
            button_style="success",
            layout=widgets.Layout(width="300px", margin="20px 0"),
        )
        
        def on_next_lesson_clicked(b):
            # –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π (—Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ)
            lesson_id = self.lesson_interface.current_lesson_id
            if lesson_id:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ä–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è 
                # –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
                self.lesson_interface.state_manager.mark_lesson_complete_manually(lesson_id)
                self.logger.info(f"–£—Ä–æ–∫ {lesson_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π (–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.lesson_interface.state_manager.save_state()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                is_completed = self.lesson_interface.state_manager.is_lesson_completed(lesson_id)
                self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —É—Ä–æ–∫–∞ {lesson_id}: {is_completed}")
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—ã—à–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
            self._navigate_to_next_lesson()
        
        next_lesson_button.on_click(on_next_lesson_clicked)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        return widgets.VBox([
            skip_message,
            next_lesson_button
        ])

    def _create_error_interface(self, error_message: str) -> widgets.VBox:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏.

        Args:
            error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å –æ—à–∏–±–∫–æ–π
        """
        error_html = widgets.HTML(
            value=f"<div style='background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
            f"<h3 style='color: #721c24; margin: 0;'>‚ùå –û—à–∏–±–∫–∞</h3>"
            f"<p style='color: #721c24; margin: 10px 0;'>{error_message}</p>"
            f"</div>"
        )

        close_button = widgets.Button(
            description="‚úï –ó–∞–∫—Ä—ã—Ç—å",
            button_style="danger",
            layout=widgets.Layout(width="auto", margin="10px 0"),
        )

        def on_close_clicked(b):
            # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            if self.lesson_interface.control_tasks_container:
                self.lesson_interface.control_tasks_container.layout.display = "none"

        close_button.on_click(on_close_clicked)

        return widgets.VBox([error_html, close_button])
