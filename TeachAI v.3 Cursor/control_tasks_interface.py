#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
from typing import Dict, Any, Optional
from control_tasks_generator import ControlTasksGenerator


class ControlTasksInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""

    def __init__(self, content_generator, lesson_interface):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.

        Args:
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            lesson_interface: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞
        """
        self.content_generator = content_generator
        self.lesson_interface = lesson_interface
        self.logger = logging.getLogger(__name__)

        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        self.tasks_generator = ControlTasksGenerator(content_generator.api_key)

        # –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        self.current_task = None
        self.task_result = None

    def show_control_task(self, lesson_data: Dict[str, Any], lesson_content: str):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            lesson_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ
            communication_style = self.lesson_interface.current_course_info.get(
                "user_profile", {}
            ).get("communication_style", "friendly")

            course_context = self.lesson_interface.current_course_info

            self.current_task = self.tasks_generator.generate_control_task(
                lesson_data=lesson_data,
                lesson_content=lesson_content,
                communication_style=communication_style,
                course_context=course_context,
            )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–¥–∞–Ω–∏—è
            return self._create_task_interface(self.current_task)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
            return self._create_error_interface(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è: {str(e)}"
            )

    def _create_task_interface(self, task_data: Dict[str, Any]) -> widgets.VBox:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.

        Args:
            task_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å –∑–∞–¥–∞–Ω–∏–µ–º
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞–Ω–∏—è
        title_html = widgets.HTML(
            value=f"<h2 style='color: #2c3e50; margin: 10px 0;'>{task_data.get('title', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')}</h2>",
            layout=widgets.Layout(margin="10px 0"),
        )

        # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        description_html = widgets.HTML(
            value=f"<p style='margin: 10px 0; line-height: 1.5;'>{task_data.get('description', '')}</p>",
            layout=widgets.Layout(margin="10px 0"),
        )

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        code_input = widgets.Textarea(
            value="",  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å...",
            description="–ö–æ–¥:",
            layout=widgets.Layout(width="100%", height="200px"),
            style={"description_width": "initial"},
        )

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execute_button = widgets.Button(
            description="‚ñ∂ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥",
            button_style="success",
            layout=widgets.Layout(width="200px", margin="10px 0"),
        )

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_button = widgets.Button(
            description="‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
            button_style="primary",
            layout=widgets.Layout(width="200px", margin="10px 0"),
        )

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_output = widgets.Output(layout=widgets.Layout(margin="10px 0"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        def on_execute_button_clicked(b):
            with results_output:
                clear_output()
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
                    exec(code_input.value)
                    display(
                        widgets.HTML(
                            value="<p style='color: green;'>‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</p>"
                        )
                    )
                except Exception as e:
                    display(
                        widgets.HTML(
                            value=f"<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}</p>"
                        )
                    )

        def on_check_button_clicked(b):
            self._check_solution(code_input.value, task_data, results_output)

        execute_button.on_click(on_execute_button_clicked)
        check_button.on_click(on_check_button_clicked)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons_container = widgets.HBox(
            [execute_button, check_button],
            layout=widgets.Layout(justify_content="space-around", margin="10px 0"),
        )

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        interface = widgets.VBox(
            [
                title_html,
                description_html,
                code_input,
                buttons_container,
                results_output,
            ],
            layout=widgets.Layout(width="100%"),
        )

        return interface

    def _check_solution(
        self, user_code: str, task_data: Dict[str, Any], results_output
    ):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_code (str): –ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            task_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            results_output: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        with results_output:
            clear_output()

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                validation_result = self.tasks_generator.validate_task_execution(
                    user_code, task_data.get("expected_output", "")
                )

                if validation_result["is_correct"]:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
                    success_html = widgets.HTML(
                        value="<div style='background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
                        "<h3 style='color: #155724; margin: 0;'>üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</h3>"
                        "<p style='color: #155724; margin: 10px 0;'>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å –∑–∞–¥–∞–Ω–∏–µ–º.</p>"
                        "</div>"
                    )
                    display(success_html)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self._save_task_result(task_data, True)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                    self._show_success_buttons()

                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                    error_html = widgets.HTML(
                        value="<div style='background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
                        "<h3 style='color: #721c24; margin: 0;'>‚ùå –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</h3>"
                        "<p style='color: #721c24; margin: 10px 0;'>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.</p>"
                        "</div>"
                    )
                    display(error_html)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                    solution_html = widgets.HTML(
                        value=f"<div style='background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
                        f"<h4 style='color: #856404; margin: 0;'>–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</h4>"
                        f"<pre style='background-color: #f8f9fa; padding: 10px; border-radius: 3px; margin: 10px 0;'>{task_data.get('solution_code', '')}</pre>"
                        f"</div>"
                    )
                    display(solution_html)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self._save_task_result(task_data, False)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    self._show_retry_buttons()

            except Exception as e:
                error_html = widgets.HTML(
                    value=f"<div style='background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
                    f"<h3 style='color: #721c24; margin: 0;'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ</h3>"
                    f"<p style='color: #721c24; margin: 10px 0;'>{str(e)}</p>"
                    f"</div>"
                )
                display(error_html)

    def _save_task_result(self, task_data: Dict[str, Any], is_correct: bool):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.

        Args:
            task_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            is_correct (bool): –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state.json
            lesson_id = self.lesson_interface.current_lesson_id
            if lesson_id:
                self.lesson_interface.state_manager.save_control_task_result(
                    lesson_id, task_data.get("title", "–ó–∞–¥–∞–Ω–∏–µ"), is_correct
                )
                self.logger.info(
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {is_correct}"
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")

    def _show_success_buttons(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
        """
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
        next_lesson_button = widgets.Button(
            description="‚û° –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É",
            button_style="success",
            layout=widgets.Layout(width="250px", margin="10px"),
        )

        def on_next_lesson_clicked(b):
            # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
            self._navigate_to_next_lesson()

        next_lesson_button.on_click(on_next_lesson_clicked)
        display(next_lesson_button)

    def _show_retry_buttons(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
        """
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫
        retry_button = widgets.Button(
            description="üîÑ –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–∫ –µ—â—ë —Ä–∞–∑",
            button_style="warning",
            layout=widgets.Layout(width="200px", margin="10px"),
        )

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        continue_button = widgets.Button(
            description="‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
            button_style="info",
            layout=widgets.Layout(width="250px", margin="10px"),
        )

        def on_retry_clicked(b):
            # –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É—Ä–æ–∫—É
            self._return_to_lesson()

        def on_continue_clicked(b):
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            self._force_next_lesson()

        retry_button.on_click(on_retry_clicked)
        continue_button.on_click(on_continue_clicked)

        buttons_container = widgets.HBox([retry_button, continue_button])
        display(buttons_container)

    def _navigate_to_next_lesson(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.
        """
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            display(widgets.HTML(value="<p>üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É...</p>"))

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            next_lesson = self.lesson_interface.state_manager.get_next_lesson()

            if next_lesson and len(next_lesson) >= 3:
                section_id, topic_id, lesson_id = next_lesson[:3]
                self.logger.info(
                    f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É: {section_id}:{topic_id}:{lesson_id}"
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
                lesson_widget = self.lesson_interface.show_lesson(
                    section_id, topic_id, lesson_id
                )
                if lesson_widget:
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–≤–æ–¥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫
                    clear_output(wait=True)
                    display(lesson_widget)
                else:
                    display(
                        widgets.HTML(
                            value="<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞</p>"
                        )
                    )
            else:
                # –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                clear_output(wait=True)
                display(widgets.HTML(value="<p>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å!</p>"))

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É: {str(e)}")
            import traceback

            self.logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            display(
                widgets.HTML(
                    value=f"<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ: {str(e)}</p>"
                )
            )

    def _return_to_lesson(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É.
        """
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
            current_info = self.lesson_interface.current_course_info
            self.lesson_interface.show_lesson(
                current_info["section_id"],
                current_info["topic_id"],
                current_info["lesson_id"],
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —É—Ä–æ–∫—É: {str(e)}")

    def _force_next_lesson(self):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.
        """
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            lesson_id = self.lesson_interface.current_lesson_id
            if lesson_id:
                self.lesson_interface.state_manager.save_lesson_assessment(
                    lesson_id, 0, True
                )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
            self._navigate_to_next_lesson()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ: {str(e)}")

    def _create_error_interface(self, error_message: str) -> widgets.VBox:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏.

        Args:
            error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å –æ—à–∏–±–∫–æ–π
        """
        error_html = widgets.HTML(
            value=f"<div style='background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 5px; padding: 15px; margin: 10px 0;'>"
            f"<h3 style='color: #721c24; margin: 0;'>‚ùå –û—à–∏–±–∫–∞</h3>"
            f"<p style='color: #721c24; margin: 10px 0;'>{error_message}</p>"
            f"</div>"
        )

        close_button = widgets.Button(
            description="‚úï –ó–∞–∫—Ä—ã—Ç—å",
            button_style="danger",
            layout=widgets.Layout(width="auto", margin="10px 0"),
        )

        def on_close_clicked(b):
            # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            if self.lesson_interface.control_tasks_container:
                self.lesson_interface.control_tasks_container.layout.display = "none"

        close_button.on_click(on_close_clicked)

        return widgets.VBox([error_html, close_button])
