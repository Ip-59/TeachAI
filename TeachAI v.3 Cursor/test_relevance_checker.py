"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É RelevanceChecker –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ–ø—Ä–æ—Å–æ–≤.
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from content_generator import ContentGenerator
from state_manager import StateManager
from config import ConfigManager


def test_relevance_checker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤."""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("=" * 60)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config = ConfigManager()
        config.load_config()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        api_key = config.get_api_key()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥

        if not api_key:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
            return False

        content_generator = ContentGenerator(api_key)
        state_manager = StateManager()

        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
        lesson_content = """
        <h1>–û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python</h1>
        <p>–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —è–∑—ã–∫–∞ Python.</p>

        <h2>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ</h2>
        <p>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è =</p>
        <pre><code>name = "–ò–≤–∞–Ω"
age = 25
height = 1.75</code></pre>

        <h2>–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö</h2>
        <p>Python –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:</p>
        <ul>
            <li>int - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞</li>
            <li>float - —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π</li>
            <li>str - —Å—Ç—Ä–æ–∫–∏</li>
            <li>bool - –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è</li>
        </ul>

        <h2>–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã</h2>
        <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è if-elif-else:</p>
        <pre><code>if age >= 18:
    print("–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π")
elif age >= 14:
    print("–ü–æ–¥—Ä–æ—Å—Ç–æ–∫")
else:
    print("–†–µ–±–µ–Ω–æ–∫")</code></pre>
        """

        lesson_data = {
            "title": "–û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python",
            "description": "–ò–∑—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —è–∑—ã–∫–∞ Python",
            "keywords": [
                "Python",
                "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å",
                "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
                "—Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö",
                "—É—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã",
            ],
        }

        print("üìö –¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        test_questions = [
            {
                "question": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Python?",
                "expected": "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ Python",
            },
            {
                "question": "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Python?",
                "expected": "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö",
            },
            {
                "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä if?",
                "expected": "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –æ–± —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö",
            },
            {
                "question": "–ü–æ—á–µ–º—É –Ω–µ–±–æ –≥–æ–ª—É–±–æ–µ?",
                "expected": "–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
            },
            {
                "question": "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?",
                "expected": "–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏",
            },
            {
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª for –≤ Python?",
                "expected": "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –Ω–æ –Ω–µ –æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ",
            },
        ]

        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:")
        print("-" * 60)

        for i, test_case in enumerate(test_questions, 1):
            question = test_case["question"]
            expected = test_case["expected"]
            description = test_case["description"]

            print(f"\n{i}. {description}")
            print(f"   –í–æ–ø—Ä–æ—Å: {question}")
            print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected}")

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                relevance_result = content_generator.check_question_relevance(
                    question, lesson_content, lesson_data
                )

                is_relevant = relevance_result["is_relevant"]
                confidence = relevance_result["confidence"]
                reason = relevance_result["reason"]
                suggestions = relevance_result["suggestions"]

                print(
                    f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π' if is_relevant else '‚ùå –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π'}"
                )
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")

                if not is_relevant and suggestions:
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(suggestions[:2])}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
                actual = "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π" if is_relevant else "–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π"
                if actual == expected:
                    print(f"   ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
                else:
                    print(
                        f"   ‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected}, –ø–æ–ª—É—á–µ–Ω–æ: {actual})"
                    )

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                if not is_relevant:
                    print(
                        "   üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞..."
                    )
                    non_relevant_response = (
                        content_generator.generate_non_relevant_response(
                            question, suggestions
                        )
                    )
                    print("   ‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

            except Exception as e:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
        print(f"\nüîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö:")
        print("-" * 60)

        for count in [3, 5, 10]:
            warning = content_generator.generate_multiple_questions_warning(count)
            print(f"   ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è {count} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")

        print("\n" + "=" * 60)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False

    return True


if __name__ == "__main__":
    test_relevance_checker()
