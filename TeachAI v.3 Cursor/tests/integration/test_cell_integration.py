"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —è—á–µ–µ–∫ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π TeachAI.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∞–¥–∞–ø—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
"""

import sys
import logging
from IPython.display import display
import ipywidgets as widgets

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_cell_adapter_import():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ —è—á–µ–µ–∫"""
    print("=== –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ —è—á–µ–µ–∫ ===")

    try:
        from cell_integration import cell_adapter

        print("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —è—á–µ–µ–∫ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —è—á–µ–µ–∫
        if cell_adapter.is_available():
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —è—á–µ–µ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —è—á–µ–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")

        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_cell_adapter_functionality():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    print("\n=== –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞ ===")

    try:
        from cell_integration import cell_adapter

        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞
        test_content = """
        # –£—Ä–æ–∫ –ø–æ Python

        –í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –æ—Å–Ω–æ–≤—ã Python.

        ```python
        print("Hello, World!")
        ```

        –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:

        ```python
        name = "Python"
        print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")
        ```
        """

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        code_blocks = cell_adapter.extract_code_blocks(test_content)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(code_blocks)} –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
        demo_cells = cell_adapter.create_demo_cells(code_blocks)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(demo_cells)} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —è—á–µ–µ–∫")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        interactive_cells = cell_adapter.generate_interactive_tasks(
            test_content, "–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫"
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(interactive_cells)} –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container = cell_adapter.create_cells_container(demo_cells, interactive_cells)
        if container:
            print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —è—á–µ–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —è—á–µ–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —è—á–µ–µ–∫)")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_lesson_display_integration():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å lesson_display.py"""
    print("\n=== –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å lesson_display.py ===")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ lesson_display.py –º–æ–∂–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–µ—Ä
        from lesson_display import LessonDisplay

        print("‚úÖ lesson_display.py —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CELLS_INTEGRATION_AVAILABLE –¥–æ—Å—Ç—É–ø–Ω–∞
        import lesson_display

        if hasattr(lesson_display, "CELLS_INTEGRATION_AVAILABLE"):
            print(
                f"‚úÖ CELLS_INTEGRATION_AVAILABLE = {lesson_display.CELLS_INTEGRATION_AVAILABLE}"
            )
        else:
            print("‚ö†Ô∏è CELLS_INTEGRATION_AVAILABLE –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_system_stability():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("\n=== –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã ===")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        from lesson_interface import LessonInterface

        print("‚úÖ lesson_interface.py —Ä–∞–±–æ—Ç–∞–µ—Ç")

        from lesson_display import LessonDisplay

        print("‚úÖ lesson_display.py —Ä–∞–±–æ—Ç–∞–µ—Ç")

        from lesson_navigation import LessonNavigation

        print("‚úÖ lesson_navigation.py —Ä–∞–±–æ—Ç–∞–µ—Ç")

        from lesson_interaction import LessonInteraction

        print("‚úÖ lesson_interaction.py —Ä–∞–±–æ—Ç–∞–µ—Ç")

        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —è—á–µ–µ–∫\n")

    tests = [
        test_cell_adapter_import,
        test_cell_adapter_functionality,
        test_lesson_display_integration,
        test_system_stability,
    ]

    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {sum(results)}/{len(results)}")

    if all(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —è—á–µ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
