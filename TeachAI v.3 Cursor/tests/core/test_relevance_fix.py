#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∫–∞–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ.
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from content_generator import ContentGenerator
from config import ConfigManager


def test_relevance_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏."""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
    print("=" * 60)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config = ConfigManager()
        config.load_config()
        api_key = config.get_api_key()

        if not api_key:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
            return False

        content_generator = ContentGenerator(api_key)
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        lesson_content = """
        <h1>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ Python</h1>
        <p>–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ Python.</p>
        <h2>–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã</h2>
        <p>Python –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:</p>
        <ul>
            <li>== (—Ä–∞–≤–Ω–æ)</li>
            <li>!= (–Ω–µ —Ä–∞–≤–Ω–æ)</li>
            <li>< (–º–µ–Ω—å—à–µ)</li>
            <li>> (–±–æ–ª—å—à–µ)</li>
            <li><= (–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ)</li>
            <li>>= (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ)</li>
        </ul>
        """

        lesson_data = {
            "title": "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ Python",
            "description": "–ò–∑—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ Python: ==, !=, <, >, <=, >=",
            "keywords": [
                "Python",
                "–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã",
                "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ",
                "==",
                "!=",
                "<",
                ">",
                "<=",
                ">=",
            ],
        }

        print("üìö –¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π)
        test_questions = [
            {
                "question": "=! - —ç—Ç–æ —Ç–æ–∂–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Ä–∞–≤–Ω–æ?",
                "expected": "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –Ω–µ —Ä–∞–≤–Ω–æ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π)",
            },
            {
                "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä != –≤ Python?",
                "expected": "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –Ω–µ —Ä–∞–≤–Ω–æ",
            },
            {
                "question": "–ö–∞–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –µ—Å—Ç—å –≤ Python?",
                "expected": "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
            },
            {
                "question": "–ü–æ—á–µ–º—É –Ω–µ–±–æ –≥–æ–ª—É–±–æ–µ?",
                "expected": "–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
            },
            {
                "question": "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?",
                "expected": "–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π",
                "description": "–í–æ–ø—Ä–æ—Å –æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏",
            },
        ]

        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:")
        print("-" * 60)

        passed_tests = 0
        total_tests = len(test_questions)

        for i, test_case in enumerate(test_questions, 1):
            question = test_case["question"]
            expected = test_case["expected"]
            description = test_case["description"]

            print(f"\n{i}. {description}")
            print(f"   –í–æ–ø—Ä–æ—Å: {question}")
            print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected}")

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                relevance_result = content_generator.check_question_relevance(
                    question, lesson_content, lesson_data
                )

                is_relevant = relevance_result["is_relevant"]
                confidence = relevance_result["confidence"]
                reason = relevance_result["reason"]

                print(
                    f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π' if is_relevant else '‚ùå –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π'}"
                )
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
                actual = "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π" if is_relevant else "–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π"
                if actual == expected:
                    print(f"   ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
                    passed_tests += 1
                else:
                    print(
                        f"   ‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected}, –ø–æ–ª—É—á–µ–Ω–æ: {actual})"
                    )

            except Exception as e:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")

        print("\n" + "=" * 60)
        print(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ"
        )

        if passed_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")

        return passed_tests == total_tests

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


if __name__ == "__main__":
    test_relevance_fix()
