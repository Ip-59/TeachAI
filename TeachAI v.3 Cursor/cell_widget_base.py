"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ —è—á–µ–µ–∫ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —è—á–µ–µ–∫.
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import sys
import io
import traceback
from contextlib import redirect_stdout, redirect_stderr
from typing import Any, Optional, Dict, Tuple


class CellWidgetBase(widgets.VBox):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —è—á–µ–µ–∫ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö).
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """

    def __init__(
        self, cell_id: str = None, title: str = None, description: str = None, **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ —è—á–µ–π–∫–∏.

        Args:
            cell_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è—á–µ–π–∫–∏
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —è—á–µ–π–∫–∏
            description: –û–ø–∏—Å–∞–Ω–∏–µ/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —è—á–µ–π–∫–∏
        """
        super().__init__(**kwargs)

        self.cell_id = cell_id or f"cell_{id(self)}"
        self.title = title
        self.description = description

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
        self.output_area = widgets.Output()

        # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
        self.execution_namespace = {}

        # –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self._init_styles()

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∏–¥–∂–µ—Ç–∞
        self._create_base_layout()

    def _init_styles(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.title_style = {
            "description_width": "0px",
            "font_weight": "bold",
            "font_size": "16px",
        }

        self.description_style = {
            "description_width": "0px",
            "font_size": "14px",
            "color": "#666",
        }

        self.button_style = {"button_color": "#4CAF50", "font_weight": "bold"}

        self.error_style = {"color": "red", "font_weight": "bold"}

        self.success_style = {"color": "green", "font_weight": "bold"}

    def _create_base_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∏–¥–∂–µ—Ç–∞."""
        children = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.title:
            title_widget = widgets.HTML(
                value=f"<h3>{self.title}</h3>",
                layout=widgets.Layout(margin="0 0 5px 0"),
            )
            children.append(title_widget)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.description:
            description_widget = widgets.HTML(
                value=f"<div style='margin-bottom: 8px; color: #666;'>{self.description}</div>",
                layout=widgets.Layout(margin="0 0 5px 0"),
            )
            children.append(description_widget)

        # –ë–∞–∑–æ–≤—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
        children.extend(self._get_specific_widgets())

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        children.append(self.output_area)

        self.children = children

        # –°—Ç–∏–ª—å –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        self.layout = widgets.Layout(
            border="1px solid #ddd", padding="10px", margin="5px 0", border_radius="5px"
        )

    def _get_specific_widgets(self) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —è—á–µ–π–∫–∏ –≤–∏–¥–∂–µ—Ç—ã.
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö.
        """
        return []

    def execute_code(self, code: str) -> Tuple[Any, str, bool]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç Python –∫–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

        Args:
            code: –°—Ç—Ä–æ–∫–∞ —Å Python –∫–æ–¥–æ–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã–≤–æ–¥, —É—Å–ø–µ—à–Ω–æ—Å—Ç—å_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        """
        if not code.strip():
            return None, "–ü—É—Å—Ç–æ–π –∫–æ–¥", False

        # –ó–∞—Ö–≤–∞—Ç stdout –∏ stderr
        old_stdout = sys.stdout
        old_stderr = sys.stderr

        stdout_capture = io.StringIO()
        stderr_capture = io.StringIO()

        result = None
        success = True

        try:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥
            sys.stdout = stdout_capture
            sys.stderr = stderr_capture

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è —è—á–µ–π–∫–∏
            if not hasattr(self, "execution_namespace") or not self.execution_namespace:
                self.execution_namespace = {}
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                self.execution_namespace.update(__builtins__)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–º–µ–Ω
            exec(code, self.execution_namespace, self.execution_namespace)

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
            lines = code.strip().split("\n")
            if lines:
                last_line = lines[-1].strip()
                if (
                    last_line
                    and not last_line.startswith(
                        (
                            "print",
                            "import",
                            "from",
                            "def",
                            "class",
                            "if",
                            "for",
                            "while",
                            "try",
                            "with",
                            "#",
                        )
                    )
                    and "=" not in last_line
                    and not last_line.endswith(":")
                    and "+=" not in last_line
                    and "-=" not in last_line
                    and "*=" not in last_line
                    and "append(" not in last_line
                ):
                    try:
                        result = eval(last_line, self.execution_namespace)
                    except:
                        pass

        except Exception as e:
            success = False
            stderr_capture.write(f"–û—à–∏–±–∫–∞: {str(e)}\n")
            stderr_capture.write(traceback.format_exc())

        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stdout –∏ stderr
            sys.stdout = old_stdout
            sys.stderr = old_stderr

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        stdout_content = stdout_capture.getvalue()
        stderr_content = stderr_capture.getvalue()

        output = stdout_content
        if stderr_content:
            output += f"\n{stderr_content}" if output else stderr_content

        return result, output, success

    def display_result(self, result: Any, output: str, success: bool):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–≤–æ–¥–∞.

        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
            output: –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ (stdout/stderr)
            success: –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        with self.output_area:
            clear_output(wait=True)

            if not success:
                # –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
                print(output)
            else:
                # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                if output.strip():
                    print("üì§ –í—ã–≤–æ–¥:")
                    print(output)

                if result is not None:
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

                if not output.strip() and result is None:
                    print("‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –≤—ã–≤–æ–¥–∞)")

    def clear_output(self):
        """–û—á–∏—â–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        with self.output_area:
            clear_output(wait=True)

    def set_title(self, title: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —è—á–µ–π–∫–∏."""
        self.title = title
        self._create_base_layout()

    def set_description(self, description: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —è—á–µ–π–∫–∏."""
        self.description = description
        self._create_base_layout()

    def get_cell_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è—á–µ–π–∫–µ.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —è—á–µ–π–∫–µ
        """
        return {
            "cell_id": self.cell_id,
            "title": self.title,
            "description": self.description,
            "type": self.__class__.__name__,
        }
