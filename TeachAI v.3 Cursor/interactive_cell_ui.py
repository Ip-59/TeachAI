"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–∏.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import ipywidgets as widgets
from typing import List, Optional


def create_task_widget(task_description: str) -> widgets.HTML:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è.

    Args:
        task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞

    Returns:
        HTML –≤–∏–¥–∂–µ—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è
    """
    return widgets.HTML(
        value=f"<div style='background: #f8f9fa; padding: 10px; border-left: 4px solid #007bff; margin: 5px 0;'>"
        f"<strong>üìù –ó–∞–¥–∞–Ω–∏–µ:</strong><br>{task_description}</div>",
        layout=widgets.Layout(margin="0 0 10px 0"),
    )


def create_code_editor(initial_code: str = "") -> widgets.Textarea:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞.

    Args:
        initial_code: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ

    Returns:
        Textarea –≤–∏–¥–∂–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
    """
    return widgets.Textarea(
        value=initial_code,
        description="–í–∞—à –∫–æ–¥:",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Python –∫–æ–¥ –∑–¥–µ—Å—å...",
        layout=widgets.Layout(width="100%", height="150px", font_family="monospace"),
        style={"description_width": "80px"},
    )


def create_run_button() -> widgets.Button:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞."""
    return widgets.Button(
        description="üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å",
        button_style="primary",
        tooltip="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        layout=widgets.Layout(width="120px"),
    )


def create_clear_button() -> widgets.Button:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–∞."""
    return widgets.Button(
        description="üóë –û—á–∏—Å—Ç–∏—Ç—å",
        button_style="warning",
        tooltip="–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞",
        layout=widgets.Layout(width="120px"),
    )


def create_reset_button() -> widgets.Button:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –∫–æ–¥–∞."""
    return widgets.Button(
        description="üîÑ –°–±—Ä–æ—Å",
        button_style="info",
        tooltip="–í–µ—Ä–Ω—É—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥",
        layout=widgets.Layout(width="120px"),
    )


def create_solution_button() -> widgets.Button:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞ —Ä–µ—à–µ–Ω–∏—è."""
    return widgets.Button(
        description="üí° –†–µ—à–µ–Ω–∏–µ",
        button_style="success",
        tooltip="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
        layout=widgets.Layout(width="120px"),
    )


def create_status_widget() -> widgets.HTML:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å–∞."""
    return widgets.HTML(
        value="<div style='color: #666; font-style: italic;'>–ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é</div>",
        layout=widgets.Layout(margin="5px 0"),
    )


def create_result_widget() -> widgets.HTML:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    return widgets.HTML(value="", layout=widgets.Layout(margin="5px 0"))


def create_stats_widget() -> widgets.HTML:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    return widgets.HTML(value="", layout=widgets.Layout(margin="5px 0"))


def create_button_row(
    run_button: widgets.Button,
    clear_button: widgets.Button,
    reset_button: widgets.Button,
    solution_button: Optional[widgets.Button] = None,
) -> widgets.HBox:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

    Args:
        run_button: –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        clear_button: –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        reset_button: –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        solution_button: –ö–Ω–æ–ø–∫–∞ —Ä–µ—à–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        HBox –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    buttons = [run_button, clear_button, reset_button]

    if solution_button:
        buttons.append(solution_button)

    return widgets.HBox(buttons, layout=widgets.Layout(margin="5px 0"))


def update_task_widget(task_widget: widgets.HTML, task_description: str) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è.

    Args:
        task_widget: –í–∏–¥–∂–µ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        task_description: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    """
    task_widget.value = (
        f"<div style='background: #f8f9fa; padding: 10px; border-left: 4px solid #007bff; margin: 5px 0;'>"
        f"<strong>üìù –ó–∞–¥–∞–Ω–∏–µ:</strong><br>{task_description}</div>"
    )


def update_status_widget(
    status_widget: widgets.HTML, message: str, status_type: str = "info"
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å–∞.

    Args:
        status_widget: –í–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_type: –¢–∏–ø —Å—Ç–∞—Ç—É—Å–∞ ('info', 'success', 'error', 'warning', 'running')
    """
    color_map = {
        "info": "#17a2b8",
        "success": "#28a745",
        "error": "#dc3545",
        "warning": "#ffc107",
        "running": "#6f42c1",
    }

    color = color_map.get(status_type, "#666")
    status_widget.value = (
        f"<div style='color: {color}; font-weight: bold;'>{message}</div>"
    )


def update_result_widget(
    result_widget: widgets.HTML, check_result_obj, execution_time_ms: float
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

    Args:
        result_widget: –í–∏–¥–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        check_result_obj: –û–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        execution_time_ms: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    """
    if check_result_obj.passed:
        status_color = "#28a745"  # –ó–µ–ª–µ–Ω—ã–π
        status_icon = "‚úÖ"
        status_text = "–ó–ê–ß–Å–¢"
    else:
        status_color = "#dc3545"  # –ö—Ä–∞—Å–Ω—ã–π
        status_icon = "‚ùå"
        status_text = "–ù–ï –ó–ê–ß–Å–¢"

    result_html = f"""
    <div style='border: 2px solid {status_color}; border-radius: 8px; padding: 12px; margin: 8px 0; background: {"#d4edda" if check_result_obj.passed else "#f8d7da"}'>
        <div style='font-weight: bold; font-size: 16px; color: {status_color}; margin-bottom: 8px;'>
            {status_icon} {status_text}
        </div>
        <div style='margin-bottom: 6px;'>
            <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {check_result_obj.message}
        </div>
        <div style='font-size: 12px; color: #666;'>
            –û—Ü–µ–Ω–∫–∞: {check_result_obj.score:.1%} | –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time_ms:.1f} –º—Å
        </div>
    </div>
    """

    result_widget.value = result_html


def update_stats_widget(stats_widget: widgets.HTML, stats: dict) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

    Args:
        stats_widget: –í–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    if stats:
        completed_icon = "‚úÖ" if stats["successful_attempts"] > 0 else "‚è≥"
        stats_html = f"""
        <div style='background: #f8f9fa; padding: 8px; border-radius: 4px; font-size: 12px; color: #666;'>
            {completed_icon} –ü–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']} |
            –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_attempts']} |
            –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']:.1%} |
            –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['average_score']:.1%}
        </div>
        """
        stats_widget.value = stats_html
