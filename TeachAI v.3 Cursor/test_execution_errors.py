#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from control_tasks_generator import ControlTasksGenerator
from config import ConfigManager

def test_execution_errors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö –ò–°–ü–û–õ–ù–ï–ù–ò–Ø")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    config = ConfigManager()
    config.load_config()
    api_key = config.get_api_key()
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç.")
        return
    generator = ControlTasksGenerator(api_key)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    test_cases = [
        {
            "name": "–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
            "user_code": "x = 5\nif x > 0:\n    print('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ')\nelse\n    print('–ù–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ')",  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ
            "expected_output": "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ",
            "expected_error": "SyntaxError"
        },
        {
            "name": "–û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π",
            "user_code": "x = 5\nif x > 0:\n    print(y)",  # y –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            "expected_output": "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ",
            "expected_error": "NameError"
        },
        {
            "name": "–û—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å",
            "user_code": "x = 5\nresult = x / 0\nprint(result)",
            "expected_output": "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ",
            "expected_error": "ZeroDivisionError"
        },
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥",
            "user_code": "x = 5\nif x > 0:\n    print('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ')\nelse:\n    print('–ù–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ')",
            "expected_output": "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ",
            "expected_error": None
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case['name']}")
        print("-" * 40)
        
        print(f"–ö–æ–¥: {test_case['user_code']}")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: '{test_case['expected_output']}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        result = generator.validate_task_execution(
            test_case["user_code"],
            test_case["expected_output"]
        )
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"  is_correct: {result['is_correct']}")
        print(f"  actual_output: '{result['actual_output']}'")
        print(f"  error_message: '{result['error_message']}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if test_case["expected_error"]:
            if test_case["expected_error"] in result["error_message"]:
                print(f"‚úÖ –û—à–∏–±–∫–∞ {test_case['expected_error']} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {test_case['expected_error']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ error_message")
        else:
            if result["error_message"]:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {result['error_message']}")
            else:
                print(f"‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫")
    
    print("\n" + "=" * 60)
    print("üìä –í–´–í–û–î–´:")
    print("1. –û—à–∏–±–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ error_message")
    print("2. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å error_message –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    print("3. –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É —Å–±–æ—è")

if __name__ == "__main__":
    test_execution_errors() 