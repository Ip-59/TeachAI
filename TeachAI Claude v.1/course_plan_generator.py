"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∫—É—Ä—Å–æ–≤.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –∏ –≤—Ä–µ–º–µ–Ω–∏.
"""

import json
from content_utils import BaseContentGenerator


class CoursePlanGenerator(BaseContentGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∫—É—Ä—Å–æ–≤."""

    def __init__(self, api_key):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.

        Args:
            api_key (str): API –∫–ª—é—á OpenAI
        """
        super().__init__(api_key)
        self.logger.info("CoursePlanGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def generate_course_plan(
        self, course_data, total_study_hours, lesson_duration_minutes
    ):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –∫—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è.

        Args:
            course_data (dict): –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ (id, title, description)
            total_study_hours (int): –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö
            lesson_duration_minutes (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö

        Returns:
            dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω

        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –∫—É—Ä—Å–∞
        """
        try:
            prompt = self._build_course_plan_prompt(
                course_data, total_study_hours, lesson_duration_minutes
            )

            messages = [
                {
                    "role": "system",
                    "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –º–µ—Ç–æ–¥–∏—Å—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.",
                },
                {"role": "user", "content": prompt},
            ]

            response_content = self.make_api_request(
                messages=messages,
                temperature=0.7,
                max_tokens=4000,
                response_format={"type": "json_object"},
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.save_debug_response(
                "course_plan",
                prompt,
                response_content,
                {
                    "course_id": course_data.get("id"),
                    "total_study_hours": total_study_hours,
                    "lesson_duration_minutes": lesson_duration_minutes,
                },
            )

            course_plan = json.loads(response_content)

            # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print("üîç –û–¢–õ–ê–î–ö–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞:")
            print(f"–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(course_plan.keys())}")

            # –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            course_plan = self._validate_and_fix_course_plan(
                course_plan, course_data, total_study_hours, lesson_duration_minutes
            )

            if "sections" in course_plan:
                print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(course_plan['sections'])}")
                if course_plan["sections"]:
                    first_section = course_plan["sections"][0]
                    print(f"‚úÖ –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞: {list(first_section.keys())}")
                    if "topics" in first_section:
                        print(
                            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –≤ –ø–µ—Ä–≤–æ–º —Ä–∞–∑–¥–µ–ª–µ: {len(first_section['topics'])}"
                        )
                        if first_section["topics"]:
                            first_topic = first_section["topics"][0]
                            print(f"‚úÖ –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã: {list(first_topic.keys())}")
                            if "lessons" in first_topic:
                                print(
                                    f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –ø–µ—Ä–≤–æ–π —Ç–µ–º–µ: {len(first_topic['lessons'])}"
                                )
                                if first_topic["lessons"]:
                                    first_lesson = first_topic["lessons"][0]
                                    print(
                                        f"‚úÖ –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞: {list(first_lesson.keys())}"
                                    )
            else:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞!")

            self.logger.info("–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenAI API")
            return course_plan

        except Exception as e:
            self.logger.error(
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {str(e)}"
            )
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω: {str(e)}")

    def _build_course_plan_prompt(
        self, course_data, total_study_hours, lesson_duration_minutes
    ):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.

        Args:
            course_data (dict): –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ
            total_study_hours (int): –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö
            lesson_duration_minutes (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö

        Returns:
            str: –ü—Ä–æ–º–ø—Ç –¥–ª—è API
        """
        return f"""
        –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –∫—É—Ä—Å–∞:

        –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course_data["title"]}
        –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course_data["description"]}

        –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {total_study_hours} —á–∞—Å–æ–≤
        –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è: {lesson_duration_minutes} –º–∏–Ω—É—Ç

        –í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –°–¢–†–û–ì–û –û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ú —Ñ–æ—Ä–º–∞—Ç–µ JSON:

        {{
            "id": "{course_data.get('id', 'course-1')}",
            "title": "{course_data['title']}",
            "description": "{course_data['description']}",
            "total_duration_minutes": {total_study_hours * 60},
            "sections": [
                {{
                    "id": "section-1",
                    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞",
                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞",
                    "duration_minutes": 180,
                    "topics": [
                        {{
                            "id": "topic-1",
                            "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",
                            "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã",
                            "duration_minutes": 90,
                            "lessons": [
                                {{
                                    "id": "lesson-1",
                                    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞",
                                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞",
                                    "duration_minutes": {lesson_duration_minutes},
                                    "keywords": ["–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ1", "–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ2"]
                                }}
                            ]
                        }}
                    ]
                }}
            ]
        }}

        –°–æ–∑–¥–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–ª–∞–Ω —Å 2-3 —Ä–∞–∑–¥–µ–ª–∞–º–∏, 2-3 —Ç–µ–º–∞–º–∏ –≤ –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ, –∏ 2-3 —É—Ä–æ–∫–∞–º–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ.
        –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è {total_study_hours} —á–∞—Å–æ–≤.
        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ {lesson_duration_minutes} –º–∏–Ω—É—Ç.

        –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω–æ —Ç–∞–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON —Å –∫–ª—é—á–∞–º–∏: id, title, description, duration_minutes, sections, topics, lessons, keywords.
        """

    def _validate_and_fix_course_plan(
        self, course_plan, course_data, total_study_hours, lesson_duration_minutes
    ):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞.

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞ –æ—Ç API
            course_data (dict): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
            total_study_hours (int): –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
            lesson_duration_minutes (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞

        Returns:
            dict: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –∫—É—Ä—Å–∞
        """
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
            if "id" not in course_plan:
                course_plan["id"] = course_data.get("id", "course-1")

            if "title" not in course_plan:
                course_plan["title"] = course_data.get("title", "–ö—É—Ä—Å")

            if "description" not in course_plan:
                course_plan["description"] = course_data.get(
                    "description", "–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞"
                )

            if "total_duration_minutes" not in course_plan:
                course_plan["total_duration_minutes"] = total_study_hours * 60

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ sections
            if "sections" not in course_plan or not isinstance(
                course_plan["sections"], list
            ):
                print("‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤...")
                course_plan["sections"] = self._create_minimal_sections(
                    course_data, lesson_duration_minutes
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª
            for i, section in enumerate(course_plan["sections"]):
                if not isinstance(section, dict):
                    continue

                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ —Ä–∞–∑–¥–µ–ª–∞
                if "id" not in section:
                    section["id"] = f"section-{i+1}"
                if "title" not in section:
                    section["title"] = f"–†–∞–∑–¥–µ–ª {i+1}"
                if "description" not in section:
                    section["description"] = f"–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ {i+1}"
                if "duration_minutes" not in section:
                    section["duration_minutes"] = lesson_duration_minutes * 3

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ topics
                if "topics" not in section or not isinstance(section["topics"], list):
                    section["topics"] = self._create_minimal_topics(
                        i + 1, lesson_duration_minutes
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–µ–º—É
                for j, topic in enumerate(section["topics"]):
                    if not isinstance(topic, dict):
                        continue

                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ —Ç–µ–º—ã
                    if "id" not in topic:
                        topic["id"] = f"topic-{i+1}-{j+1}"
                    if "title" not in topic:
                        topic["title"] = f"–¢–µ–º–∞ {j+1}"
                    if "description" not in topic:
                        topic["description"] = f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã {j+1}"
                    if "duration_minutes" not in topic:
                        topic["duration_minutes"] = lesson_duration_minutes * 2

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ lessons
                    if "lessons" not in topic or not isinstance(topic["lessons"], list):
                        topic["lessons"] = self._create_minimal_lessons(
                            i + 1, j + 1, lesson_duration_minutes
                        )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —É—Ä–æ–∫
                    for k, lesson in enumerate(topic["lessons"]):
                        if not isinstance(lesson, dict):
                            continue

                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ —É—Ä–æ–∫–∞
                        if "id" not in lesson:
                            lesson["id"] = f"lesson-{i+1}-{j+1}-{k+1}"
                        if "title" not in lesson:
                            lesson["title"] = f"–£—Ä–æ–∫ {k+1}"
                        if "description" not in lesson:
                            lesson["description"] = f"–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ {k+1}"
                        if "duration_minutes" not in lesson:
                            lesson["duration_minutes"] = lesson_duration_minutes
                        if "keywords" not in lesson:
                            lesson["keywords"] = ["–æ—Å–Ω–æ–≤—ã", "–ø—Ä–∞–∫—Ç–∏–∫–∞"]

            print("‚úÖ –ü–ª–∞–Ω –∫—É—Ä—Å–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            return course_plan

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–ª–∞–Ω
            return self._create_fallback_plan(
                course_data, total_study_hours, lesson_duration_minutes
            )

    def _create_minimal_sections(self, course_data, lesson_duration_minutes):
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤."""
        return [
            {
                "id": "section-1",
                "title": "–í–≤–µ–¥–µ–Ω–∏–µ",
                "description": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫—É—Ä—Å",
                "duration_minutes": lesson_duration_minutes * 2,
                "topics": self._create_minimal_topics(1, lesson_duration_minutes),
            }
        ]

    def _create_minimal_topics(self, section_num, lesson_duration_minutes):
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–º."""
        return [
            {
                "id": f"topic-{section_num}-1",
                "title": "–û—Å–Ω–æ–≤—ã",
                "description": "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏",
                "duration_minutes": lesson_duration_minutes,
                "lessons": self._create_minimal_lessons(
                    section_num, 1, lesson_duration_minutes
                ),
            }
        ]

    def _create_minimal_lessons(self, section_num, topic_num, lesson_duration_minutes):
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—Ä–æ–∫–æ–≤."""
        return [
            {
                "id": f"lesson-{section_num}-{topic_num}-1",
                "title": "–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫",
                "description": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–º—É",
                "duration_minutes": lesson_duration_minutes,
                "keywords": ["–≤–≤–µ–¥–µ–Ω–∏–µ", "–æ—Å–Ω–æ–≤—ã"],
            }
        ]

    def _create_fallback_plan(
        self, course_data, total_study_hours, lesson_duration_minutes
    ):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω –∫—É—Ä—Å–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–±–æ–µ."""
        return {
            "id": course_data.get("id", "course-1"),
            "title": course_data.get("title", "–ö—É—Ä—Å"),
            "description": course_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞"),
            "total_duration_minutes": total_study_hours * 60,
            "sections": [
                {
                    "id": "section-1",
                    "title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫—É—Ä—Å",
                    "description": "–ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –æ—Å–Ω–æ–≤—ã",
                    "duration_minutes": lesson_duration_minutes * 2,
                    "topics": [
                        {
                            "id": "topic-1-1",
                            "title": "–û—Å–Ω–æ–≤—ã",
                            "description": "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è",
                            "duration_minutes": lesson_duration_minutes,
                            "lessons": [
                                {
                                    "id": "lesson-1-1-1",
                                    "title": "–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫",
                                    "description": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏",
                                    "duration_minutes": lesson_duration_minutes,
                                    "keywords": ["–≤–≤–µ–¥–µ–Ω–∏–µ", "–æ—Å–Ω–æ–≤—ã", "–Ω–∞—á–∞–ª–æ"],
                                }
                            ],
                        }
                    ],
                }
            ],
        }
