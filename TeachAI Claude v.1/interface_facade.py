"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ipywidgets.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ Jupyter Notebook.

–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ–ø–µ—Ä—å —Å–ª—É–∂–∏—Ç —Ñ–∞—Å–∞–¥–æ–º –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
from datetime import datetime
import re
import traceback

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
from interface_utils import InterfaceState, InterfaceUtils
from setup_interface import SetupInterface
from lesson_interface import LessonInterface
from assessment_interface import AssessmentInterface
from completion_interface import CompletionInterface


class UserInterface:
    """
    –§–∞—Å–∞–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

    –í–ê–ñ–ù–û: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π.
    –í—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ —Ä–∞–Ω—å—à–µ!
    """

    def __init__(self, state_manager, content_generator, assessment, system_logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

        Args:
            state_manager (StateManager): –û–±—ä–µ–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            content_generator (ContentGenerator): –û–±—ä–µ–∫—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            assessment (Assessment): –û–±—ä–µ–∫—Ç –º–æ–¥—É–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
            system_logger (Logger): –û–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞
        """
        self.state_manager = state_manager
        self.content_generator = content_generator
        self.assessment = assessment
        self.system_logger = system_logger
        self.logger = logging.getLogger(__name__)

        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.current_state = InterfaceState.INITIAL_SETUP

        # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.current_course = None
        self.current_section = None
        self.current_topic = None
        self.current_lesson = None
        self.current_lesson_content = None
        self.current_questions = None
        self.current_answers = []

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        try:
            print(f"üîç –û–¢–õ–ê–î–ö–ê UserInterface.__init__:")
            print(f"üîç assessment = {assessment}")
            print(f"üîç type(assessment) = {type(assessment)}")

            self.setup_interface = SetupInterface(
                state_manager, content_generator, system_logger, assessment
            )
            self.lesson_interface = LessonInterface(
                state_manager, content_generator, system_logger, assessment
            )
            self.assessment_interface = AssessmentInterface(
                state_manager, assessment, system_logger
            )
            self.completion_interface = CompletionInterface(
                state_manager, system_logger, content_generator, assessment
            )

            self.logger.info("UserInterface (—Ñ–∞—Å–∞–¥) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UserInterface: {str(e)}")
            raise

        # –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.utils = InterfaceUtils()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.styles = {
            "correct": "background-color: #d4edda; color: #155724; padding: 10px; border-radius: 5px; margin: 5px 0;",
            "incorrect": "background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; margin: 5px 0;",
            "info": "background-color: #d1ecf1; color: #0c5460; padding: 10px; border-radius: 5px; margin: 5px 0;",
            "warning": "background-color: #fff3cd; color: #856404; padding: 10px; border-radius: 5px; margin: 5px 0;",
            "header": "font-size: 24px; font-weight: bold; color: #495057; margin: 20px 0 10px 0;",
            "subheader": "font-size: 18px; font-weight: bold; color: #6c757d; margin: 15px 0 10px 0;",
            "button": "font-weight: bold;",
        }

    # ========================================
    # –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ - –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
    # ========================================

    def show_initial_setup(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å —Ñ–æ—Ä–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        self.current_state = InterfaceState.INITIAL_SETUP
        return self.setup_interface.show_initial_setup()

    def show_course_selection(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞.

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
        """
        self.current_state = InterfaceState.COURSE_SELECTION
        return self.setup_interface.show_course_selection()

    def show_lesson(self, section_id, topic_id, lesson_id):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å —É—Ä–æ–∫–æ–º
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.current_section = section_id
        self.current_topic = topic_id
        self.current_lesson = lesson_id
        self.current_state = InterfaceState.LESSON_VIEW

        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é show_lesson —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–Ω–æ–ø–æ–∫
        lesson_interface = self._create_enhanced_lesson_interface(
            section_id, topic_id, lesson_id
        )
        return lesson_interface

    def show_assessment(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π.

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å —Ç–µ—Å—Ç–æ–º
        """
        self.current_state = InterfaceState.ASSESSMENT

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        if not self.current_lesson_content:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞
            lesson_data = self.state_manager.get_lesson_data(
                self.current_section, self.current_topic, self.current_lesson
            )
            if lesson_data:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                user_profile = self.state_manager.get_user_profile()
                course_plan = self.state_manager.get_course_plan()

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
                course_title = self._get_safe_course_title(course_plan)
                (
                    section_title,
                    topic_title,
                    lesson_title,
                ) = self._get_element_titles_from_plan(
                    course_plan,
                    self.current_section,
                    self.current_topic,
                    self.current_lesson,
                )

                try:
                    lesson_content_data = self.content_generator.generate_lesson(
                        course=course_title,
                        section=section_title,
                        topic=topic_title,
                        lesson=lesson_title,
                        user_name=user_profile["name"],
                        communication_style=user_profile["communication_style"],
                    )
                    self.current_lesson_content = lesson_content_data["content"]
                except Exception as e:
                    self.logger.error(
                        f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞: {str(e)}"
                    )
                    self.current_lesson_content = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞"

        return self.assessment_interface.show_assessment(
            self.current_course,
            self.current_section,
            self.current_topic,
            self.current_lesson,
            self.current_lesson_content,
        )

    def show_course_completion(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞.

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å —ç–∫—Ä–∞–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞
        """
        self.current_state = InterfaceState.COURSE_COMPLETION
        return self.completion_interface.show_course_completion()

    # ========================================
    # –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–¢–û–î–´ - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–û–í
    # ========================================

    def _create_enhanced_lesson_interface(self, section_id, topic_id, lesson_id):
        """
        –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–Ω–æ–ø–æ–∫.

        Args:
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞ —Å —Ä–∞–±–æ—á–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞
            lesson_widget = self.lesson_interface.show_lesson(
                section_id, topic_id, lesson_id
            )

            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –≤–∏–¥–∂–µ—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._attach_lesson_button_handlers(
                lesson_widget, section_id, topic_id, lesson_id
            )

            return lesson_widget

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Ä–æ–∫–∞: {str(e)}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏
            error_header = self.utils.create_header("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞")
            error_message = self.utils.create_styled_message(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞: {str(e)}", "incorrect"
            )

            back_button = widgets.Button(
                description="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞",
                button_style="primary",
                icon="arrow-left",
            )

            def go_back_to_courses(b):
                clear_output(wait=True)
                display(self.show_course_selection())

            back_button.on_click(go_back_to_courses)

            return widgets.VBox([error_header, error_message, back_button])

    def _attach_lesson_button_handlers(
        self, lesson_widget, section_id, topic_id, lesson_id
    ):
        """
        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–Ω–æ–ø–∫–∞–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —É—Ä–æ–∫–∞.

        Args:
            lesson_widget (widgets.VBox): –í–∏–¥–∂–µ—Ç —É—Ä–æ–∫–∞
            section_id, topic_id, lesson_id (str): ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """

        def find_buttons_in_widget(widget):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –≤–∏–¥–∂–µ—Ç–µ."""
            buttons = []
            if hasattr(widget, "children"):
                for child in widget.children:
                    if isinstance(child, widgets.Button):
                        buttons.append(child)
                    else:
                        buttons.extend(find_buttons_in_widget(child))
            return buttons

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        buttons = find_buttons_in_widget(lesson_widget)

        for button in buttons:
            description = button.description

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
            if description == "–ù–∞–∑–∞–¥":
                button.on_click(lambda b: self._handle_back_button())
            elif description == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
                button.on_click(lambda b: self._handle_test_button())
            elif description == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
                button.on_click(lambda b: self._handle_ask_button())
            elif description == "–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ":
                button.on_click(lambda b: self._handle_explain_button())
            elif description == "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã":
                button.on_click(lambda b: self._handle_examples_button())

    def _handle_back_button(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
        clear_output(wait=True)
        display(self.show_course_selection())

    def _handle_test_button(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç'."""
        clear_output(wait=True)
        display(self.show_assessment())

    def _handle_ask_button(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–æ–ø—Ä–æ—Å–∞."""
        # –õ–æ–≥–∏–∫–∞ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ lesson_interface
        pass

    def _handle_explain_button(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ'."""
        # –õ–æ–≥–∏–∫–∞ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ lesson_interface
        pass

    def _handle_examples_button(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã'."""
        # –õ–æ–≥–∏–∫–∞ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ lesson_interface
        pass

    # ========================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    # ========================================

    def _get_safe_course_title(self, course_plan):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞.

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞

        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
        """
        course_title = course_plan.get("title", "–ö—É—Ä—Å")
        if not course_title or course_title == "–ö—É—Ä—Å":
            learning_progress = self.state_manager.get_learning_progress()
            course_title = learning_progress.get("current_course", "–ö—É—Ä—Å Python")
        return course_title

    def _get_element_titles_from_plan(
        self, course_plan, section_id, topic_id, lesson_id
    ):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞.

        Returns:
            tuple: (section_title, topic_title, lesson_title)
        """
        section_title = "–†–∞–∑–¥–µ–ª"
        topic_title = "–¢–µ–º–∞"
        lesson_title = "–£—Ä–æ–∫"

        for section in course_plan.get("sections", []):
            if section.get("id") == section_id:
                section_title = (
                    section.get("title")
                    or section.get("name")
                    or section.get("id")
                    or "–†–∞–∑–¥–µ–ª"
                )
                for topic in section.get("topics", []):
                    if topic.get("id") == topic_id:
                        topic_title = (
                            topic.get("title")
                            or topic.get("name")
                            or topic.get("id")
                            or "–¢–µ–º–∞"
                        )
                        for lesson in topic.get("lessons", []):
                            if lesson.get("id") == lesson_id:
                                lesson_title = (
                                    lesson.get("title")
                                    or lesson.get("name")
                                    or lesson.get("id")
                                    or "–£—Ä–æ–∫"
                                )
                                break
                        break
                break

        return section_title, topic_title, lesson_title

    # ========================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –°–û –°–¢–ê–†–´–ú –ö–û–î–û–ú
    # ========================================

    # –í—Å–µ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    def create_styled_message(self, message, style_type="info"):
        """–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        return self.utils.create_styled_message(message, style_type)

    def create_header(self, title, level="header"):
        """–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        return self.utils.create_header(title, level)

    def create_navigation_info(
        self, course_title, section_title, topic_title, lesson_title, additional=""
    ):
        """–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°–æ–∑–¥–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
        return self.utils.create_navigation_info(
            course_title, section_title, topic_title, lesson_title, additional
        )

    def get_safe_title(self, data, fallback="–≠–ª–µ–º–µ–Ω—Ç"):
        """–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ."""
        return self.utils.get_safe_title(data, fallback)

    def log_interface_action(self, action_type, details=None):
        """–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        return self.utils.log_interface_action(action_type, details)
