"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
from datetime import datetime
from interface_utils import InterfaceUtils, InterfaceState


class CompletionInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞."""

    def __init__(
        self, state_manager, system_logger, content_generator=None, assessment=None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.state_manager = state_manager
        self.system_logger = system_logger
        self.logger = logging.getLogger(__name__)

        # –°–æ–∑–¥–∞–µ–º content_generator –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
        if content_generator is None:
            from content_generator import ContentGenerator
            from config import ConfigManager

            config_manager = ConfigManager()
            config_manager.load_config()
            api_key = config_manager.get_api_key()
            self.content_generator = ContentGenerator(api_key)
        else:
            self.content_generator = content_generator

        # –°–æ–∑–¥–∞–µ–º assessment –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
        if assessment is None:
            from assessment import Assessment

            self.assessment = Assessment(self.content_generator, system_logger)
        else:
            self.assessment = assessment

        # –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.utils = InterfaceUtils()

    def show_course_completion(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞.

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å —ç–∫—Ä–∞–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
            course_plan = self.state_manager.get_course_plan()
            learning_progress = self.state_manager.get_learning_progress()
            progress_data = self.state_manager.calculate_course_progress()

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            course_title = self._get_course_title(course_plan, learning_progress)
            course_id = self._get_course_id(course_plan, learning_progress)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞
            completion_header = self.utils.create_header("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
            completion_description = widgets.HTML(
                value=f"<p>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å <strong>{course_title}</strong>. –í–æ—Ç –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</p>"
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞
            stats_widget = self._create_statistics_widget(
                learning_progress, progress_data, course_plan
            )

            # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            certificate_widget = self._create_certificate_widget(
                learning_progress, course_title
            )

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –æ–±—É—á–µ–Ω–∏—é
            recommendations_widget = self._create_recommendations_widget(course_id)

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
            back_button = widgets.Button(
                description="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å",
                button_style="primary",
                tooltip="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞",
                icon="list",
                layout=widgets.Layout(width="200px", height="40px"),
            )

            # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            def on_back_button_clicked(b):
                clear_output(wait=True)
                from setup_interface import SetupInterface

                setup_ui = SetupInterface(
                    self.state_manager,
                    self.content_generator,
                    self.system_logger,
                    self.assessment,
                )
                display(setup_ui.show_course_selection())

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–Ω–æ–ø–∫–µ
            back_button.on_click(on_back_button_clicked)

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            form = widgets.VBox(
                [
                    completion_header,
                    completion_description,
                    stats_widget,
                    certificate_widget,
                    recommendations_widget,
                    back_button,
                ],
                layout=widgets.Layout(gap="20px"),
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            self.system_logger.log_activity(
                action_type="course_completed",
                details={
                    "course": course_id,
                    "course_title": course_title,
                    "average_score": learning_progress["average_score"],
                    "completed_lessons": progress_data["completed"],
                    "total_lessons": progress_data["total"],
                    "total_assessments": learning_progress["total_assessments"],
                },
            )

            return form

        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞: {str(e)}"
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            self.system_logger.log_activity(
                action_type="course_completion_display_error",
                status="error",
                error=str(e),
            )

            return self._create_completion_error_interface(str(e))

    def _create_statistics_widget(self, learning_progress, progress_data, course_plan):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫—É—Ä—Å–∞.

        Args:
            learning_progress (dict): –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            progress_data (dict): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞

        Returns:
            widgets.HTML: –í–∏–¥–∂–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
        total_duration = course_plan.get("total_duration_minutes", 0)
        hours = total_duration // 60
        minutes = total_duration % 60

        stats_html = f"""
        <div style="padding: 20px; background-color: #f8f9fa; border-radius: 8px; margin: 15px 0; border: 1px solid #dee2e6;">
            <h3 style="margin-top: 0; color: #495057; font-size: 20px;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px;">
                <div style="background-color: #ffffff; padding: 15px; border-radius: 6px; border: 1px solid #e9ecef;">
                    <h4 style="margin: 0 0 10px 0; color: #28a745;">üéØ –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</h4>
                    <p style="margin: 5px 0; font-size: 16px;"><strong>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</strong> {learning_progress['average_score']:.1f}%</p>
                    <p style="margin: 5px 0; font-size: 16px;"><strong>–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:</strong> {learning_progress['total_assessments']}</p>
                </div>
                <div style="background-color: #ffffff; padding: 15px; border-radius: 6px; border: 1px solid #e9ecef;">
                    <h4 style="margin: 0 0 10px 0; color: #007bff;">üìö –ü—Ä–æ–≥—Ä–µ—Å—Å</h4>
                    <p style="margin: 5px 0; font-size: 16px;"><strong>–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:</strong> {progress_data['completed']} –∏–∑ {progress_data['total']}</p>
                    <p style="margin: 5px 0; font-size: 16px;"><strong>–û–±—â–µ–µ –≤—Ä–µ–º—è:</strong> –ø—Ä–∏–º–µ—Ä–Ω–æ {hours} —á. {minutes} –º–∏–Ω.</p>
                </div>
            </div>
        </div>
        """

        return widgets.HTML(value=stats_html)

    def _create_certificate_widget(self, learning_progress, course_title):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.

        Args:
            learning_progress (dict): –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            course_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞

        Returns:
            widgets.HTML: –í–∏–¥–∂–µ—Ç —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
        """
        user_name = (
            learning_progress.get("user_name")
            or self.state_manager.get_user_profile()["name"]
        )
        current_date = datetime.now().strftime("%d.%m.%Y")

        certificate_html = f"""
        <div style="padding: 30px; border: 3px solid #007bff; border-radius: 12px; text-align: center; margin: 20px 0; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            <h2 style="color: #007bff; margin: 0 0 20px 0; font-size: 28px;">üèÜ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫—É—Ä—Å–∞</h2>

            <div style="margin: 20px 0;">
                <p style="font-size: 18px; margin: 10px 0;">–≠—Ç–æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ</p>
                <p style="font-size: 26px; font-weight: bold; margin: 15px 0; color: #495057; background-color: #ffffff; padding: 10px; border-radius: 6px; display: inline-block; min-width: 300px;">{user_name}</p>
                <p style="font-size: 18px; margin: 10px 0;">—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª(–∞) –∫—É—Ä—Å</p>
                <p style="font-size: 24px; font-weight: bold; margin: 15px 0; color: #007bff;">{course_title}</p>
                <p style="font-size: 16px; margin: 15px 0;">—Å–æ —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º <span style="font-weight: bold; color: #28a745;">{learning_progress['average_score']:.1f}%</span></p>
            </div>

            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                <p style="font-size: 14px; margin: 5px 0; color: #6c757d;">–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {current_date}</p>
                <p style="font-size: 14px; margin: 5px 0; color: #6c757d;">TeachAI - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ò–ò</p>
            </div>
        </div>
        """

        return widgets.HTML(value=certificate_html)

    def _create_recommendations_widget(self, current_course_id):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –æ–±—É—á–µ–Ω–∏—é.

        Args:
            current_course_id (str): ID —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞

        Returns:
            widgets.HTML: –í–∏–¥–∂–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã
        courses = self.state_manager.get_all_courses()

        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
        recommended_courses = [
            course for course in courses if course["id"] != current_course_id
        ]

        recommendations_html = f"""
        <div style="padding: 20px; background-color: #e7f3ff; border-radius: 8px; margin: 15px 0; border: 1px solid #b3d9ff;">
            <h3 style="margin-top: 0; color: #0066cc; font-size: 20px;">üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –æ–±—É—á–µ–Ω–∏—é</h3>
            <p style="font-size: 16px; margin-bottom: 15px;">–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫—É—Ä—Å—ã:</p>
        """

        if recommended_courses:
            recommendations_html += "<div style='margin-top: 15px;'>"
            for course in recommended_courses[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                difficulty = course.get("difficulty", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                if difficulty == "–ù–∞—á–∞–ª—å–Ω—ã–π":
                    icon = "üü¢"
                elif difficulty == "–°—Ä–µ–¥–Ω–∏–π":
                    icon = "üü°"
                elif difficulty == "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π":
                    icon = "üî¥"
                else:
                    icon = "üìö"

                recommendations_html += f"""
                <div style="background-color: #ffffff; padding: 15px; margin: 10px 0; border-radius: 6px; border: 1px solid #cce7ff;">
                    <h4 style="margin: 0 0 8px 0; color: #0066cc;">{icon} {course['title']}</h4>
                    <p style="margin: 5px 0; font-size: 14px; color: #666;"><strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> {difficulty}</p>
                    <p style="margin: 5px 0; font-size: 15px; line-height: 1.4;">{course['description'][:150]}{'...' if len(course['description']) > 150 else ''}</p>
                </div>
                """
            recommendations_html += "</div>"
        else:
            recommendations_html += """
            <div style="background-color: #ffffff; padding: 15px; margin: 10px 0; border-radius: 6px; border: 1px solid #cce7ff;">
                <p style="font-style: italic; color: #666;">–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤.</p>
            </div>
            """

        recommendations_html += """
            <div style="margin-top: 20px; padding: 15px; background-color: #f0f8ff; border-radius: 6px; border: 1px solid #cce7ff;">
                <p style="margin: 0; font-size: 14px; color: #0066cc;"><strong>üí° –°–æ–≤–µ—Ç:</strong> –î–ª—è –ª—É—á—à–µ–≥–æ —É—Å–≤–æ–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –Ω–æ–≤–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É.</p>
            </div>
        </div>
        """

        return widgets.HTML(value=recommendations_html)

    def _get_course_title(self, course_plan, learning_progress):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞.

        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
        """
        course_title = self.utils.get_safe_title(course_plan, "–ö—É—Ä—Å")
        if not course_title or course_title == "–ö—É—Ä—Å":
            course_title = learning_progress.get("current_course", "–ö—É—Ä—Å Python")
        return course_title

    def _get_course_id(self, course_plan, learning_progress):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç ID –∫—É—Ä—Å–∞.

        Returns:
            str: ID –∫—É—Ä—Å–∞
        """
        course_id = course_plan.get("id", "unknown-course")
        if not course_id or course_id == "unknown-course":
            course_id = learning_progress.get("current_course", "python-basics")
        return course_id

    def _create_completion_error_interface(self, error_message):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞.

        Args:
            error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏
        """
        error_header = self.utils.create_header(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞"
        )
        error_message_widget = self.utils.create_styled_message(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_message}", "incorrect"
        )

        back_to_courses_button = widgets.Button(
            description="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞", button_style="primary", icon="list"
        )

        def go_back_to_courses(b):
            clear_output(wait=True)
            from setup_interface import SetupInterface

            setup_ui = SetupInterface(
                self.state_manager,
                self.content_generator,
                self.system_logger,
                self.assessment,
            )
            display(setup_ui.show_course_selection())

        back_to_courses_button.on_click(go_back_to_courses)

        return widgets.VBox(
            [error_header, error_message_widget, back_to_courses_button]
        )
