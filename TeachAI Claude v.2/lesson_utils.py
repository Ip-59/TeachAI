"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Ä–æ–∫–æ–≤.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Ä–æ–∫–∞.
–†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –í—ã–¥–µ–ª–µ–Ω –∏–∑ lesson_interface.py –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª–∏–º–∏—Ç—É —Ä–∞–∑–º–µ—Ä–∞.
–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 34: –£–ø—Ä–æ—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–æ–±–ª–µ–º–∞ #145)
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import html
import logging


class LessonUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Ä–æ–∫–æ–≤."""

    def __init__(
        self,
        interface_utils=None,
        logger=None,
        state_manager=None,
        content_generator=None,
        assessment=None,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç —É—Ä–æ–∫–∞.

        Args:
            interface_utils: –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            logger: –õ–æ–≥–≥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.interface_utils = interface_utils
        self.logger = logger or logging.getLogger(__name__)
        self.state_manager = state_manager
        self.content_generator = content_generator
        self.assessment = assessment

        self.logger.info("LessonUtils –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_lesson_header(self, lesson_title):
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞.

        Args:
            lesson_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            widgets.HTML: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞
        """
        safe_title = html.escape(str(lesson_title))
        return widgets.HTML(
            value=f"""
            <h1 style="margin: 10px 0; padding: 15px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                       color: white; border-radius: 10px; text-align: center; font-size: 24px;
                       box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                üìö {safe_title}
            </h1>
            """
        )

    def create_navigation_info(
        self,
        course_title,
        section_title,
        topic_title,
        lesson_title,
        estimated_time="‚è±Ô∏è 30 –º–∏–Ω.",
    ):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—Ä–æ–∫–∞.

        Args:
            course_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            section_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            topic_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            lesson_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            estimated_time (str): –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è

        Returns:
            widgets.HTML: –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        safe_course = html.escape(str(course_title))
        safe_section = html.escape(str(section_title))
        safe_topic = html.escape(str(topic_title))
        safe_lesson = html.escape(str(lesson_title))
        safe_time = html.escape(str(estimated_time))

        return widgets.HTML(
            value=f"""
            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;
                       border-left: 4px solid #007bff;">
                <div style="display: flex; flex-wrap: wrap; gap: 15px; align-items: center;">
                    <span style="font-weight: bold; color: #495057;">üìò –ö—É—Ä—Å: {safe_course}</span>
                    <span style="color: #6c757d;">üìÇ –†–∞–∑–¥–µ–ª: {safe_section}</span>
                    <span style="color: #6c757d;">üìã –¢–µ–º–∞: {safe_topic}</span>
                    <span style="color: #6c757d;">üìñ –£—Ä–æ–∫: {safe_lesson}</span>
                    <span style="color: #28a745; font-weight: bold;">{safe_time}</span>
                </div>
            </div>
            """
        )

    # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 34: –î–æ–±–∞–≤–ª–µ–Ω alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å lesson_interface.py
    def create_lesson_navigation(
        self,
        course_title,
        section_title,
        topic_title,
        lesson_title,
        estimated_time="‚è±Ô∏è 30 –º–∏–Ω.",
    ):
        """
        Alias –¥–ª—è create_navigation_info –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        """
        return self.create_navigation_info(
            course_title, section_title, topic_title, lesson_title, estimated_time
        )

    def create_lesson_content(self, lesson_content_data):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞.

        –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 33: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø—Ä–æ–±–ª–µ–º–∞ #135)

        Args:
            lesson_content_data (dict): –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞

        Returns:
            widgets.HTML: –í–∏–¥–∂–µ—Ç —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —É—Ä–æ–∫–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if isinstance(lesson_content_data, dict):
                content = lesson_content_data.get("content", "")
            else:
                content = str(lesson_content_data)

            if not content:
                content = "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

            # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 34: –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è HTML (–ø—Ä–æ–±–ª–µ–º–∞ #135 fix)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
            is_full_html = (
                "<style>" in content
                or '<div class="content-container">' in content
                or "<!DOCTYPE" in content
                or "<html>" in content
                or "<HTML>" in content
                or content.strip().startswith("<html")
            )

            if is_full_html:
                # LessonGenerator –≤–µ—Ä–Ω—É–ª –ø–æ–ª–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                return widgets.HTML(value=content)
            else:
                # LessonGenerator –≤–µ—Ä–Ω—É–ª –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
                safe_content = html.escape(content)
                formatted_content = safe_content.replace("\n", "<br>")

                return widgets.HTML(
                    value=f"""
                    <div style="font-family: Arial, sans-serif; font-size: 16px; line-height: 1.6;
                               margin: 20px 0; padding: 20px; background: white; border-radius: 8px;
                               box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
                        {formatted_content}
                    </div>
                    """
                )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞: {str(e)}")
            return widgets.HTML(
                value=f"""
                <div style="color: #dc3545; padding: 20px; background: #f8d7da; border-radius: 8px;">
                    <strong>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞:</strong><br>
                    {html.escape(str(e))}
                </div>
                """
            )

    def create_interactive_buttons(self, interactive_handlers):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É—Ä–æ–∫–∞.

        Args:
            interactive_handlers: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

        Returns:
            widgets.HBox: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        # –ö–Ω–æ–ø–∫–∞ "–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
        explain_button = widgets.Button(
            description="üìö –û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
            button_style="info",
            tooltip="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            layout=widgets.Layout(width="200px", height="40px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã"
        examples_button = widgets.Button(
            description="üí° –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã",
            button_style="warning",
            tooltip="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã",
            layout=widgets.Layout(width="200px", height="40px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
        question_button = widgets.Button(
            description="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            button_style="primary",
            tooltip="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞",
            layout=widgets.Layout(width="200px", height="40px"),
        )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if interactive_handlers:
            explain_button.on_click(interactive_handlers.handle_explain_button)
            examples_button.on_click(interactive_handlers.handle_examples_button)
            question_button.on_click(interactive_handlers.handle_question_button)

        return widgets.HBox(
            [explain_button, examples_button, question_button],
            layout=widgets.Layout(justify_content="center", margin="15px 0"),
        )

    def create_assessment_button(self, assessment_module, lesson_data, course_info):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞.

        –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 34: –£–ø—Ä–æ—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ facade.show_assessment() (–ø—Ä–æ–±–ª–µ–º–∞ #145)

        Args:
            assessment_module: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
            lesson_data: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            course_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ

        Returns:
            widgets.VBox: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_button = widgets.Button(
            description="üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É",
            button_style="success",
            tooltip="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π",
            layout=widgets.Layout(width="250px", height="45px"),
        )

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        output_container = widgets.Output()

        def on_test_click(button):
            """
            –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 34: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç facade.show_assessment() –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ UserInterface.
            """
            with output_container:
                output_container.clear_output()

                try:
                    self.logger.info("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º lesson_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                    lesson_id = None
                    if isinstance(lesson_data, dict):
                        lesson_id = lesson_data.get("id") or lesson_data.get(
                            "lesson_id"
                        )

                    if not lesson_id and isinstance(course_info, dict):
                        lesson_id = course_info.get("lesson_id")

                    if not lesson_id:
                        lesson_id = "—Ç–µ–∫—É—â–∏–π-—É—Ä–æ–∫"

                    self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π lesson_id: {lesson_id}")

                    # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 34: –ò—Å–ø–æ–ª—å–∑—É–µ–º facade.show_assessment() –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è UserInterface
                    facade = None
                    if isinstance(course_info, dict):
                        facade = course_info.get("facade")

                    if facade and hasattr(facade, "show_assessment"):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞—Å–∞–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        display(
                            widgets.HTML(
                                value="""
                            <div style="color: #155724; padding: 10px; background-color: #d4edda;
                                       border: 1px solid #c3e6cb; border-radius: 5px;">
                                <strong>üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...</strong>
                            </div>
                            """
                            )
                        )

                        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∞—Å–∞–¥
                        assessment_interface = facade.show_assessment(lesson_id)
                        if assessment_interface:
                            clear_output(wait=True)
                            display(assessment_interface)
                            self.logger.info(
                                f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ {lesson_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ facade"
                            )
                        else:
                            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ facade"
                            self.logger.error(error_msg)
                            display(
                                widgets.HTML(
                                    value=f"""
                                <div style="color: #721c24; padding: 10px; background-color: #f8d7da;
                                           border: 1px solid #f5c6cb; border-radius: 5px;">
                                    <strong>–û—à–∏–±–∫–∞:</strong><br>
                                    {html.escape(error_msg)}
                                </div>
                                """
                                )
                            )
                    else:
                        error_msg = "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                        self.logger.error(error_msg)
                        display(
                            widgets.HTML(
                                value=f"""
                            <div style="color: #721c24; padding: 10px; background-color: #f8d7da;
                                       border: 1px solid #f5c6cb; border-radius: 5px;">
                                <strong>–û—à–∏–±–∫–∞:</strong><br>
                                {html.escape(error_msg)}<br>
                                <small>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.</small>
                            </div>
                            """
                            )
                        )

                except Exception as e:
                    error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
                    self.logger.error(error_msg)
                    display(
                        widgets.HTML(
                            value=f"""
                        <div style="color: #721c24; padding: 10px; background-color: #f8d7da;
                                   border: 1px solid #f5c6cb; border-radius: 5px;">
                            <strong>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</strong><br>
                            {html.escape(error_msg)}
                        </div>
                        """
                        )
                    )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        test_button.on_click(on_test_click)

        return widgets.VBox(
            [test_button, output_container],
            layout=widgets.Layout(align_items="center", margin="20px 0"),
        )

    def create_lesson_error_interface(self, error_title, error_message):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏ —É—Ä–æ–∫–∞.

        Args:
            error_title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏
            error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏
        """
        safe_title = html.escape(str(error_title))
        safe_message = html.escape(str(error_message))

        error_header = widgets.HTML(
            value=f"""
            <h2 style="color: #dc3545; margin: 10px 0; text-align: center;">
                ‚ö†Ô∏è {safe_title}
            </h2>
            """
        )

        error_content = widgets.HTML(
            value=f"""
            <div style="color: #721c24; padding: 20px; background-color: #f8d7da;
                       border: 1px solid #f5c6cb; border-radius: 8px; margin: 20px 0;">
                <strong>–û—à–∏–±–∫–∞:</strong><br>
                {safe_message}
            </div>
            """
        )

        return widgets.VBox(
            [error_header, error_content], layout=widgets.Layout(margin="20px 0")
        )

    def get_element_titles_from_plan(
        self, course_plan, section_id, topic_id, lesson_id
    ):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞.

        –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 33: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –º–µ—Ç–æ–¥–∞ (–ø—Ä–æ–±–ª–µ–º–∞ #139)

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            tuple: (course_title, section_title, topic_title, lesson_title)
        """
        course_title = course_plan.get("title", "–ö—É—Ä—Å")
        section_title = "–†–∞–∑–¥–µ–ª"
        topic_title = "–¢–µ–º–∞"
        lesson_title = "–£—Ä–æ–∫"

        try:
            for section in course_plan.get("sections", []):
                if section.get("id") == section_id:
                    section_title = section.get("title", section_title)
                    for topic in section.get("topics", []):
                        if topic.get("id") == topic_id:
                            topic_title = topic.get("title", topic_title)
                            for lesson in topic.get("lessons", []):
                                if lesson.get("id") == lesson_id:
                                    lesson_title = lesson.get("title", lesson_title)
                                    break
                            break
                    break
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞: {str(e)}")

        return course_title, section_title, topic_title, lesson_title

    def get_lesson_from_plan(self, course_plan, section_id, topic_id, lesson_id):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞.

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            dict: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–ª–∏ None
        """
        try:
            if not isinstance(course_plan, dict):
                return None

            sections = course_plan.get("sections", [])
            for section in sections:
                if section.get("id") == section_id:
                    topics = section.get("topics", [])
                    for topic in topics:
                        if topic.get("id") == topic_id:
                            lessons = topic.get("lessons", [])
                            for lesson in lessons:
                                if lesson.get("id") == lesson_id:
                                    return lesson

            return None

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Ä–æ–∫–∞ {lesson_id}: {str(e)}")
            return None

    def get_course_id(self, course_plan):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∫—É—Ä—Å–∞ –∏–∑ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞.

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞

        Returns:
            str: ID –∫—É—Ä—Å–∞
        """
        if isinstance(course_plan, dict):
            return course_plan.get("id", "unknown-course")
        return "unknown-course"

    def validate_lesson_data(self, lesson_content_data, lesson_data):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞.

        Args:
            lesson_content_data: –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞
            lesson_data: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ –ø–ª–∞–Ω–∞

        Returns:
            tuple: (is_valid, error_message)
        """
        try:
            if not lesson_content_data:
                return False, "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

            if isinstance(lesson_content_data, dict):
                if not lesson_content_data.get("content"):
                    return False, "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –ø—É—Å—Ç–æ–µ"

            return True, ""

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
