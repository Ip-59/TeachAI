#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ TeachAI 2
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–æ—à–∞–≥–æ–≤–æ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys


def test_api_key():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–ª—é—á OpenAI."""
    print("üîë –¢–µ—Å—Ç API –∫–ª—é—á–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if not os.path.exists(".env"):
        print("   ‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        with open(".env", "r") as f:
            for line in f:
                if line.startswith("OPENAI_API_KEY="):
                    key = line.split("=", 1)[1].strip()
                    if key and key != "–≤–∞—à-–∫–ª—é—á-–∑–¥–µ—Å—å":
                        print(f"   ‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(key)})")

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                        os.environ["OPENAI_API_KEY"] = key
                        return True
                    else:
                        print("   ‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                        return False

        print("   ‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
        return False


def test_openai_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI."""
    print("üåê –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI...")

    try:
        import openai

        print("   ‚úÖ openai –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
    except ImportError:
        print("   ‚ùå openai –º–æ–¥—É–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –£–°–¢–ê–ù–û–í–ò–¢–ï: pip install openai")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("   ‚ùå API –∫–ª—é—á –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return False

    try:
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API
        openai.api_key = api_key

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "Test"}],
            max_tokens=5,
        )

        print("   ‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True

    except Exception as e:
        error_str = str(e).lower()

        if "authentication" in error_str or "api key" in error_str:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            print("   –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –Ω–∞ https://platform.openai.com/api-keys")
        elif "rate limit" in error_str:
            print("   ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("   –†–ï–®–ï–ù–ò–ï: –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
        elif "connection" in error_str:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
            print("   –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å OpenAI")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {e}")

        return False


def test_engine_init():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é engine."""
    print("‚öôÔ∏è –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ engine...")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
    if os.getcwd() not in sys.path:
        sys.path.insert(0, os.getcwd())

    try:
        from engine import TeachAIEngine

        print("   ‚úÖ engine –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ engine: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ engine –º–æ–¥—É–ª–µ: {e}")
        return False

    try:
        engine = TeachAIEngine()
        print("   ‚úÖ TeachAIEngine —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è engine: {e}")
        return False

    try:
        result = engine.initialize()
        if result.get("success"):
            print("   ‚úÖ Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        else:
            print(
                f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )
            return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def test_lesson_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Ä–æ–∫–∞."""
    print("üìö –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞...")

    try:
        from content_generator import ContentGenerator

        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("   ‚ùå API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        generator = ContentGenerator(api_key)
        print("   ‚úÖ ContentGenerator —Å–æ–∑–¥–∞–Ω")

        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        lesson_content = generator.generate_lesson_content(
            lesson_data={"title": "–¢–µ—Å—Ç", "id": "test"},
            user_data={"name": "–¢–µ—Å—Ç", "communication_style": "friendly"},
            course_context={"course_name": "–¢–µ—Å—Ç –∫—É—Ä—Å"},
        )

        if lesson_content:
            print("   ‚úÖ –£—Ä–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            print(f"   üìÑ –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(lesson_content)}")
            if isinstance(lesson_content, dict) and "content" in lesson_content:
                content_length = (
                    len(lesson_content["content"]) if lesson_content["content"] else 0
                )
                print(f"   üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_length} —Å–∏–º–≤–æ–ª–æ–≤")
            return True
        else:
            print("   ‚ùå –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return False

    except Exception as e:
        error_str = str(e).lower()

        if "connection" in error_str:
            print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        elif "rate limit" in error_str:
            print("   ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        elif "authentication" in error_str:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ TEACHAI 2")
    print("=" * 30)

    tests = [
        ("API –∫–ª—é—á", test_api_key),
        ("OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_openai_connection),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è engine", test_engine_init),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞", test_lesson_generation),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        except Exception as e:
            print(f"   üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            results.append((test_name, False))
            print()

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("=" * 30)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")

    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1

    print(f"\n–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")

    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    elif passed >= len(results) // 2:
        print("‚ö†Ô∏è –ß–∞—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∞. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–≤–∞–ª—ã.")
    else:
        print("‚ùå –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")

    print("\nüéØ –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:")
    if passed == len(results):
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ teachai.ipynb")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    else:
        print("1. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á")
        print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç")


if __name__ == "__main__":
    main()
