"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging


class StudentProfileHandlers:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.
    """

    def __init__(self, core):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

        Args:
            core: –Ø–¥—Ä–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ StudentProfileCore
        """
        self.core = core
        self.state_manager = core.state_manager
        self.content_generator = core.content_generator
        self.assessment = core.assessment
        self.system_logger = core.system_logger
        self.utils = core.utils
        self.output_container = core.output_container
        self.logger = logging.getLogger(__name__)

        self.logger.info("StudentProfileHandlers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_action_buttons(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.

        Returns:
            widgets.HBox: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        try:
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
            continue_button = widgets.Button(
                description="üìö –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
                button_style="primary",
                layout=widgets.Layout(width="200px", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            menu_button = widgets.Button(
                description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                button_style="",
                layout=widgets.Layout(width="150px", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
            settings_button = widgets.Button(
                description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                button_style="info",
                layout=widgets.Layout(width="150px", margin="5px"),
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            continue_button.on_click(self._handle_continue_clicked)
            menu_button.on_click(self._handle_menu_clicked)
            settings_button.on_click(self._handle_settings_clicked)

            return widgets.HBox(
                [continue_button, menu_button, settings_button],
                layout=widgets.Layout(justify_content="center", margin="20px 0"),
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π: {str(e)}")
            return widgets.HBox([])

    def _handle_continue_clicked(self, button):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è (–ø—Ä–æ–±–ª–µ–º–∞ #99).

        Args:
            button: –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        """
        try:
            with self.output_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É...", "info"
                    )
                )

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É
                next_lesson_data = self.state_manager.get_next_lesson()

                if next_lesson_data and next_lesson_data[0]:
                    section_id, topic_id, lesson_id, lesson_data = next_lesson_data

                    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–∫—É
                    from interface import UserInterface

                    interface = UserInterface(
                        self.state_manager,
                        self.content_generator,
                        self.assessment,
                        self.system_logger,
                    )

                    clear_output(wait=True)
                    display(interface.show_lesson(lesson_id))

                else:
                    # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
                    display(
                        self.utils.create_styled_message(
                            "–í—Å–µ —É—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞...",
                            "success",
                        )
                    )

                    from interface import UserInterface

                    interface = UserInterface(
                        self.state_manager,
                        self.content_generator,
                        self.assessment,
                        self.system_logger,
                    )

                    clear_output(wait=True)
                    display(interface.show_course_selection())

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {str(e)}")
            with self.output_container:
                display(
                    self.utils.create_styled_message(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —É—Ä–æ–∫—É: {str(e)}", "incorrect"
                    )
                )

    def _handle_menu_clicked(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

        Args:
            button: –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        """
        try:
            with self.output_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é...", "info"
                    )
                )

                from interface import UserInterface

                interface = UserInterface(
                    self.state_manager,
                    self.content_generator,
                    self.assessment,
                    self.system_logger,
                )
                clear_output(wait=True)
                display(interface.show_main_menu())

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é: {str(e)}")
            with self.output_container:
                display(
                    self.utils.create_styled_message(f"–û—à–∏–±–∫–∞: {str(e)}", "incorrect")
                )

    def _handle_settings_clicked(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è.

        Args:
            button: –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        """
        try:
            with self.output_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è...", "info"
                    )
                )

                from interface import UserInterface

                interface = UserInterface(
                    self.state_manager,
                    self.content_generator,
                    self.assessment,
                    self.system_logger,
                )
                clear_output(wait=True)
                display(interface.show_initial_setup())

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {str(e)}")
            with self.output_container:
                display(
                    self.utils.create_styled_message(f"–û—à–∏–±–∫–∞: {str(e)}", "incorrect")
                )

    def create_navigation_buttons(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

        Returns:
            widgets.VBox: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """
        try:
            # –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º"
            stats_button = widgets.Button(
                description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–æ–≤",
                button_style="",
                layout=widgets.Layout(width="180px", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è"
            history_button = widgets.Button(
                description="üìà –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è",
                button_style="",
                layout=widgets.Layout(width="180px", margin="5px"),
            )

            # –ö–Ω–æ–ø–∫–∞ "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
            export_button = widgets.Button(
                description="üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                button_style="warning",
                layout=widgets.Layout(width="180px", margin="5px"),
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            stats_button.on_click(self._handle_stats_clicked)
            history_button.on_click(self._handle_history_clicked)
            export_button.on_click(self._handle_export_clicked)

            return widgets.VBox(
                [
                    widgets.HTML(value="<h4>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</h4>"),
                    widgets.HBox(
                        [stats_button, history_button, export_button],
                        layout=widgets.Layout(justify_content="center"),
                    ),
                ]
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}")
            return widgets.VBox([])

    def _handle_stats_clicked(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫—É—Ä—Å–∞–º.

        Args:
            button: –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        """
        try:
            with self.output_container:
                clear_output(wait=True)

                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                extended_stats = (
                    self.state_manager.learning_progress.get_extended_statistics()
                )

                stats_html = "<h3>üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>"

                if extended_stats:
                    for course_name, stats in extended_stats.items():
                        stats_html += f"""
                        <div style="margin: 10px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px;">
                            <h4>{course_name}</h4>
                            <p>–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {stats.get('completed', 0)}</p>
                            <p>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats.get('average_score', 0):.1f}%</p>
                            <p>–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: {stats.get('study_time', 0)} –º–∏–Ω</p>
                        </div>
                        """
                else:
                    stats_html += "<p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>"

                display(widgets.HTML(value=stats_html))

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            with self.output_container:
                display(
                    self.utils.create_styled_message(
                        f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", "incorrect"
                    )
                )

    def _handle_history_clicked(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è.

        Args:
            button: –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        """
        try:
            with self.output_container:
                clear_output(wait=True)

                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                activity_history = self.state_manager.get_activity_history()

                history_html = "<h3>üìà –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è</h3>"

                if activity_history:
                    for activity in activity_history[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
                        date = activity.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        action = activity.get("action", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                        details = activity.get("details", "")

                        history_html += f"""
                        <div style="margin: 8px 0; padding: 10px; background: #f8f9fa; border-radius: 5px;">
                            <strong>{date}</strong> - {action}
                            {f'<br><small>{details}</small>' if details else ''}
                        </div>
                        """
                else:
                    history_html += "<p>–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç–∞</p>"

                display(widgets.HTML(value=history_html))

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            with self.output_container:
                display(
                    self.utils.create_styled_message(
                        f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}", "incorrect"
                    )
                )

    def _handle_export_clicked(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.

        Args:
            button: –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        """
        try:
            with self.output_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...", "info"
                    )
                )

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                export_data = {
                    "user_profile": self.state_manager.user_profile.get_user_profile(),
                    "learning_progress": self.state_manager.learning_progress.get_learning_progress(),
                    "course_statistics": self.state_manager.learning_progress.get_detailed_course_statistics(),
                    "export_date": datetime.now().isoformat(),
                }

                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
                export_info = f"""
                <div style="padding: 20px; background: #e7f3ff; border-radius: 5px; border: 1px solid #b3d9ff;">
                    <h4>üíæ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É</h4>
                    <p><strong>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong></p>
                    <ul>
                        <li>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
                        <li>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è</li>
                        <li>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º</li>
                        <li>–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}</li>
                    </ul>
                    <p><em>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.</em></p>
                </div>
                """

                display(widgets.HTML(value=export_info))

                # –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                self.system_logger.info(
                    f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω: {export_data['user_profile'].get('name', 'Unknown')}"
                )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            with self.output_container:
                display(
                    self.utils.create_styled_message(
                        f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", "incorrect"
                    )
                )

    def get_handler_status(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

        Returns:
            dict: –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        """
        return {
            "handlers_initialized": True,
            "available_handlers": [
                "_handle_continue_clicked",
                "_handle_menu_clicked",
                "_handle_settings_clicked",
                "_handle_stats_clicked",
                "_handle_history_clicked",
                "_handle_export_clicked",
            ],
            "core_reference": self.core is not None,
            "utils_available": self.utils is not None,
        }
