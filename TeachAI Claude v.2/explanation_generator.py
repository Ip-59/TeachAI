"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–æ–≤.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–±–æ—Ä–æ–≤ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.

–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 50: –î–û–ë–ê–í–õ–ï–ù –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ generate_explanation –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è AttributeError
"""

from content_utils import BaseContentGenerator, ContentUtils


class ExplanationGenerator(BaseContentGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –¥–ª—è —É—Ä–æ–∫–æ–≤."""

    def __init__(self, api_key):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.

        Args:
            api_key (str): API –∫–ª—é—á OpenAI
        """
        super().__init__(api_key)
        self.logger.info("ExplanationGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def generate_explanation(
        self, lesson_data, lesson_content, communication_style="friendly"
    ):
        """
        –î–û–ë–ê–í–õ–ï–ù–û –≠–¢–ê–ü 50: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —É—Ä–æ–∫–∞

        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É: 'ExplanationGenerator' object has no attribute 'generate_explanation'
        –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –º–µ—Ç–æ–¥—É get_detailed_explanation()

        Args:
            lesson_data (dict): –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ —Å –∫–ª—é—á–∞–º–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            communication_style (str): –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

        Returns:
            str: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–∞

        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ lesson_data —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π
            course = lesson_data.get(
                "course_title", lesson_data.get("course_name", "–ö—É—Ä—Å")
            )
            section = lesson_data.get(
                "section_title",
                lesson_data.get(
                    "section_name", lesson_data.get("section_id", "–†–∞–∑–¥–µ–ª")
                ),
            )
            topic = lesson_data.get(
                "topic_title",
                lesson_data.get("topic_name", lesson_data.get("topic_id", "–¢–µ–º–∞")),
            )
            lesson = lesson_data.get(
                "title", lesson_data.get("lesson_title", lesson_data.get("id", "–£—Ä–æ–∫"))
            )

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.logger.info(
                f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è: {course} ‚Üí {section} ‚Üí {topic} ‚Üí {lesson}"
            )
            self.logger.debug(f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {communication_style}")
            self.logger.debug(
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ lesson_data: {list(lesson_data.keys())}"
            )

            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –º–µ—Ç–æ–¥—É get_detailed_explanation
            result = self.get_detailed_explanation(
                course=course,
                section=section,
                topic=topic,
                lesson=lesson,
                lesson_content=lesson_content,
                communication_style=communication_style,
            )

            self.logger.info("‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return result

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}"
            self.logger.error(f"‚ùå {error_msg}")
            self.logger.error(f"lesson_data: {lesson_data}")
            return f"‚ö†Ô∏è {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    def get_detailed_explanation(
        self,
        course,
        section,
        topic,
        lesson,
        lesson_content,
        communication_style="friendly",
    ):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Ä–æ–∫–∞.

        Args:
            course (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            section (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            lesson (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            communication_style (str): –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

        Returns:
            str: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ

        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        """
        try:
            lesson_title = str(lesson) if lesson is not None else "–£—Ä–æ–∫"

            prompt = self._build_explanation_prompt(
                course,
                section,
                topic,
                lesson_title,
                lesson_content,
                communication_style,
            )

            messages = [
                {
                    "role": "system",
                    "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ —ç–∫—Å–ø–µ—Ä—Ç –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏. "
                    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ, –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Ä–æ–∫–∞. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π —è—Å–Ω—ã–π —è–∑—ã–∫, –ø—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏ —Ç–∞–º, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.",
                },
                {"role": "user", "content": prompt},
            ]

            explanation = self.make_api_request(
                messages=messages, temperature=0.7, max_tokens=3000
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.save_debug_response(
                "detailed_explanation",
                prompt,
                explanation,
                {
                    "course": course,
                    "section": section,
                    "topic": topic,
                    "lesson": lesson_title,
                    "communication_style": communication_style,
                },
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é –∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é
            styled_explanation = self._style_explanation(
                explanation, lesson_title, communication_style
            )

            self.logger.info(
                f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_title}'"
            )
            return styled_explanation

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: {str(e)}")

    def _build_explanation_prompt(
        self, course, section, topic, lesson, lesson_content, communication_style
    ):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.

        Args:
            course (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            section (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            lesson (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            communication_style (str): –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

        Returns:
            str: –ü—Ä–æ–º–ø—Ç –¥–ª—è API
        """
        style_instructions = self._get_style_instructions(communication_style)

        return f"""
        –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.

        –ö–æ–Ω—Ç–µ–∫—Å—Ç:
        - –ö—É—Ä—Å: {course}
        - –†–∞–∑–¥–µ–ª: {section}
        - –¢–µ–º–∞: {topic}
        - –£—Ä–æ–∫: {lesson}

        –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:
        {lesson_content}

        {style_instructions}

        –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–ë–™–Ø–°–ù–ï–ù–ò–Æ:
        1. –ù–∞—á–Ω–∏ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–¥–µ–π —É—Ä–æ–∫–∞
        2. –†–∞–∑–±–µ—Ä–∏ –∫–∞–∂–¥—ã–π –≤–∞–∂–Ω—ã–π –∫–æ–Ω—Ü–µ–ø—Ç –¥–µ—Ç–∞–ª—å–Ω–æ
        3. –û–±—ä—è—Å–Ω–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–Ω—è—Ç–∏—è–º–∏
        4. –ü—Ä–∏–≤–µ–¥–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏
        5. –£–∫–∞–∂–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        6. –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å
        7. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–æ—Å–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª

        –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
        **–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:**
        (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏–¥–µ—è–º–∏ —É—Ä–æ–∫–∞)

        **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤:**
        1. **–ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ü–µ–ø—Ç:** –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        2. **–í—Ç–æ—Ä–æ–π –∫–æ–Ω—Ü–µ–ø—Ç:** –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        (–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–ø—Ç–∞)

        **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:**
        - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤ –≤ –¥–µ–π—Å—Ç–≤–∏–∏

        **–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:**
        - –ì–ª–∞–≤–Ω—ã–µ –∏–¥–µ–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å
        - –°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ç–∞–º–∏

        **–°–æ–≤–µ—Ç—ã –ø–æ –∏–∑—É—á–µ–Ω–∏—é:**
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª—É—á—à–µ–º—É —É—Å–≤–æ–µ–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        - –°–ø–æ—Å–æ–±—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π

        –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
        - –ò—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
        - –î–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: ```python –∫–æ–¥ –∑–¥–µ—Å—å ```
        - –°–æ–∑–¥–∞–≤–∞–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        - –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π

        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è.
        """

    def _get_style_instructions(self, communication_style):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –æ–±—â–µ–Ω–∏—è.

        Args:
            communication_style (str): –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

        Returns:
            str: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        """
        styles = {
            "formal": "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å. –ü—Ä–∏–º–µ–Ω—è–π —Ç–æ—á–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ.",
            "friendly": "–ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π —Å—Ç–∏–ª—å. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.",
            "casual": "–ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –ª–µ–≥–∫–∏–π —é–º–æ—Ä.",
            "brief": "–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ —á–µ—Ç–∫–∏–º. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö.",
        }
        return styles.get(communication_style, styles["friendly"])

    def _style_explanation(self, explanation, lesson_title, communication_style):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç HTML-—Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é –∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Jupyter.

        Args:
            explanation (str): –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            lesson_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            communication_style (str): –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

        Returns:
            str: HTML-—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown-–ø–æ–¥–æ–±–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ HTML
        html_explanation = self._convert_markdown_to_html(explanation)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_html = (
            """
        <h3 style="color: #1f2937; margin-bottom: 15px; border-bottom: 2px solid #22c55e; padding-bottom: 8px;">
            üìö –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–∞: """
            + lesson_title
            + """
        </h3>
        """
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        content_html = (
            '<div style="font-size: 14px; line-height: 1.4;">'
            + html_explanation
            + "</div>"
        )

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π HTML
        styled_explanation = title_html + content_html

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é —Ñ—Ä–∞–∑—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
        if communication_style == "friendly":
            styled_explanation += """
            <div style="margin-top: 15px; padding: 12px; background: #f0fdf4; border-radius: 8px; border-left: 4px solid #22c55e;">
                <p style="margin: 0; color: #15803d; font-weight: 500;">
                    üí° <strong>–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–º–æ–≥–ª–æ –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª!</strong>
                </p>
            </div>
            """
        elif communication_style == "formal":
            styled_explanation += """
            <div style="margin-top: 15px; padding: 12px; background: #f8fafc; border-radius: 8px; border-left: 4px solid #64748b;">
                <p style="margin: 0; color: #475569; font-weight: 500;">
                    <strong>–î–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —É—Ä–æ–∫–∞.</strong>
                </p>
            </div>
            """
        elif communication_style == "casual":
            styled_explanation += """
            <div style="margin-top: 15px; padding: 12px; background: #fef3c7; border-radius: 8px; border-left: 4px solid #f59e0b;">
                <p style="margin: 0; color: #92400e; font-weight: 500;">
                    üòä <strong>–í–æ—Ç –∏ –≤—Å–µ! –¢–µ–ø–µ—Ä—å –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω–µ–µ.</strong>
                </p>
            </div>
            """

        return styled_explanation

    def _convert_markdown_to_html(self, text):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ Markdown —ç–ª–µ–º–µ–Ω—Ç—ã –≤ HTML.

        Args:
            text (str): –¢–µ–∫—Å—Ç —Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π

        Returns:
            str: HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        import re

        # –°–æ–∑–¥–∞–µ–º CSS —Å—Ç–∏–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–∞–≤—ã—á–∫–∞–º–∏
        h4_style = "color: #374151; margin: 15px 0 8px 0; font-weight: 600;"
        strong_style = "color: #1f2937;"
        python_code_style = "background: #1f2937; color: #f1f5f9; padding: 15px; border-radius: 6px; margin: 8px 0; font-family: monospace; white-space: pre-wrap; overflow-x: auto; line-height: 1.3;"
        general_code_style = "background: #f8fafc; border: 1px solid #e2e8f0; padding: 15px; border-radius: 6px; margin: 8px 0; font-family: monospace; white-space: pre-wrap; overflow-x: auto; line-height: 1.3;"
        inline_code_style = "background: #f1f5f9; padding: 2px 4px; border-radius: 3px; font-family: monospace; color: #1e40af;"
        ol_style = "margin: 10px 0; padding-left: 25px;"
        ul_style = "margin: 10px 0; padding-left: 25px;"
        li_style = "margin: 5px 0; line-height: 1.4;"
        p_style = "margin: 8px 0; line-height: 1.4;"

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏)
        text = re.sub(
            r"^\*\*([^*]+)\*\*$",
            '<h4 style="' + h4_style + '">\\1</h4>',
            text,
            flags=re.MULTILINE,
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = re.sub(
            r"\*\*([^*]+)\*\*",
            '<strong style="' + strong_style + '">\\1</strong>',
            text,
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ Python
        text = re.sub(
            r"```python\n(.*?)\n```",
            '<div style="' + python_code_style + '">\\1</div>',
            text,
            flags=re.DOTALL,
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
        text = re.sub(
            r"```(.*?)```",
            '<div style="' + general_code_style + '">\\1</div>',
            text,
            flags=re.DOTALL,
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–æ–¥
        text = re.sub(
            r"`([^`]+)`", '<code style="' + inline_code_style + '">\\1</code>', text
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        lines = text.split("\n")
        in_numbered_list = False
        result_lines = []

        for line in lines:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            if re.match(r"^\d+\.\s+", line):
                if not in_numbered_list:
                    result_lines.append('<ol style="' + ol_style + '">')
                    in_numbered_list = True
                content = re.sub(r"^\d+\.\s+", "", line)
                result_lines.append('<li style="' + li_style + '">' + content + "</li>")
            else:
                if in_numbered_list:
                    result_lines.append("</ol>")
                    in_numbered_list = False
                if line.strip():
                    result_lines.append('<p style="' + p_style + '">' + line + "</p>")
                elif result_lines and not result_lines[-1].startswith("<"):
                    result_lines.append("<br>")

        if in_numbered_list:
            result_lines.append("</ol>")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        text = "\n".join(result_lines)
        text = re.sub(
            r"^-\s+(.+)$",
            '<li style="' + li_style + '">\\1</li>',
            text,
            flags=re.MULTILINE,
        )

        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –≤ ul
        text = re.sub(
            r"(<li[^>]*>.*?</li>(?:\s*<li[^>]*>.*?</li>)*)",
            '<ul style="' + ul_style + '">\\1</ul>',
            text,
            flags=re.DOTALL,
        )

        return text
