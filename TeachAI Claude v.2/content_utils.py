"""
–û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã, CSS —Å—Ç–∏–ª–∏, –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–¥–∞ –≤ BASE_CSS_STYLES
"""

import os
import json
import re
import logging
from datetime import datetime
from openai import OpenAI


class ContentUtils:
    """–ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."""

    # –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    COMMUNICATION_STYLES = {
        "formal": "–§–æ—Ä–º–∞–ª—å–Ω—ã–π, –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—É—á–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏.",
        "friendly": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø—Ä–æ—Å—Ç—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–æ–≥–∏–∏.",
        "casual": "–ù–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —é–º–æ—Ä–∞.",
        "brief": "–ö—Ä–∞—Ç–∫–∏–π –∏ —á–µ—Ç–∫–∏–π —Å—Ç–∏–ª—å, —Ñ–æ–∫—É—Å–∏—Ä—É—é—â–∏–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
    }

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–∞–∑–æ–≤—ã–µ CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ö–û–ù–¢–†–ê–°–¢–ù–´–ú –∫–æ–¥–æ–º
    BASE_CSS_STYLES = """
    <style>
        .content-container {
            font-family: Arial, sans-serif;
            font-size: 16px;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
        }
        .content-container h1 {
            font-size: 28px;
            margin-top: 15px;
            margin-bottom: 10px;
        }
        .content-container h2 {
            font-size: 24px;
            margin-top: 12px;
            margin-bottom: 8px;
        }
        .content-container h3 {
            font-size: 20px;
            margin-top: 10px;
            margin-bottom: 6px;
        }
        .content-container p {
            margin-bottom: 10px;
        }
        .content-container ul, .content-container ol {
            margin-bottom: 10px;
            padding-left: 30px;
        }
        .content-container li {
            margin-bottom: 4px;
        }
        .content-container code {
            font-family: 'Courier New', monospace;
            background-color: #1a1a1a;
            color: #00ff41;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 14px;
            font-weight: 600;
            border: 1px solid #333;
        }
        .content-container pre {
            font-family: 'Courier New', monospace;
            background-color: #1a1a1a;
            color: #00ff41;
            padding: 12px;
            border-radius: 8px;
            overflow-x: auto;
            margin: 10px 0;
            font-size: 14px;
            line-height: 1.05;
            border: 2px solid #333;
        }
        .content-container pre code {
            background: none;
            color: inherit;
            padding: 0;
            font-size: inherit;
            border: none;
        }
        .content-container strong, .content-container b {
            font-weight: bold;
        }
    </style>
    <div class="content-container">
    """

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: CSS –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    EXAMPLES_CSS_STYLES = """
    <style>
        .examples-container {
            font-family: Arial, sans-serif;
            font-size: 16px;
            line-height: 1.5;
        }
        .example {
            margin-bottom: 15px;
            padding: 12px;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .example h3, .example h4 {
            margin-top: 0;
            margin-bottom: 8px;
            line-height: 1.3;
        }
        .example p {
            margin-bottom: 8px;
            line-height: 1.4;
        }
        .example pre {
            background-color: #1a1a1a;
            color: #00ff41;
            padding: 10px;
            border-radius: 3px;
            overflow-x: auto;
            margin: 8px 0;
            line-height: 1.2;
            font-family: 'Courier New', monospace;
            border: 1px solid #333;
        }
    </style>
    <div class="examples-container">
    """

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: CSS –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    EXPLANATION_CSS_STYLES = """
    <style>
        .explanation-container {
            font-family: Arial, sans-serif;
            font-size: 16px;
            line-height: 1.5;
            padding: 15px;
            background-color: #f9f9f9;
            border-radius: 5px;
        }
        .explanation-container h1, .explanation-container h2, .explanation-container h3 {
            margin-top: 15px;
            margin-bottom: 8px;
            line-height: 1.3;
        }
        .explanation-container p {
            margin-bottom: 10px;
            line-height: 1.4;
        }
        .explanation-container ul, .explanation-container ol {
            margin-bottom: 10px;
            padding-left: 30px;
            line-height: 1.4;
        }
        .explanation-container li {
            margin-bottom: 4px;
        }
        .explanation-container code {
            background-color: #1a1a1a;
            color: #00ff41;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
            font-weight: 600;
        }
        .explanation-container pre {
            background-color: #1a1a1a;
            color: #00ff41;
            padding: 10px;
            overflow-x: auto;
            margin: 8px 0;
            line-height: 1.2;
            font-family: 'Courier New', monospace;
            border: 1px solid #333;
        }
    </style>
    <div class="explanation-container">
    """

    def get_style_prefix(self, communication_style, content_type="general"):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è.

        Args:
            communication_style (str): –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
            content_type (str): –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (examples, explanation, qa, general)

        Returns:
            str: HTML –ø—Ä–µ—Ñ–∏–∫—Å
        """
        if content_type == "examples":
            if communication_style == "formal":
                return "<p style='font-size: 16px; line-height: 1.4;'>–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.</p>"
            elif communication_style == "casual":
                return "<p style='font-size: 16px; line-height: 1.4;'>–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–µ–º–æ–π! üëç</p>"
            elif communication_style == "brief":
                return "<p style='font-size: 16px; line-height: 1.4;'>–ü—Ä–∏–º–µ—Ä—ã:</p>"
            else:  # friendly –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return "<p style='font-size: 16px; line-height: 1.4;'>–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —É—Ä–æ–∫–∞:</p>"

        elif content_type == "explanation":
            if communication_style == "formal":
                return "<p style='font-size: 16px; line-height: 1.4;'>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.</p>"
            elif communication_style == "casual":
                return "<p style='font-size: 16px; line-height: 1.4;'>–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ç–æ–π —Ç–µ–º—ã. üòä</p>"
            elif communication_style == "brief":
                return "<p style='font-size: 16px; line-height: 1.4;'>–ö—Ä–∞—Ç–∫–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:</p>"
            else:  # friendly –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return "<p style='font-size: 16px; line-height: 1.4;'>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ! –ù–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–µ–º—É.</p>"

        elif content_type == "qa":
            if communication_style == "formal":
                return "<p style='font-size: 16px; line-height: 1.4;'>–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</p>"
            elif communication_style == "casual":
                return "<p style='font-size: 16px; line-height: 1.4;'>–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç: üòä</p>"
            elif communication_style == "brief":
                return (
                    "<p style='font-size: 16px; line-height: 1.4;'>–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:</p>"
                )
            else:  # friendly –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return "<p style='font-size: 16px; line-height: 1.4;'>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –í–æ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç:</p>"

        return ""


class BaseContentGenerator:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

    def __init__(self, api_key, debug_dir="debug_responses"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.

        Args:
            api_key (str): API –∫–ª—é—á OpenAI
            debug_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        self.logger = logging.getLogger(self.__class__.__name__)
        self.api_key = api_key
        self.debug_dir = debug_dir

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
        try:
            self.client = OpenAI(api_key=self.api_key)
            self.logger.info(f"{self.__class__.__name__} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI: {str(e)}")
            raise

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.makedirs(self.debug_dir, exist_ok=True)

    def save_debug_response(
        self, response_type, prompt, response_content, additional_data=None
    ):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç API –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.

        Args:
            response_type (str): –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (course_plan, lesson, assessment, etc.)
            prompt (str): –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            response_content (str): –û—Ç–≤–µ—Ç –æ—Ç API
            additional_data (dict): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{response_type}_{timestamp}.json"
            filepath = os.path.join(self.debug_dir, filename)

            debug_data = {
                "timestamp": timestamp,
                "response_type": response_type,
                "prompt": prompt[:500] + "..."
                if len(prompt) > 500
                else prompt,  # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
                "response_content": response_content,
                "additional_data": additional_data or {},
            }

            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(debug_data, f, ensure_ascii=False, indent=2)

            self.logger.info(f"–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

    def clean_markdown_code_blocks(self, text):
        """
        –£–¥–∞–ª—è–µ—Ç markdown –º–µ—Ç–∫–∏ –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞.

        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –º–µ—Ç–∫–∏ ```html, ```python, ``` –∏ –ø–æ–¥–æ–±–Ω—ã–µ
            text = re.sub(r"```\w*\n?", "", text)
            text = re.sub(r"```", "", text)
            return text
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ markdown –º–µ—Ç–æ–∫: {str(e)}")
            return text

    def make_api_request(
        self, messages, temperature=0.7, max_tokens=3500, response_format=None
    ):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API —Å –µ–¥–∏–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.

        Args:
            messages (list): –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
            temperature (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            response_format (dict): –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, {"type": "json_object"})

        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç API

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ API
        """
        try:
            kwargs = {
                "model": "gpt-3.5-turbo-16k",
                "messages": messages,
                "temperature": temperature,
                "max_tokens": max_tokens,
            }

            if response_format:
                kwargs["response_format"] = response_format

            response = self.client.chat.completions.create(**kwargs)
            return response.choices[0].message.content

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {str(e)}")
            raise
