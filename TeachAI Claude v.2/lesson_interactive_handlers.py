"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É—Ä–æ–∫–æ–≤.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ–π—Å—Ç–≤–∏–π "–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å".

–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 30: –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –æ—à–∏–±–∫–∏ 'str' object has no attribute 'get' –≤ API –≤—ã–∑–æ–≤–∞—Ö
–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 34: –î–æ–±–∞–≤–ª–µ–Ω alias handle_question_button –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–ø—Ä–æ–±–ª–µ–º–∞ #141)
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
import traceback


class LessonInteractiveHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Ä–æ–∫–∞."""

    def __init__(self, content_generator, state_manager, utils, logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

        Args:
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            utils: –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            logger: –õ–æ–≥–≥–µ—Ä
        """
        self.content_generator = content_generator
        self.state_manager = state_manager
        self.utils = utils
        self.logger = logger

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.explain_container = None
        self.examples_container = None
        self.qa_container = None

        # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        self.current_lesson_content = None
        self.current_course_info = None
        self.current_lesson_id = None

    def set_lesson_data(self, lesson_content, course_info, lesson_id):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞.

        Args:
            lesson_content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            course_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
            lesson_id: ID —É—Ä–æ–∫–∞
        """
        self.current_lesson_content = lesson_content
        self.current_course_info = course_info
        self.current_lesson_id = lesson_id

    def handle_explain_button(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ".
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Ä–æ–∫–∞.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
            if not self.current_lesson_content or not self.current_course_info:
                self._show_error("–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return

            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.explain_container:
                self.explain_container.close()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            self.explain_container = widgets.VBox()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∑–µ–ª–µ–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            header = widgets.HTML(
                value=f"""
                <div style="background: linear-gradient(135deg, #4ade80, #22c55e);
                           padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                    <h3 style="color: white; margin: 0; font-size: 18px;">
                        üìö –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                    </h3>
                </div>
                """
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 30: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ API
            # –§–æ—Ä–º–∏—Ä—É–µ–º lesson_data –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
            lesson_data = {
                "title": self.current_course_info.get("lesson_title", "–£—Ä–æ–∫"),
                "id": self.current_course_info.get("lesson_id", ""),
                "description": "",
            }

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            if isinstance(self.current_lesson_content, dict):
                lesson_content = self.current_lesson_content.get(
                    "content", str(self.current_lesson_content)
                )
            else:
                lesson_content = str(self.current_lesson_content)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = self.current_course_info.get("user_profile", {})
            communication_style = user_profile.get("communication_style", "friendly")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ù–û–í–´–ô API
            explanation = self.content_generator.get_detailed_explanation(
                lesson_data=lesson_data,
                lesson_content=lesson_content,
                communication_style=communication_style,
            )

            # –ö–æ–Ω—Ç–µ–Ω—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            content = widgets.HTML(
                value=f"""
                <div style="background: #f0f9ff; padding: 20px; border-radius: 8px;
                           border-left: 4px solid #22c55e; margin-bottom: 15px;">
                    <div style="line-height: 1.6; color: #1f2937;">
                        {explanation}
                    </div>
                </div>
                """
            )

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button = widgets.Button(
                description="–ó–∞–∫—Ä—ã—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
                button_style="success",
                icon="check",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )
            close_button.on_click(self._close_explain_container)

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.explain_container.children = [header, content, close_button]
            display(self.explain_container)

            self.logger.info(
                f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}"
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}")
            self._show_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}")

    def handle_examples_button(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã".
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —É—Ä–æ–∫–∞.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
            if not self.current_lesson_content or not self.current_course_info:
                self._show_error("–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return

            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.examples_container:
                self.examples_container.close()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
            self.examples_container = widgets.VBox()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–∏–Ω–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            header = widgets.HTML(
                value=f"""
                <div style="background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                           padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                    <h3 style="color: white; margin: 0; font-size: 18px;">
                        üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
                    </h3>
                </div>
                """
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 30: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ API
            # –§–æ—Ä–º–∏—Ä—É–µ–º lesson_data –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
            lesson_data = {
                "title": self.current_course_info.get("lesson_title", "–£—Ä–æ–∫"),
                "id": self.current_course_info.get("lesson_id", ""),
                "description": "",
            }

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            if isinstance(self.current_lesson_content, dict):
                lesson_content = self.current_lesson_content.get(
                    "content", str(self.current_lesson_content)
                )
            else:
                lesson_content = str(self.current_lesson_content)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = self.current_course_info.get("user_profile", {})
            communication_style = user_profile.get("communication_style", "friendly")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞
            course_context = {
                "course_title": self.current_course_info.get("course_title", ""),
                "course_plan": self.current_course_info.get("course_plan", {}),
            }

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —á–µ—Ä–µ–∑ –ù–û–í–´–ô API
            examples = self.content_generator.generate_examples(
                lesson_data=lesson_data,
                lesson_content=lesson_content,
                communication_style=communication_style,
                course_context=course_context,
            )

            # –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–º–µ—Ä–æ–≤
            content = widgets.HTML(
                value=f"""
                <div style="background: #eff6ff; padding: 20px; border-radius: 8px;
                           border-left: 4px solid #3b82f6; margin-bottom: 15px;">
                    <div style="line-height: 1.6; color: #1f2937;">
                        {examples}
                    </div>
                </div>
                """
            )

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button = widgets.Button(
                description="–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–º–µ—Ä—ã",
                button_style="info",
                icon="check",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )
            close_button.on_click(self._close_examples_container)

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.examples_container.children = [header, content, close_button]
            display(self.examples_container)

            self.logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∏–º–µ—Ä–æ–≤: {str(e)}")
            self._show_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {str(e)}")

    def handle_qa_button(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å".
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
            if not self.current_lesson_content or not self.current_course_info:
                self._show_error("–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return

            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.qa_container:
                self.qa_container.close()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Q&A
            self.qa_container = widgets.VBox()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            header = widgets.HTML(
                value=f"""
                <div style="background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                           padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                    <h3 style="color: white; margin: 0; font-size: 18px;">
                        ‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞
                    </h3>
                </div>
                """
            )

            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
            question_input = widgets.Textarea(
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞...",
                layout=widgets.Layout(width="100%", height="80px"),
                description="–í–æ–ø—Ä–æ—Å:",
            )

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_button = widgets.Button(
                description="–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç",
                button_style="primary",
                icon="paper-plane",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            answer_output = widgets.Output()

            def on_submit_question(button):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞."""
                try:
                    user_question = question_input.value.strip()
                    if not user_question:
                        with answer_output:
                            clear_output(wait=True)
                            display(
                                widgets.HTML(
                                    value="""
                                <div style="background: #fef3c7; padding: 15px; border-radius: 8px;
                                           border-left: 4px solid #f59e0b;">
                                    <div style="color: #92400e;">
                                        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
                                    </div>
                                </div>
                                """
                                )
                            )
                        return

                    with answer_output:
                        clear_output(wait=True)
                        display(
                            widgets.HTML(
                                value="""
                            <div style="background: #dbeafe; padding: 15px; border-radius: 8px;
                                       border-left: 4px solid #3b82f6;">
                                <div style="color: #1e40af;">
                                    ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...
                                </div>
                            </div>
                            """
                            )
                        )

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ Q&A
                    lesson_data = {
                        "title": self.current_course_info.get("lesson_title", "–£—Ä–æ–∫"),
                        "id": self.current_course_info.get("lesson_id", ""),
                        "description": "",
                    }

                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
                    if isinstance(self.current_lesson_content, dict):
                        lesson_content = self.current_lesson_content.get(
                            "content", str(self.current_lesson_content)
                        )
                    else:
                        lesson_content = str(self.current_lesson_content)

                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_profile = self.current_course_info.get("user_profile", {})
                    communication_style = user_profile.get(
                        "communication_style", "friendly"
                    )

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ QA –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                    answer = self.content_generator.process_question_answer(
                        lesson_data=lesson_data,
                        lesson_content=lesson_content,
                        user_question=user_question,
                        communication_style=communication_style,
                    )

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                    with answer_output:
                        clear_output(wait=True)
                        display(
                            widgets.HTML(
                                value=f"""
                            <div style="background: #f0fdf4; padding: 20px; border-radius: 8px;
                                       border-left: 4px solid #22c55e; margin-bottom: 15px;">
                                <div style="color: #166534; font-weight: 500; margin-bottom: 10px;">
                                    üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:
                                </div>
                                <div style="line-height: 1.6; color: #1f2937;">
                                    {answer}
                                </div>
                            </div>
                            """
                            )
                        )

                    self.logger.info(
                        f"–û—Ç–≤–µ—á–µ–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}: {user_question[:50]}..."
                    )

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
                    with answer_output:
                        clear_output(wait=True)
                        display(
                            widgets.HTML(
                                value=f"""
                            <div style="background: #fee2e2; padding: 15px; border-radius: 8px;
                                       border-left: 4px solid #ef4444;">
                                <div style="color: #dc2626;">
                                    –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {str(e)}
                                </div>
                            </div>
                            """
                            )
                        )

            submit_button.on_click(on_submit_question)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button = widgets.Button(
                description="–ó–∞–∫—Ä—ã—Ç—å",
                button_style="warning",
                icon="times",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )
            close_button.on_click(self._close_qa_container)

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.qa_container.children = [
                header,
                question_input,
                submit_button,
                answer_output,
                close_button,
            ]
            display(self.qa_container)

            self.logger.info(
                f"–ü–æ–∫–∞–∑–∞–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Q&A –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}"
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ Q&A –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}")
            self._show_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 34: –î–æ–±–∞–≤–ª–µ–Ω alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å lesson_utils.py
    def handle_question_button(self, button):
        """
        Alias –¥–ª—è handle_qa_button –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å lesson_utils.py.

        Args:
            button: –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        """
        return self.handle_qa_button(button)

    def _close_explain_container(self, button):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±—ä—è—Å–Ω–µ–Ω–∏—è."""
        if self.explain_container:
            self.explain_container.close()
            self.explain_container = None

    def _close_examples_container(self, button):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤."""
        if self.examples_container:
            self.examples_container.close()
            self.examples_container = None

    def _close_qa_container(self, button):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤."""
        if self.qa_container:
            self.qa_container.close()
            self.qa_container = None

    def _show_error(self, error_message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

        Args:
            error_message (str): –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        """
        error_widget = widgets.HTML(
            value=f"""
            <div style="background: #fee2e2; padding: 15px; border-radius: 8px;
                       border-left: 4px solid #ef4444; margin: 15px 0;">
                <div style="color: #dc2626; font-weight: 500;">
                    {error_message}
                </div>
            </div>
            """
        )
        display(error_widget)

    def get_status(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

        Returns:
            dict: –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        """
        return {
            "has_lesson_data": bool(
                self.current_lesson_content and self.current_course_info
            ),
            "lesson_id": self.current_lesson_id,
            "active_containers": {
                "explain": bool(self.explain_container),
                "examples": bool(self.examples_container),
                "qa": bool(self.qa_container),
            },
        }
