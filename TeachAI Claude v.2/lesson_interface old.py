"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞, –ø—Ä–∏–º–µ—Ä–æ–≤, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ó–ê–í–ï–†–®–ï–ù–û: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
–ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–±–æ—á–∞—è –∫–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ" (–ø—Ä–æ–±–ª–µ–º–∞ #83)
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫—É—Ä—Å–∞ –≤ examples_generator –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ (–ø—Ä–æ–±–ª–µ–º–∞ #88)
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ #98 - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã get_course_plan() —á–µ—Ä–µ–∑ –Ω—É–∂–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
–ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–±—ã–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ pass)
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
import traceback
from interface_utils import InterfaceUtils, InterfaceState

# –ò–º–ø–æ—Ä—Ç demo_cells_integration —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from demo_cells_integration import DemoCellsIntegration

    DEMO_CELLS_AVAILABLE = True
except ImportError:
    logging.warning("–ú–æ–¥—É–ª—å demo_cells_integration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    DEMO_CELLS_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç control_tasks_generator —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from control_tasks_generator import ControlTasksGenerator

    CONTROL_TASKS_AVAILABLE = True
except ImportError:
    logging.warning("–ú–æ–¥—É–ª—å control_tasks_generator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    CONTROL_TASKS_AVAILABLE = False


class LessonInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

    def __init__(
        self, state_manager, content_generator, system_logger, assessment=None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Ä–æ–∫–æ–≤.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.state_manager = state_manager
        self.content_generator = content_generator
        self.system_logger = system_logger
        self.assessment = assessment
        self.logger = logging.getLogger(__name__)

        # –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.utils = InterfaceUtils()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.current_lesson_data = None
        self.current_lesson_content = None
        self.current_course_info = None
        self.current_lesson_id = None  # –î–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.explain_container = None
        self.examples_container = None
        self.qa_container = None

        # –ù–û–í–û–ï: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cached_lesson_content = None
        self.cached_lesson_title = None
        self.current_lesson_cache_key = None

        # –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–µ–º–æ-—è—á–µ–µ–∫
        self.demo_cells_integration = None
        if DEMO_CELLS_AVAILABLE:
            try:
                self.demo_cells_integration = DemoCellsIntegration()
                self.logger.info("Demo cells integration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ demo cells: {str(e)}")
                self.demo_cells_integration = None

        # –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        self.control_tasks_generator = None
        self.current_control_tasks = None
        if CONTROL_TASKS_AVAILABLE:
            try:
                # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ StateManager
                api_key = None
                if hasattr(state_manager, "state") and "api_key" in state_manager.state:
                    api_key = state_manager.state["api_key"]

                self.control_tasks_generator = ControlTasksGenerator(api_key)
                self.logger.info("Control tasks generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(
                    f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ control tasks generator: {str(e)}"
                )
                self.control_tasks_generator = None

        self.logger.info("LessonInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏")

    def show_lesson(self, section_id, topic_id, lesson_id):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            widgets.Widget: –í–∏–¥–∂–µ—Ç —Å —É—Ä–æ–∫–æ–º
        """
        try:
            self.logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–∞: {section_id}:{topic_id}:{lesson_id}")

            # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —É—Ä–æ–∫–∞
            lesson_cache_key = f"{section_id}:{topic_id}:{lesson_id}"
            if (
                self.current_lesson_cache_key == lesson_cache_key
                and self.cached_lesson_content
            ):
                self.logger.info("–£—Ä–æ–∫ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –∫—ç—à–∞")
                return self._create_cached_lesson_interface(
                    section_id, topic_id, lesson_id
                )

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = self.state_manager.get_user_profile()
            if not user_profile:
                return self._create_lesson_error_interface(
                    "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.",
                )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ get_course_plan()
            try:
                course_plan = self.state_manager.get_course_plan()
            except AttributeError:
                if hasattr(self.state_manager, "state_manager"):
                    course_plan = self.state_manager.state_manager.get_course_plan()
                else:
                    course_plan = {"title": "–ö—É—Ä—Å", "sections": []}

            if not course_plan:
                return self._create_lesson_error_interface(
                    "–ü–ª–∞–Ω –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "–ü–ª–∞–Ω –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.",
                )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            lesson_data = self.state_manager.get_lesson_data(
                section_id, topic_id, lesson_id
            )
            if not lesson_data:
                return self._create_lesson_error_interface(
                    "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    f"–£—Ä–æ–∫ {section_id}:{topic_id}:{lesson_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–∞–Ω–µ –∫—É—Ä—Å–∞.",
                )

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            (
                course_title,
                section_title,
                topic_title,
                lesson_title,
            ) = self._get_element_titles_from_plan(
                course_plan, section_id, topic_id, lesson_id
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            try:
                display(
                    self.utils.create_styled_message(
                        f"üéì –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ '{lesson_title}'...", "info"
                    )
                )

                lesson_content_data = self.content_generator.generate_lesson(
                    lesson_data=lesson_data,
                    communication_style=user_profile["communication_style"],
                )

                self.logger.info("–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞: {str(e)}")
                clear_output(wait=True)
                return self._create_lesson_error_interface(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ '{lesson_title}': {str(e)}",
                )

            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            clear_output(wait=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            self.current_lesson_data = lesson_data
            self.current_lesson_content = lesson_content_data["content"]
            self.current_lesson_id = (
                f"{section_id}:{topic_id}:{lesson_id}"  # –ü–æ–ª–Ω—ã–π ID —É—Ä–æ–∫–∞
            )
            self.current_course_info = {
                "course_title": course_title,
                "section_title": section_title,
                "topic_title": topic_title,
                "lesson_title": lesson_title,
                "section_id": section_id,
                "topic_id": topic_id,
                "lesson_id": lesson_id,
                "user_profile": user_profile,
                "course_plan": course_plan,  # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω –∫—É—Ä—Å–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            }

            # –ü–æ–ª—É—á–∞–µ–º ID –∫—É—Ä—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            course_id = self._get_course_id(course_plan)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            self.state_manager.update_learning_progress(
                course=course_id, section=section_id, topic=topic_id, lesson=lesson_id
            )

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Ä–æ–∫
            self.system_logger.log_lesson(
                course=course_title,
                section=section_title,
                topic=topic_title,
                lesson_title=lesson_content_data["title"],
                lesson_content=lesson_content_data["content"],
            )

            # –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–µ–º–æ-—è—á–µ–µ–∫
            try:
                if self.demo_cells_integration:
                    lesson_content_data[
                        "content"
                    ] = self.demo_cells_integration.integrate_demo_cells_in_lesson(
                        lesson_content_data["content"], lesson_id
                    )
                    self.logger.debug("–î–µ–º–æ-—è—á–µ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-—è—á–µ–µ–∫: {str(e)}")

            # –ù–û–í–û–ï: –ö—ç—à–∏—Ä—É–µ–º —É—Ä–æ–∫
            self.cached_lesson_content = lesson_content_data
            self.cached_lesson_title = lesson_title
            self.current_lesson_cache_key = lesson_cache_key

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞
            return self._create_lesson_interface(
                lesson_content_data,
                lesson_data,
                course_title,
                section_title,
                topic_title,
                lesson_title,
                section_id,
                topic_id,
                lesson_id,
                user_profile,
            )

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {str(e)}")
            self.logger.error(traceback.format_exc())
            return self._create_lesson_error_interface(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            )

    def _get_element_titles_from_plan(
        self, course_plan, section_id, topic_id, lesson_id
    ):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞.

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            tuple: (course_title, section_title, topic_title, lesson_title)
        """
        course_title = course_plan.get("title", "–ö—É—Ä—Å")
        section_title = "–†–∞–∑–¥–µ–ª"
        topic_title = "–¢–µ–º–∞"
        lesson_title = "–£—Ä–æ–∫"

        for section in course_plan.get("sections", []):
            if section.get("id") == section_id:
                section_title = section.get("title", section_title)
                for topic in section.get("topics", []):
                    if topic.get("id") == topic_id:
                        topic_title = topic.get("title", topic_title)
                        for lesson in topic.get("lessons", []):
                            if lesson.get("id") == lesson_id:
                                lesson_title = lesson.get("title", lesson_title)
                                break
                        break
                break

        return course_title, section_title, topic_title, lesson_title

    def _get_lesson_from_plan(self, course_plan, section_id, topic_id, lesson_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞.

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            dict: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        for section in course_plan.get("sections", []):
            if section.get("id") == section_id:
                for topic in section.get("topics", []):
                    if topic.get("id") == topic_id:
                        for lesson in topic.get("lessons", []):
                            if lesson.get("id") == lesson_id:
                                return lesson
        return None

    def _create_lesson_interface(
        self,
        lesson_content_data,
        lesson_data,
        course_title,
        section_title,
        topic_title,
        lesson_title,
        section_id,
        topic_id,
        lesson_id,
        user_profile,
    ):
        """
        –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–û: –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞ —Å –¥–µ–º–æ-—è—á–µ–π–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞
        lesson_header = self.utils.create_header(lesson_title)

        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        nav_info = self.utils.create_navigation_info(
            course_title,
            section_title,
            topic_title,
            lesson_title,
            f"‚è±Ô∏è {lesson_content_data.get('estimated_time', 30)} –º–∏–Ω.",
        )

        # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–º–æ-—è—á–µ–π–∫–∞–º–∏)
        lesson_content = widgets.HTML(
            value=f'<div style="{self.utils.STYLES["lesson_content"]}">{lesson_content_data["content"]}</div>'
        )

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.explain_container = widgets.Output()
        self.examples_container = widgets.Output()
        self.qa_container = widgets.Output()

        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        interactive_buttons = self._create_interactive_buttons()

        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        control_tasks_section = self._create_control_tasks_section(lesson_data)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_buttons = self._create_navigation_buttons(
            section_id, topic_id, lesson_id
        )

        # –°–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        lesson_components = [
            lesson_header,
            nav_info,
            lesson_content,
            interactive_buttons,
            self.explain_container,
            self.examples_container,
            self.qa_container,
        ]

        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if control_tasks_section:
            lesson_components.append(control_tasks_section)

        lesson_components.append(navigation_buttons)

        return widgets.VBox(lesson_components, layout=widgets.Layout(gap="15px"))

    def _create_interactive_buttons(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É—Ä–æ–∫–∞.

        Returns:
            widgets.HBox: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        # –ö–Ω–æ–ø–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        explain_button = widgets.Button(
            description="üí° –û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
            button_style="info",
            layout=widgets.Layout(width="200px", margin="5px"),
        )

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
        examples_button = widgets.Button(
            description="üîç –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã",
            button_style="success",
            layout=widgets.Layout(width="200px", margin="5px"),
        )

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        qa_button = widgets.Button(
            description="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            button_style="warning",
            layout=widgets.Layout(width="200px", margin="5px"),
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        explain_button.on_click(self._handle_explain_button)
        examples_button.on_click(self._handle_examples_button)
        qa_button.on_click(self._handle_qa_button)

        return widgets.HBox(
            [explain_button, examples_button, qa_button],
            layout=widgets.Layout(justify_content="center", margin="20px 0"),
        )

    def _create_navigation_buttons(self, section_id, topic_id, lesson_id):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

        Returns:
            widgets.HBox: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_button = widgets.Button(
            description="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º",
            button_style="",
            layout=widgets.Layout(width="200px", margin="10px"),
        )

        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∞
        test_button = widgets.Button(
            description="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
            button_style="primary",
            layout=widgets.Layout(width="200px", margin="10px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
        next_button = widgets.Button(
            description="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫",
            button_style="success",
            layout=widgets.Layout(width="200px", margin="10px"),
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        def go_back_to_courses(b):
            clear_output(wait=True)
            from interface import UserInterface

            interface = UserInterface(
                self.state_manager,
                self.content_generator,
                self.assessment,
                self.system_logger,
            )
            display(interface.show_course_selection())

        def start_assessment(b):
            clear_output(wait=True)
            from assessment_interface import AssessmentInterface

            assessment_ui = AssessmentInterface(
                self.state_manager, self.assessment, self.system_logger
            )
            display(
                assessment_ui.start_lesson_assessment(section_id, topic_id, lesson_id)
            )

        def go_to_next_lesson(b):
            try:
                next_lesson_data = self.state_manager.get_next_lesson()
                if next_lesson_data and next_lesson_data[0]:
                    next_section, next_topic, next_lesson, _ = next_lesson_data
                    clear_output(wait=True)
                    display(self.show_lesson(next_section, next_topic, next_lesson))
                else:
                    clear_output(wait=True)
                    from completion_interface import CompletionInterface

                    completion_ui = CompletionInterface(
                        self.state_manager,
                        self.system_logger,
                        self.content_generator,
                        self.assessment,
                    )
                    display(completion_ui.show_course_completion())
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É: {str(e)}")
                display(
                    self.utils.create_styled_message(f"–û—à–∏–±–∫–∞: {str(e)}", "incorrect")
                )

        back_button.on_click(go_back_to_courses)
        test_button.on_click(start_assessment)
        next_button.on_click(go_to_next_lesson)

        return widgets.HBox(
            [back_button, test_button, next_button],
            layout=widgets.Layout(justify_content="center", margin="30px 0"),
        )

    def _create_control_tasks_section(self, lesson_data):
        """
        –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–ª—è —É—Ä–æ–∫–∞.

        Args:
            lesson_data (dict): –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox –∏–ª–∏ None: –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        """
        if not self.control_tasks_generator:
            return None

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞
            control_tasks = self.control_tasks_generator.generate_lesson_control_tasks(
                lesson_data=lesson_data, lesson_content=self.current_lesson_content
            )

            if not control_tasks or len(control_tasks) == 0:
                return None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è
            self.current_control_tasks = control_tasks

            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            tasks_header = widgets.HTML(
                value=f"""
            <div style="background: linear-gradient(135deg, #9C27B0, #673AB7);
                       color: white; padding: 15px; border-radius: 8px; margin: 30px 0 15px 0;">
                <h3 style="margin: 0; font-size: 18px;">üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>
                <p style="margin: 5px 0 0 0; opacity: 0.9;">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ</p>
            </div>
            """
            )

            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            task_widgets = []
            for i, task in enumerate(control_tasks, 1):
                task_widget = self._create_control_task_widget(task, i)
                if task_widget:
                    task_widgets.append(task_widget)

            if not task_widgets:
                return None

            # –°–æ–±–∏—Ä–∞–µ–º —Å–µ–∫—Ü–∏—é
            tasks_section = widgets.VBox(
                [tasks_header] + task_widgets, layout=widgets.Layout(gap="10px")
            )

            return tasks_section

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {str(e)}")
            return None

    def _create_control_task_widget(self, task, task_number):
        """
        –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.

        Args:
            task (dict): –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            task_number (int): –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç –∑–∞–¥–∞–Ω–∏—è
        """
        try:
            from interactive_cell_widget import create_interactive_cell

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
            cell_widget = create_interactive_cell(
                title=f"–ó–∞–¥–∞–Ω–∏–µ {task_number}: {task['title']}",
                description=task["description"],
                initial_code=task["initial_code"],
                expected_result=task["expected_result"],
                check_type=task["check_type"],
                cell_id=f"control_task_{self.current_lesson_id}_{task_number}",
                max_attempts=task.get("max_attempts"),
                hints=task.get("hints", []),
                show_solution=task.get("show_solution", False),
            )

            return cell_widget

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML –≤–∏–¥–∂–µ—Ç —Å –∑–∞–¥–∞–Ω–∏–µ–º
            fallback_html = f"""
            <div style="border: 1px solid #ddd; padding: 15px; border-radius: 8px; background-color: #f9f9f9;">
                <h4>{task['title']}</h4>
                <p>{task['description']}</p>
                <pre style="background-color: #f1f1f1; padding: 10px; border-radius: 4px;">{task['initial_code']}</pre>
                <p><em>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —è—á–µ–π–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —è—á–µ–π–∫–µ.</em></p>
            </div>
            """
            return widgets.HTML(value=fallback_html)

    def _get_safe_course_title(self, course_plan):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞.

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞

        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
        """
        course_title = course_plan.get("title", "–ö—É—Ä—Å")
        if not course_title or course_title == "–ö—É—Ä—Å":
            learning_progress = self.state_manager.get_learning_progress()
            course_title = learning_progress.get("current_course", "–ö—É—Ä—Å Python")
        return course_title

    def _get_course_id(self, course_plan):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç ID –∫—É—Ä—Å–∞.

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞

        Returns:
            str: ID –∫—É—Ä—Å–∞
        """
        course_id = course_plan.get("id", course_plan.get("title", "unknown_course"))
        return course_id

    def _clear_lesson_cache(self):
        """
        –ù–û–í–û–ï: –û—á–∏—â–∞–µ—Ç –∫—ç—à —É—Ä–æ–∫–∞.
        """
        self.current_lesson_cache_key = None
        self.cached_lesson_content = None
        self.cached_lesson_title = None
        self.current_lesson_cache_key = None
        self.current_control_tasks = None  # –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        self.logger.debug("–ö—ç—à —É—Ä–æ–∫–∞ –æ—á–∏—â–µ–Ω")

    def _create_cached_lesson_interface(self, section_id, topic_id, lesson_id):
        """
        –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞ –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞ –∏–∑ –∫—ç—à–∞
        """
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            lesson_content_data = self.cached_lesson_content
            lesson_title = self.cached_lesson_title

            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–Ω–∏ –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ)
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ get_course_plan()
            try:
                course_plan = self.state_manager.get_course_plan()
            except AttributeError:
                if hasattr(self.state_manager, "state_manager"):
                    course_plan = self.state_manager.state_manager.get_course_plan()
                else:
                    course_plan = {"title": "–ö—É—Ä—Å", "sections": []}

            user_profile = self.state_manager.get_user_profile()
            course_title = self._get_safe_course_title(course_plan)
            section_title, topic_title, _ = self._get_element_titles_from_plan(
                course_plan, section_id, topic_id, lesson_id
            )
            lesson_data = self.state_manager.get_lesson_data(
                section_id, topic_id, lesson_id
            )

            return self._create_lesson_interface(
                lesson_content_data,
                lesson_data,
                course_title,
                section_title,
                topic_title,
                lesson_title,
                section_id,
                topic_id,
                lesson_id,
                user_profile,
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑ –∫—ç—à–∞: {str(e)}")
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —É—Ä–æ–∫
            self._clear_lesson_cache()
            return self.show_lesson(section_id, topic_id, lesson_id)

    def _create_lesson_error_interface(self, title, message):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏ —É—Ä–æ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º.

        Args:
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏
        """
        error_header = self.utils.create_header(f"‚ùå {title}")
        error_message = self.utils.create_styled_message(message, "incorrect")

        back_button = widgets.Button(
            description="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º",
            button_style="primary",
            layout=widgets.Layout(width="200px", margin="20px 0"),
        )

        def go_back(b):
            clear_output(wait=True)
            from interface import UserInterface

            interface = UserInterface(
                self.state_manager,
                self.content_generator,
                self.assessment,
                self.system_logger,
            )
            display(interface.show_course_selection())

        back_button.on_click(go_back)

        return widgets.VBox(
            [
                error_header,
                error_message,
                widgets.HBox(
                    [back_button], layout=widgets.Layout(justify_content="center")
                ),
            ],
            layout=widgets.Layout(gap="15px"),
        )

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–µ–∫ pass
    def _handle_explain_button(self, button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if not self.current_lesson_content or not self.current_course_info:
                with self.explain_container:
                    clear_output(wait=True)
                    display(
                        self.utils.create_styled_message(
                            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–∫.",
                            "incorrect",
                        )
                    )
                return

            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            with self.explain_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "üí° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...", "info"
                    )
                )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            course_info = self.current_course_info
            user_profile = course_info.get("user_profile", {})
            communication_style = user_profile.get("communication_style", "friendly")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            explanation = self.content_generator.get_detailed_explanation(
                course=course_info.get("course_title", "–ö—É—Ä—Å"),
                section=course_info.get("section_title", "–†–∞–∑–¥–µ–ª"),
                topic=course_info.get("topic_title", "–¢–µ–º–∞"),
                lesson=course_info.get("lesson_title", "–£—Ä–æ–∫"),
                lesson_content=self.current_lesson_content,
                communication_style=communication_style,
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button = widgets.Button(
                description="‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
                button_style="",
                layout=widgets.Layout(width="200px", margin="10px 0"),
            )

            def close_explanation(b):
                with self.explain_container:
                    clear_output(wait=True)

            close_button.on_click(close_explanation)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with self.explain_container:
                clear_output(wait=True)

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                explanation_header = widgets.HTML(
                    value=f"""
                <div style="background: linear-gradient(135deg, #4CAF50, #45a049);
                           color: white; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <h3 style="margin: 0; font-size: 18px;">üí° –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</h3>
                    <p style="margin: 5px 0 0 0; opacity: 0.9;">–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ç–µ–º—ã —É—Ä–æ–∫–∞</p>
                </div>
                """
                )

                # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
                explanation_content = widgets.HTML(
                    value=f'<div style="padding: 15px; background: #f8f9fa; border-radius: 8px; line-height: 1.6;">{explanation}</div>'
                )

                display(explanation_header)
                display(explanation_content)
                display(close_button)

            self.logger.info("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}")
            with self.explain_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}", "incorrect"
                    )
                )

    def _handle_examples_button(self, button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (
                not self.current_lesson_content
                or not self.current_course_info
                or not self.current_lesson_data
            ):
                with self.examples_container:
                    clear_output(wait=True)
                    display(
                        self.utils.create_styled_message(
                            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–∫.",
                            "incorrect",
                        )
                    )
                return

            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            with self.examples_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã...", "info"
                    )
                )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            course_info = self.current_course_info
            user_profile = course_info.get("user_profile", {})
            communication_style = user_profile.get("communication_style", "friendly")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞ –¥–ª—è examples_generator
            course_context = {
                "course_title": course_info.get("course_title", ""),
                "section_title": course_info.get("section_title", ""),
                "topic_title": course_info.get("topic_title", ""),
                "course_subject": course_info.get(
                    "course_title", ""
                ).lower(),  # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            }

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
            examples = self.content_generator.generate_examples(
                lesson_data=self.current_lesson_data,
                lesson_content=self.current_lesson_content,
                communication_style=communication_style,
                course_context=course_context,
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button = widgets.Button(
                description="‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–º–µ—Ä—ã",
                button_style="",
                layout=widgets.Layout(width="200px", margin="10px 0"),
            )

            def close_examples(b):
                with self.examples_container:
                    clear_output(wait=True)

            close_button.on_click(close_examples)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with self.examples_container:
                clear_output(wait=True)

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                examples_header = widgets.HTML(
                    value=f"""
                <div style="background: linear-gradient(135deg, #2196F3, #1976D2);
                           color: white; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <h3 style="margin: 0; font-size: 18px;">üîç –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã</h3>
                    <p style="margin: 5px 0 0 0; opacity: 0.9;">–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞</p>
                </div>
                """
                )

                # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
                examples_content = widgets.HTML(
                    value=f'<div style="padding: 15px; background: #f8f9fa; border-radius: 8px; line-height: 1.6;">{examples}</div>'
                )

                display(examples_header)
                display(examples_content)
                display(close_button)

            self.logger.info("–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {str(e)}")
            with self.examples_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {str(e)}", "incorrect"
                    )
                )

    def _handle_qa_button(self, button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if not self.current_lesson_content or not self.current_course_info:
                with self.qa_container:
                    clear_output(wait=True)
                    display(
                        self.utils.create_styled_message(
                            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–∫.",
                            "incorrect",
                        )
                    )
                return

            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤
            with self.qa_container:
                clear_output(wait=True)

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                qa_header = widgets.HTML(
                    value=f"""
                <div style="background: linear-gradient(135deg, #FF9800, #F57C00);
                           color: white; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <h3 style="margin: 0; font-size: 18px;">‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</h3>
                    <p style="margin: 5px 0 0 0; opacity: 0.9;">–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞</p>
                </div>
                """
                )

                # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
                question_input = widgets.Textarea(
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞...",
                    layout=widgets.Layout(
                        width="100%", height="100px", margin="10px 0"
                    ),
                )

                # –ö–Ω–æ–ø–∫–∏
                submit_button = widgets.Button(
                    description="‚úÖ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                    button_style="primary",
                    layout=widgets.Layout(width="150px", margin="5px"),
                )

                close_button = widgets.Button(
                    description="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                    button_style="",
                    layout=widgets.Layout(width="150px", margin="5px"),
                )

                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                answer_container = widgets.Output()

                def submit_question(b):
                    user_question = question_input.value.strip()

                    if not user_question:
                        with answer_container:
                            clear_output(wait=True)
                            display(
                                self.utils.create_styled_message(
                                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.", "warning"
                                )
                            )
                        return

                    try:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                        with answer_container:
                            clear_output(wait=True)
                            display(
                                self.utils.create_styled_message(
                                    "ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å...", "info"
                                )
                            )

                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                        course_info = self.current_course_info
                        user_profile = course_info.get("user_profile", {})
                        user_name = user_profile.get("name", "–°—Ç—É–¥–µ–Ω—Ç")
                        communication_style = user_profile.get(
                            "communication_style", "friendly"
                        )

                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        answer = self.content_generator.answer_question(
                            course=course_info.get("course_title", "–ö—É—Ä—Å"),
                            section=course_info.get("section_title", "–†–∞–∑–¥–µ–ª"),
                            topic=course_info.get("topic_title", "–¢–µ–º–∞"),
                            lesson=course_info.get("lesson_title", "–£—Ä–æ–∫"),
                            user_question=user_question,
                            lesson_content=self.current_lesson_content,
                            user_name=user_name,
                            communication_style=communication_style,
                        )

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                        with answer_container:
                            clear_output(wait=True)

                            question_display = widgets.HTML(
                                value=f"""
                            <div style="background: #e3f2fd; padding: 12px; border-radius: 6px; margin: 10px 0; border-left: 4px solid #2196F3;">
                                <strong>–í–∞—à –≤–æ–ø—Ä–æ—Å:</strong><br>
                                <em>{user_question}</em>
                            </div>
                            """
                            )

                            answer_display = widgets.HTML(
                                value=f"""
                            <div style="background: #f3e5f5; padding: 15px; border-radius: 6px; margin: 10px 0; border-left: 4px solid #9c27b0; line-height: 1.6;">
                                <strong>–û—Ç–≤–µ—Ç:</strong><br>
                                {answer}
                            </div>
                            """
                            )

                            display(question_display)
                            display(answer_display)

                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                        question_input.value = ""

                        self.logger.info(
                            f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {user_question[:50]}..."
                        )

                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
                        with answer_container:
                            clear_output(wait=True)
                            display(
                                self.utils.create_styled_message(
                                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
                                    "incorrect",
                                )
                            )

                def close_qa(b):
                    with self.qa_container:
                        clear_output(wait=True)

                submit_button.on_click(submit_question)
                close_button.on_click(close_qa)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                buttons_container = widgets.HBox(
                    [submit_button, close_button],
                    layout=widgets.Layout(justify_content="flex-start"),
                )

                display(qa_header)
                display(question_input)
                display(buttons_container)
                display(answer_container)

            self.logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")
            with self.qa_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}",
                        "incorrect",
                    )
                )
