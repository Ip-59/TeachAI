"""
–ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω–∏—è HTML-—Å–µ–∫—Ü–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è.
"""

import ipywidgets as widgets
import logging
from datetime import datetime


class StudentProfileSections:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML-—Å–µ–∫—Ü–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.
    """

    def __init__(self, core):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å–µ–∫—Ü–∏–π.

        Args:
            core: –Ø–¥—Ä–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ StudentProfileCore
        """
        self.core = core
        self.state_manager = core.state_manager
        self.logger = logging.getLogger(__name__)

        self.logger.info("StudentProfileSections –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_profile_info_section(self, progress_data):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ.

        Args:
            progress_data (dict): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        """
        try:
            user_data = self.core._get_user_profile_data()
            current_date = datetime.now().strftime("%d.%m.%Y %H:%M")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ
            current_course = progress_data.get("current_course", "–ù–µ –≤—ã–±—Ä–∞–Ω")
            current_section = progress_data.get("current_section", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            current_topic = progress_data.get("current_topic", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            current_lesson = progress_data.get("current_lesson", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

            profile_html = f"""
            <div style="
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 25px;
                border-radius: 15px;
                margin-bottom: 20px;
                box-shadow: 0 8px 20px rgba(0,0,0,0.1);
            ">
                <h2 style="margin: 0 0 20px 0; font-size: 28px;">
                    üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['name']}!
                </h2>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                    <div>
                        <h4 style="margin: 0 0 10px 0; color: #e3f2fd;">üìö –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å</h4>
                        <p style="margin: 0; font-size: 16px; font-weight: bold;">{current_course}</p>
                    </div>

                    <div>
                        <h4 style="margin: 0 0 10px 0; color: #e3f2fd;">üìñ –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫</h4>
                        <p style="margin: 0; font-size: 16px; font-weight: bold;">{current_lesson}</p>
                    </div>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                    <div>
                        <h4 style="margin: 0 0 10px 0; color: #e3f2fd;">üìÇ –†–∞–∑–¥–µ–ª</h4>
                        <p style="margin: 0; font-size: 14px;">{current_section}</p>
                    </div>

                    <div>
                        <h4 style="margin: 0 0 10px 0; color: #e3f2fd;">üéØ –¢–µ–º–∞</h4>
                        <p style="margin: 0; font-size: 14px;">{current_topic}</p>
                    </div>
                </div>

                <div style="
                    margin-top: 20px;
                    padding-top: 20px;
                    border-top: 1px solid rgba(255,255,255,0.3);
                    text-align: center;
                    font-size: 12px;
                    color: #e3f2fd;
                ">
                    –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_date}
                </div>
            </div>
            """

            return widgets.HTML(value=profile_html)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
            return widgets.HTML(value="<div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ</div>")

    def create_course_progress_section(self, detailed_stats):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ –∫—É—Ä—Å—É.

        Args:
            detailed_stats (dict): –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞
        """
        try:
            if not detailed_stats:
                return widgets.HTML(value="")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            completed_lessons = detailed_stats.get("completed_lessons", 0)
            total_lessons = detailed_stats.get("total_lessons", 1)
            progress_percentage = (
                (completed_lessons / total_lessons * 100) if total_lessons > 0 else 0
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if progress_percentage >= 80:
                progress_color = "#28a745"
                progress_text = "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            elif progress_percentage >= 50:
                progress_color = "#ffc107"
                progress_text = "–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –í—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!"
            elif progress_percentage >= 25:
                progress_color = "#17a2b8"
                progress_text = "–ù–µ–ø–ª–æ—Ö–æ–µ –Ω–∞—á–∞–ª–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!"
            else:
                progress_color = "#dc3545"
                progress_text = "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."

            progress_html = f"""
            <div style="
                background: white;
                padding: 25px;
                border-radius: 12px;
                border: 1px solid #e9ecef;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            ">
                <h3 style="margin: 0 0 25px 0; color: #495057;">üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É</h3>

                <div style="margin-bottom: 20px;">
                    <div style="
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-bottom: 10px;
                    ">
                        <span style="font-weight: bold; color: #495057;">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
                        <span style="font-weight: bold; color: {progress_color};">{progress_percentage:.1f}%</span>
                    </div>
                    <div style="
                        width: 100%;
                        height: 12px;
                        background-color: #e9ecef;
                        border-radius: 6px;
                        overflow: hidden;
                    ">
                        <div style="
                            width: {progress_percentage}%;
                            height: 100%;
                            background: linear-gradient(90deg, {progress_color}, {progress_color}80);
                            transition: width 0.3s ease;
                        "></div>
                    </div>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 20px;">
                    <div>
                        <div style="font-size: 28px; font-weight: bold; color: #28a745;">{completed_lessons}</div>
                        <div style="color: #6c757d; font-size: 14px;">–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤</div>
                    </div>

                    <div>
                        <div style="font-size: 28px; font-weight: bold; color: #6c757d;">{total_lessons}</div>
                        <div style="color: #6c757d; font-size: 14px;">–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤</div>
                    </div>

                    <div>
                        <div style="font-size: 28px; font-weight: bold; color: {progress_color};">{total_lessons - completed_lessons}</div>
                        <div style="color: #6c757d; font-size: 14px;">–û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤</div>
                    </div>
                </div>

                <div style="
                    margin-top: 20px;
                    padding: 15px;
                    background-color: #f8f9fa;
                    border-radius: 8px;
                    text-align: center;
                    color: {progress_color};
                    font-weight: bold;
                ">
                    {progress_text}
                </div>
            </div>
            """

            return widgets.HTML(value=progress_html)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")
            return widgets.HTML(value="<div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞</div>")

    def create_lessons_statistics_section(self, detailed_stats):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —É—Ä–æ–∫–∞–º –∏ —Ç–µ—Å—Ç–∞–º.

        Args:
            detailed_stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—Ä–æ–∫–∞–º
        """
        try:
            if not detailed_stats:
                return widgets.HTML(value="")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º
            average_score = detailed_stats.get("average_score", 0)
            highest_score = detailed_stats.get("highest_score", 0)
            lowest_score = detailed_stats.get("lowest_score", 0)
            total_assessments = detailed_stats.get("total_assessments", 0)
            lessons_passed = detailed_stats.get("completed_lessons", 0)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
            if average_score >= 80:
                score_color = "#28a745"
            elif average_score >= 60:
                score_color = "#ffc107"
            else:
                score_color = "#dc3545"

            lessons_html = f"""
            <div style="
                background: white;
                padding: 25px;
                border-radius: 12px;
                border: 1px solid #e9ecef;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            ">
                <h3 style="margin: 0 0 25px 0; color: #495057;">üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–∫–∞–º –∏ —Ç–µ—Å—Ç–∞–º</h3>

                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 20px;">

                    <div style="
                        background: linear-gradient(135deg, {score_color}20, {score_color}10);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid {score_color}40;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: {score_color};">
                            {average_score:.1f}%
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                    </div>

                    <div style="
                        background: linear-gradient(135deg, #28a74520, #28a74510);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid #28a74540;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: #28a745;">
                            {highest_score:.1f}%
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
                    </div>

                    <div style="
                        background: linear-gradient(135deg, #17a2b820, #17a2b810);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid #17a2b840;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: #17a2b8;">
                            {total_assessments}
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ</div>
                    </div>

                    <div style="
                        background: linear-gradient(135deg, #6f42c120, #6f42c110);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid #6f42c140;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: #6f42c1;">
                            {lessons_passed}
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–£—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                    </div>
                </div>
            </div>
            """

            return widgets.HTML(value=lessons_html)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–∫–æ–≤: {str(e)}")
            return widgets.HTML(value="<div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–∫–æ–≤</div>")

    def create_control_tasks_section(self, detailed_stats):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º.

        Args:
            detailed_stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        """
        try:
            if not detailed_stats:
                return widgets.HTML(value="")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
            completed_control_tasks = detailed_stats.get("completed_control_tasks", 0)
            total_control_tasks = detailed_stats.get("total_control_tasks", 0)

            if total_control_tasks > 0:
                completion_rate = (completed_control_tasks / total_control_tasks) * 100

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if completion_rate >= 80:
                    tasks_color = "#28a745"
                    tasks_message = "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏!"
                elif completion_rate >= 50:
                    tasks_color = "#ffc107"
                    tasks_message = "–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π."
                else:
                    tasks_color = "#dc3545"
                    tasks_message = (
                        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º."
                    )
            else:
                completion_rate = 0
                tasks_color = "#6c757d"
                tasks_message = "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã."

            control_tasks_html = f"""
            <div style="
                background: white;
                padding: 25px;
                border-radius: 12px;
                border: 1px solid #e9ecef;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            ">
                <h3 style="margin: 0 0 25px 0; color: #495057;">‚ö° –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>

                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px; margin-bottom: 20px;">
                    <div style="
                        background: linear-gradient(135deg, #28a74520, #28a74510);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid #28a74540;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: #28a745;">
                            {completed_control_tasks}
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
                    </div>

                    <div style="
                        background: linear-gradient(135deg, #6c757d20, #6c757d10);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid #6c757d40;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: #6c757d;">
                            {total_control_tasks}
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π</div>
                    </div>

                    <div style="
                        background: linear-gradient(135deg, {tasks_color}20, {tasks_color}10);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid {tasks_color}40;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: {tasks_color};">
                            {completion_rate:.1f}%
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                    </div>
                </div>

                <div style="
                    padding: 15px;
                    background-color: #f8f9fa;
                    border-radius: 8px;
                    border-left: 4px solid {tasks_color};
                    text-align: center;
                ">
                    <p style="margin: 0; color: #495057; font-weight: bold;">
                        {tasks_message}
                    </p>
                </div>
            </div>
            """

            return widgets.HTML(value=control_tasks_html)

        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {str(e)}"
            )
            return widgets.HTML(value="<div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</div>")

    def create_detailed_breakdown_section(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —É—Ä–æ–∫–∞–º (–ø—Ä–æ–±–ª–µ–º–∞ #97).

        Returns:
            widgets.VBox: –°–µ–∫—Ü–∏—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ —É—Ä–æ–∫–∞–º
        """
        try:
            header = widgets.HTML(
                value="<h3 style='margin: 0 0 20px 0; color: #495057;'>üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫–∞–º</h3>"
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É—Ä–æ–∫–∞–º
            lessons_data = self._get_lessons_breakdown_data()
            lessons_list = []

            for lesson_data in lessons_data:
                lesson_name = lesson_data.get("name", "–£—Ä–æ–∫ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                lesson_status = lesson_data.get("status", "not_started")
                lesson_score = lesson_data.get("score", 0)
                lesson_attempts_count = lesson_data.get(
                    "attempts_count", 0
                )  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
                tasks_completion = lesson_data.get("tasks_completion", "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if lesson_status == "completed":
                    status_color = "#28a745"
                    status_text = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω"
                elif lesson_status == "in_progress":
                    status_color = "#ffc107"
                    status_text = "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                else:
                    status_color = "#6c757d"
                    status_text = "‚è∏Ô∏è –ù–µ –Ω–∞—á–∞—Ç"

                # –¶–≤–µ—Ç –¥–ª—è –±–∞–ª–ª–∞
                if lesson_score >= 80:
                    score_color = "#28a745"
                elif lesson_score >= 60:
                    score_color = "#ffc107"
                else:
                    score_color = "#dc3545"

                lesson_html = f"""
                <div style="
                    background: white;
                    padding: 20px;
                    border-radius: 8px;
                    border: 1px solid #e9ecef;
                    margin-bottom: 10px;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                ">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="flex: 1;">
                            <div style="
                                font-size: 16px;
                                font-weight: bold;
                                color: #495057;
                                margin-bottom: 8px;
                            ">
                                {lesson_name}
                            </div>

                            <div style="display: flex; align-items: center; gap: 20px;">
                                <div style="
                                    display: inline-block;
                                    padding: 4px 8px;
                                    background-color: {status_color}20;
                                    color: {status_color};
                                    border-radius: 4px;
                                    font-size: 12px;
                                    font-weight: bold;
                                ">
                                    {status_text}
                                </div>

                                <div style="font-size: 12px; color: #6c757d;">
                                    –ü–æ–ø—ã—Ç–æ–∫: {lesson_attempts_count} | –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ: {tasks_completion}
                                </div>
                            </div>
                        </div>

                        <div style="text-align: right;">
                            <div style="
                                font-size: 20px;
                                font-weight: bold;
                                color: {score_color};
                                margin-bottom: 5px;
                            ">
                                {lesson_score:.1f}%
                            </div>
                            <div style="font-size: 12px; color: #6c757d;">
                                {'–ë–∞–ª–ª –∑–∞ —Ç–µ—Å—Ç' if lesson_score > 0 else '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω'}
                            </div>
                        </div>
                    </div>
                </div>
                """

                lessons_list.append(widgets.HTML(value=lesson_html))

            if not lessons_list:
                return widgets.VBox(
                    [header, widgets.HTML(value="<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>")]
                )

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É—Ä–æ–∫–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            lessons_container = widgets.VBox(
                lessons_list,
                layout=widgets.Layout(
                    max_height="400px",
                    overflow_y="auto",
                    border="1px solid #e9ecef",
                    border_radius="8px",
                    padding="10px",
                ),
            )

            return widgets.VBox([header, lessons_container])

        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏: {str(e)}"
            )
            return widgets.VBox(
                [widgets.HTML(value="<div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–∫–æ–≤</div>")]
            )

    def _get_lessons_breakdown_data(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —É—Ä–æ–∫–∞–º.

        Returns:
            list: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è breakdown –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–±–ª–µ–º–∞ #97)
            return self.state_manager.learning_progress.get_lessons_breakdown()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ breakdown –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return []
