"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤.
–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 37: –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ–±–ª–µ–º–∞ #154)
–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 38: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞ (–ø—Ä–æ–±–ª–µ–º–∞ #159)
–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 38: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è model –∏ client (–ø—Ä–æ–±–ª–µ–º–∞ #160)
"""

import json
import re
import random
import logging
from content_utils import BaseContentGenerator


class AssessmentGenerator(BaseContentGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π."""

    def __init__(self, api_key):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤.

        Args:
            api_key (str): API –∫–ª—é—á OpenAI
        """
        super().__init__(api_key)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 38: –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –∏ –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã API (–ø—Ä–æ–±–ª–µ–º–∞ #160)
        from openai import OpenAI

        self.client = OpenAI(api_key=api_key)
        self.model = "gpt-3.5-turbo-16k"

        self.logger.info("AssessmentGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def generate_assessment(
        self, course, section, topic, lesson, lesson_content, num_questions=5
    ):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –ø–æ —É—Ä–æ–∫—É.

        Args:
            course (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            section (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            lesson (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            num_questions (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤

        Returns:
            list: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤

        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
        """
        try:
            lesson_title = str(lesson) if lesson is not None else "–£—Ä–æ–∫"

            # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            clean_content = self._clean_html_for_analysis(lesson_content)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 38: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ–±–ª–µ–º–∞ #162)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            max_content_limit = 20000  # –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –¥–æ 20000 —Å–∏–º–≤–æ–ª–æ–≤
            content_for_questions = (
                clean_content[:max_content_limit]
                if len(clean_content) > max_content_limit
                else clean_content
            )

            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ —É—Ä–æ–∫–∞
            self.logger.info(f"=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–û–ü–†–û–°–û–í –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_title}' ===")
            self.logger.info(
                f"  üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(lesson_content)} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            self.logger.info(
                f"  üßπ –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ HTML: {len(clean_content)} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            self.logger.info(
                f"  üîó –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ API: {len(content_for_questions)} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            self.logger.info(
                f"  üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {(len(content_for_questions)/len(clean_content)*100):.1f}%"
            )
            self.logger.info(f"  üéØ –õ–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {max_content_limit} —Å–∏–º–≤–æ–ª–æ–≤")

            if len(content_for_questions) < 500:
                self.logger.warning(
                    f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—á–µ–Ω—å –º–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ ({len(content_for_questions)} —Å–∏–º–≤–æ–ª–æ–≤)"
                )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ API
            preview_length = min(300, len(content_for_questions))
            content_preview = (
                content_for_questions[:preview_length]
                .replace("\n", " ")
                .replace("\r", " ")
            )
            self.logger.info(f"  üëÄ –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è API: {content_preview}...")

            if lesson_content != content_for_questions:
                self.logger.info(
                    f"  ‚úÇÔ∏è  –ö–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω —Å {len(clean_content)} –¥–æ {len(content_for_questions)} —Å–∏–º–≤–æ–ª–æ–≤"
                )

            prompt = self._build_assessment_prompt(
                course,
                section,
                topic,
                lesson_title,
                content_for_questions,
                num_questions,
            )

            messages = [
                {
                    "role": "system",
                    "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞. –í—Å–µ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –§–æ—Ä–º–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤ —É—Ä–æ–∫–µ.",
                },
                {"role": "user", "content": prompt},
            ]

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞
            prompt_size = len(prompt)
            self.logger.info(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {prompt_size} —Å–∏–º–≤–æ–ª–æ–≤")

            response = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                max_tokens=2000,
                temperature=0.3,
                response_format={"type": "json_object"},
            )

            response_content = response.choices[0].message.content.strip()
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {len(response_content)} —Å–∏–º–≤–æ–ª–æ–≤")

            try:
                questions_data = json.loads(response_content)
            except json.JSONDecodeError as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
                self.logger.error(f"–û—Ç–≤–µ—Ç API: {response_content[:500]}...")
                raise Exception(f"API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {str(e)}")

            questions = self._extract_questions_from_response(questions_data)

            if not questions or len(questions) == 0:
                raise Exception("API –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")

            # –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            random.shuffle(questions)

            self.logger.info(
                f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_title}'"
            )
            return questions[:num_questions]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {str(e)}")
            raise

    def _clean_html_for_analysis(self, lesson_content):
        """
        –û—á–∏—â–∞–µ—Ç HTML —Ç–µ–≥–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

        Args:
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å HTML

        Returns:
            str: –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        """
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        clean_content = re.sub(r"<[^>]+>", " ", lesson_content)

        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        clean_content = re.sub(r"\s+", " ", clean_content).strip()

        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å –∞–Ω–∞–ª–∏–∑—É
        clean_content = re.sub(r"&[^;]+;", " ", clean_content)

        return clean_content

    def _extract_questions_from_response(self, questions_data):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ API.

        Args:
            questions_data (dict): –û—Ç–≤–µ—Ç API –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

        Returns:
            list: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –∫–ª—é—á "questions"
        if "questions" in questions_data:
            return questions_data["questions"]
        elif isinstance(questions_data, list):
            # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª —Å—Ä–∞–∑—É —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            return questions_data
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
            for key, value in questions_data.items():
                if isinstance(value, list) and len(value) > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ø—Ä–æ—Å—ã
                    if isinstance(value[0], dict) and (
                        "text" in value[0] or "question" in value[0]
                    ):
                        return value
            raise Exception("API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")

    def _build_assessment_prompt(
        self, course, section, topic, lesson_title, content_for_questions, num_questions
    ):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.

        Args:
            course (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            section (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            lesson_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            content_for_questions (str): –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            num_questions (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤

        Returns:
            str: –ü—Ä–æ–º–ø—Ç –¥–ª—è API
        """
        return f"""
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –°–¢–†–û–ì–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Ä–æ–∫–∞!

        –ù–∞ –æ—Å–Ω–æ–≤–µ –°–õ–ï–î–£–Æ–©–ï–ì–û —É—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–π {num_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï:

        –ö—É—Ä—Å: {course}
        –†–∞–∑–¥–µ–ª: {section}
        –¢–µ–º–∞: {topic}
        –£—Ä–æ–∫: {lesson_title}

        –ü–û–õ–ù–û–ï —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:
        {content_for_questions}

        –°–¢–†–û–ì–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
        1. ‚úÖ –í–°–ï –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!
        2. ‚úÖ –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –≤ –¥–∞–Ω–Ω–æ–º —É—Ä–æ–∫–µ
        3. ‚úÖ –ù–ï –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ —É—Ä–æ–∫–∞
        4. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —è–≤–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —É—Ä–æ–∫–∞
        5. ‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ç–µ–º–æ–π, –Ω–æ —á–µ—Ç–∫–æ –æ—Ç–ª–∏—á–∏–º—ã –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        6. ‚úÖ –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        7. ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, —Ç–µ—Ä–º–∏–Ω—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ —É—Ä–æ–∫–∞

        –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
        {{
            "questions": [
                {{
                    "text": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
                    "options": [
                        "A. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
                        "B. –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
                        "C. –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"
                    ],
                    "correct_option": "A"
                }}
            ]
        }}

        –í–ê–ñ–ù–û:
        - –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º —É—Ä–æ–∫–µ
        - –°—Ç—É–¥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —É—Ä–æ–∫–∞
        - –ö–∞–∂–¥—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–º, –Ω–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–º —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞

        –°–æ–∑–¥–∞–π –∏–º–µ–Ω–Ω–æ {num_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ.
        """

    def _randomize_answer_options(self, questions):
        """
        –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.

        Args:
            questions (list): –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤

        Returns:
            list: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        """
        randomized_questions = []

        for question in questions:
            if "options" not in question or "correct_option" not in question:
                # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                randomized_questions.append(question)
                continue

            options = question["options"][:]  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            correct_option = question["correct_option"]

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            correct_answer = None
            for option in options:
                if option.startswith(correct_option):
                    correct_answer = option
                    break

            if correct_answer is None:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                randomized_questions.append(question)
                continue

            # –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫
            random.shuffle(options)

            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            new_correct_option = None
            for i, option in enumerate(options):
                if option == correct_answer:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±—É–∫–≤—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
                    letter = chr(ord("A") + i)
                    options[i] = f"{letter}. {option.split('. ', 1)[1]}"
                    new_correct_option = letter
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±—É–∫–≤—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                    letter = chr(ord("A") + i)
                    options[i] = f"{letter}. {option.split('. ', 1)[1]}"

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            new_question = question.copy()
            new_question["options"] = options
            new_question["correct_option"] = new_correct_option

            randomized_questions.append(new_question)

        return randomized_questions
