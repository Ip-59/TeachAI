"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π –¥–ª—è TeachAI.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 52: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ HTML –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
import traceback
import html


class AssessmentInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π –ø–æ —É—Ä–æ–∫–∞–º."""

    def __init__(self, state_manager, content_generator, assessment, system_logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        """
        self.state_manager = state_manager
        self.content_generator = content_generator
        self.assessment = assessment
        self.system_logger = system_logger
        self.logger = logging.getLogger(__name__)

        # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.current_questions = []
        self.current_answers = []
        self.current_lesson_data = None

        self.logger.info("AssessmentInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def show_assessment(
        self,
        current_lesson_content=None,
        current_course_info=None,
        current_lesson_id=None,
        current_course=None,
        current_section=None,
        current_topic=None,
        current_lesson=None,
        **kwargs,
    ):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞.

        Args:
            current_lesson_content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            current_course_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
            current_lesson_id: ID —É—Ä–æ–∫–∞
            current_course: –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            current_section: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            current_topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            current_lesson: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            self.logger.info(f"üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞: {current_lesson_id}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            if current_course_info and isinstance(current_course_info, dict):
                course_title = (
                    current_course_info.get("course_title")
                    or current_course
                    or "Python"
                )
                section_title = (
                    current_course_info.get("section_title")
                    or current_section
                    or "–û—Å–Ω–æ–≤—ã"
                )
                topic_title = (
                    current_course_info.get("topic_title")
                    or current_topic
                    or "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
                )
                lesson_title = (
                    current_course_info.get("lesson_title")
                    or current_lesson
                    or "–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã"
                )
            else:
                course_title = current_course or "Python"
                section_title = current_section or "–û—Å–Ω–æ–≤—ã"
                topic_title = current_topic or "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
                lesson_title = current_lesson or "–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã"

            self.logger.info(
                f"üìö –ö—É—Ä—Å: {course_title}, –†–∞–∑–¥–µ–ª: {section_title}, –¢–µ–º–∞: {topic_title}, –£—Ä–æ–∫: {lesson_title}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞
            if not current_lesson_content:
                return self._create_error_interface(
                    "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞.",
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
            if not self.assessment:
                return self._create_error_interface(
                    "–ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "Assessment –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.current_lesson_data = {
                "lesson_content": current_lesson_content,
                "course_info": current_course_info,
                "lesson_id": current_lesson_id,
                "course": course_title,
                "section": section_title,
                "topic": topic_title,
                "lesson": lesson_title,
                "course_title": course_title,
                "section_title": section_title,
                "topic_title": topic_title,
                "lesson_title": lesson_title,
                "title": lesson_title,
            }

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            questions = self._generate_questions(current_lesson_content)
            if not questions:
                return self._create_error_interface(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                )

            self.current_questions = questions
            self.current_answers = [None] * len(questions)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return self._create_assessment_interface()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ show_assessment: {str(e)}")
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            return self._create_error_interface(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            )

    def _generate_questions(self, lesson_content):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            self.logger.info("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
            questions = self.content_generator.generate_assessment(
                lesson_data=self.current_lesson_data,
                lesson_content=lesson_content,
                questions_count=5,
            )

            self.logger.info(
                f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(questions) if questions else 0} –≤–æ–ø—Ä–æ—Å–æ–≤"
            )
            return questions

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")
            return []

    def _create_assessment_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            header = widgets.HTML(
                value=f"""
                <div style="background: linear-gradient(135deg, #10b981, #059669);
                           padding: 20px; border-radius: 12px; margin-bottom: 25px;
                           color: white; text-align: center;">
                    <h2 style="margin: 0; font-size: 24px;">üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π</h2>
                    <p style="margin: 10px 0 0 0; font-size: 16px;">
                        –£—Ä–æ–∫: {self.current_lesson_data.get('lesson', '–£—Ä–æ–∫')}
                    </p>
                </div>
            """
            )

            # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã (–±–µ–∑ HTML)
            questions_widgets = []

            for i, question in enumerate(self.current_questions):
                question_widget = self._create_simple_question_widget(question, i)
                questions_widgets.append(question_widget)

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_button = widgets.Button(
                description="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç",
                button_style="success",
                layout=widgets.Layout(width="200px", height="45px"),
            )

            submit_button.on_click(self._handle_test_submission)

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_container = widgets.Output()

            return widgets.VBox(
                [
                    header,
                    *questions_widgets,
                    widgets.HBox(
                        [submit_button], layout=widgets.Layout(justify_content="center")
                    ),
                    self.results_container,
                ],
                layout=widgets.Layout(margin="0 auto", max_width="800px"),
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}")
            return self._create_error_interface(
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            )

    def _create_simple_question_widget(self, question, index):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        question_text = question.get(
            "text", question.get("question", f"–í–æ–ø—Ä–æ—Å {index + 1}")
        )
        options = question.get("options", ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3"])

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
        question_header = widgets.HTML(
            value=f"""
            <div style="background: #f8fafc; border-left: 4px solid #10b981;
                       padding: 15px; margin: 20px 0 10px 0; border-radius: 8px;">
                <h4 style="margin: 0; color: #1f2937;">–í–æ–ø—Ä–æ—Å {index + 1}</h4>
                <p style="margin: 10px 0 0 0; color: #374151; font-size: 16px;">
                    {html.escape(question_text)}
                </p>
            </div>
        """
        )

        # –ü—Ä–æ—Å—Ç—ã–µ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
        radio_group = widgets.RadioButtons(
            options=options,
            layout=widgets.Layout(margin="0 0 20px 20px"),
            style={"description_width": "initial"},
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        def on_answer_change(change, question_index=index):
            if change["type"] == "change" and change["name"] == "value":
                self.current_answers[question_index] = change["new"]
                self.logger.debug(
                    f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_index + 1}: {change['new']}"
                )

        radio_group.observe(on_answer_change)

        return widgets.VBox([question_header, radio_group])

    def _handle_test_submission(self, button):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–∞."""
        try:
            with self.results_container:
                clear_output(wait=True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
                unanswered = [
                    i + 1
                    for i, answer in enumerate(self.current_answers)
                    if answer is None
                ]
                if unanswered:
                    display(
                        widgets.HTML(
                            value=f"""
                        <div style="color: #dc3545; background: #f8d7da; border: 1px solid #f5c6cb;
                                   padding: 15px; border-radius: 8px; margin: 20px 0;">
                            <strong>‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω</strong><br>
                            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –ù–µ –æ—Ç–≤–µ—á–µ–Ω—ã: {', '.join(map(str, unanswered))}
                        </div>
                    """
                        )
                    )
                    return

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                correct_answers = 0
                total_questions = len(self.current_questions)

                for i, (question, user_answer) in enumerate(
                    zip(self.current_questions, self.current_answers)
                ):
                    correct_answer = question.get(
                        "correct_answer", question.get("answer")
                    )
                    if user_answer == correct_answer:
                        correct_answers += 1

                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –æ—Ü–µ–Ω–∫—É
                score_percent = (correct_answers / total_questions) * 100
                is_passed = score_percent >= 70

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._show_results(
                    correct_answers, total_questions, score_percent, is_passed
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._save_assessment_result(score_percent, is_passed)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–∞: {str(e)}")
            with self.results_container:
                display(
                    widgets.HTML(
                        value=f"""
                    <div style="color: #dc3545; background: #f8d7da; border: 1px solid #f5c6cb;
                               padding: 15px; border-radius: 8px; margin: 20px 0;">
                        <strong>‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–∞</strong><br>
                        {html.escape(str(e))}
                    </div>
                """
                    )
                )

    def _show_results(self, correct_answers, total_questions, score_percent, is_passed):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        grade = (
            "–û—Ç–ª–∏—á–Ω–æ"
            if score_percent >= 90
            else "–•–æ—Ä–æ—à–æ"
            if score_percent >= 80
            else "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
            if is_passed
            else "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        )

        results_html = f"""
            <div style="background: linear-gradient(135deg, {'#10b981' if is_passed else '#dc2626'}, {'#059669' if is_passed else '#b91c1c'});
                       padding: 20px; border-radius: 12px; margin: 20px 0;
                       color: white; text-align: center;">
                <h2 style="margin: 0 0 15px 0; font-size: 24px;">
                    {'üéâ' if is_passed else 'üòû'} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                </h2>
                <div style="font-size: 18px; margin-bottom: 15px;">
                    <strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}</strong>
                </div>
                <div style="font-size: 20px; margin-bottom: 15px;">
                    <strong>–û—Ü–µ–Ω–∫–∞: {score_percent:.1f}% - {grade}</strong>
                </div>
                <p style="margin: 0; font-size: 16px;">
                    {f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ." if is_passed
                     else "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ."}
                </p>
            </div>
        """

        display(widgets.HTML(value=results_html))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self._show_action_buttons(is_passed)

    def _show_action_buttons(self, is_passed):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞."""
        buttons = []

        if is_passed:
            next_button = widgets.Button(
                description="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫",
                button_style="success",
                layout=widgets.Layout(width="180px", margin="5px"),
            )
            buttons.append(next_button)

        retry_button = widgets.Button(
            description="üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑",
            button_style="warning",
            layout=widgets.Layout(width="180px", margin="5px"),
        )

        lesson_button = widgets.Button(
            description="üìö –ö —É—Ä–æ–∫—É",
            button_style="info",
            layout=widgets.Layout(width="180px", margin="5px"),
        )

        buttons.extend([retry_button, lesson_button])

        def on_retry_click(b):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
            self.current_answers = [None] * len(self.current_questions)
            with self.results_container:
                clear_output(wait=True)
                display(widgets.HTML(value="<p>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞...</p>"))

        def on_lesson_click(b):
            with self.results_container:
                clear_output(wait=True)
                display(widgets.HTML(value="<p>–í–æ–∑–≤—Ä–∞—Ç –∫ —É—Ä–æ–∫—É...</p>"))

        retry_button.on_click(on_retry_click)
        lesson_button.on_click(on_lesson_click)

        display(widgets.HBox(buttons, layout=widgets.Layout(justify_content="center")))

    def _save_assessment_result(self, score, is_passed):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            if self.current_lesson_data and self.state_manager:
                lesson_id = self.current_lesson_data.get("lesson_id")
                self.state_manager.save_assessment_result(lesson_id, score, is_passed)
                self.logger.info(
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {score}% ({'–ø—Ä–æ–π–¥–µ–Ω' if is_passed else '–Ω–µ –ø—Ä–æ–π–¥–µ–Ω'})"
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")

    def _create_error_interface(self, title, message):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ."""
        return widgets.VBox(
            [
                widgets.HTML(
                    value=f"""
                <div style="color: #dc3545; background: #f8d7da; border: 1px solid #f5c6cb;
                           padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center;">
                    <h3 style="margin: 0 0 15px 0;">‚ö†Ô∏è {html.escape(title)}</h3>
                    <p style="margin: 0; font-size: 16px;">
                        {html.escape(message)}
                    </p>
                </div>
            """
                )
            ],
            layout=widgets.Layout(margin="0 auto", max_width="600px"),
        )
