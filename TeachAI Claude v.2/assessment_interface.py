"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π —É—á–∞—â–∏—Ö—Å—è.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 42: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É (–ø—Ä–æ–±–ª–µ–º–∞ #171)
–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 42: –†–µ—à–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã #173-#178 –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏
–û–°–ù–û–í–ê–ù–û –ù–ê: project knowledge - lesson_interface.py, state_manager.py
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
import html
from interface_utils import InterfaceUtils


class AssessmentInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π —É—á–∞—â–∏—Ö—Å—è."""

    def __init__(self, state_manager, assessment, system_logger, parent_facade=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            parent_facade: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞—Å–∞–¥ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ content_generator)
        """
        self.state_manager = state_manager
        self.assessment = assessment
        self.system_logger = system_logger
        self.parent_facade = parent_facade
        self.logger = logging.getLogger(__name__)

        # –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.utils = InterfaceUtils()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.current_questions = []
        self.current_answers = {}
        self.results_container = None

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ content_generator —á–µ—Ä–µ–∑ parent_facade
        if parent_facade and hasattr(parent_facade, "content_generator"):
            self.content_generator = parent_facade.content_generator
            self.logger.info(
                "AssessmentInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ content_generator"
            )
        else:
            self.content_generator = None
            self.logger.warning(
                "AssessmentInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ë–ï–ó –¥–æ—Å—Ç—É–ø–∞ –∫ content_generator"
            )

    def show_assessment(
        self,
        current_course,
        current_section,
        current_topic,
        current_lesson,
        current_lesson_content,
    ):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            current_course (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            current_section (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            current_topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            current_lesson (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            current_lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            self.logger.info("=== –û–¢–õ–ê–î–ö–ê ASSESSMENT ===")
            self.logger.info(
                f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞: {current_lesson}"
            )
            self.logger.info(
                f"–†–∞–∑–º–µ—Ä –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(current_lesson_content)} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            self.logger.info(
                f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {current_lesson_content[:200]}..."
            )

            # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –ø—Ä—è–º–æ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            content_debug = f"""
            <div style='background: #fff3cd; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px;'>
                <h4>üìñ –ö–û–ù–¢–ï–ù–¢ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:</h4>
                <p><strong>–£—Ä–æ–∫:</strong> {html.escape(current_lesson)}</p>
                <p><strong>–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</strong> {len(current_lesson_content)} —Å–∏–º–≤–æ–ª–æ–≤</p>
                <p><strong>–ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</strong> {html.escape(current_lesson_content[:150])}...</p>
            </div>
            """

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.current_lesson_info = {
                "course": current_course,
                "section": current_section,
                "topic": current_topic,
                "lesson": current_lesson,
                "content": current_lesson_content,
            }

            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∫—É—Ä—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            course_plan = self._get_course_plan()

            # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            nav_info = self.utils.create_navigation_info(
                current_course, current_section, current_topic, current_lesson
            )

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_header = widgets.HTML(
                value=f"""
                {content_debug}
                <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #4CAF50, #45a049);
                           color: white; border-radius: 10px; margin: 20px 0; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                    <h2 style="margin: 0; font-size: 24px;">üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π</h2>
                    <p style="margin: 10px 0 0 0; font-size: 16px;">–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ <strong>{html.escape(current_lesson)}</strong>, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.</p>
                </div>
                """
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.current_questions = self._generate_questions(current_lesson_content)

            if not self.current_questions:
                return self._create_error_widget(
                    "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤",
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤
            questions_interface = self._create_questions_interface()

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            submit_button = widgets.Button(
                description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç",
                button_style="primary",
                layout=widgets.Layout(
                    width="200px",
                    height="50px",
                    margin="30px auto 20px auto",
                    display="block",
                ),
            )

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_container = widgets.Output()

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            def handle_test_submission(b):
                self._handle_test_submission()

            submit_button.on_click(handle_test_submission)

            # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            assessment_widget = widgets.VBox(
                [
                    nav_info,
                    test_header,
                    questions_interface,
                    submit_button,
                    self.results_container,
                ]
            )

            return assessment_widget

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            return self._create_error_widget(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    def _generate_questions(self, lesson_content):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞."""
        try:
            self.logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            if not self.assessment:
                self.logger.error("Assessment –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return []

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ assessment –º–æ–¥—É–ª—å
            questions = self.assessment.generate_questions(
                course=self.current_lesson_info["course"],
                section=self.current_lesson_info["section"],
                topic=self.current_lesson_info["topic"],
                lesson=self.current_lesson_info["lesson"],
                lesson_content=lesson_content,
            )

            self.logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
            return questions

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")
            return []

    def _create_questions_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤."""
        if not self.current_questions:
            return widgets.HTML(
                value="<p style='color: red; text-align: center;'>–í–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>"
            )

        questions_widgets = []
        self.current_answers = {}

        for i, question in enumerate(self.current_questions):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
            question_title = widgets.HTML(
                value=f"<h4 style='margin: 15px 0 10px 0; color: #2c3e50; line-height: 1.4;'>–í–æ–ø—Ä–æ—Å {i+1}: {html.escape(question.get('text', question.get('question', '')))}</h4>"
            )

            # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = question.get("options", [])
            if not options:
                self.logger.warning(f"–í–æ–ø—Ä–æ—Å {i+1} –Ω–µ –∏–º–µ–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
                continue

            # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
            self.logger.info(f"=== –í–û–ü–†–û–° {i+1} ===")
            self.logger.info(f"–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞: {question}")
            self.logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {options}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ + –æ–±—Ä–µ–∑–∞–Ω–∏–µ –¥–ª—è RadioButtons
            clean_options = []
            for j, option in enumerate(options):
                clean_option = str(option).strip()

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                prefixes_to_remove = [
                    f"{chr(65+j)}. {chr(65+j)}.",  # A. A.
                    f"{chr(65+j)}.{chr(65+j)}.",  # A.A.
                    f"{chr(65+j)}. ",  # A.
                    f"{chr(65+j)}.",  # A.
                    "A. A.",
                    "B. B.",
                    "C. C.",
                    "D. D.",
                    "E. E.",  # –õ—é–±—ã–µ –¥–≤–æ–π–Ω—ã–µ
                    "A.A.",
                    "B.B.",
                    "C.C.",
                    "D.D.",
                    "E.E.",  # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
                    "A. ",
                    "B. ",
                    "C. ",
                    "D. ",
                    "E. ",  # –û–¥–∏–Ω–æ—á–Ω—ã–µ —Å –ø—Ä–æ–±–µ–ª–æ–º
                    "A.",
                    "B.",
                    "C.",
                    "D.",
                    "E.",  # –û–¥–∏–Ω–æ—á–Ω—ã–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞
                ]

                for prefix in prefixes_to_remove:
                    if clean_option.startswith(prefix):
                        clean_option = clean_option[len(prefix) :].strip()
                        break

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ –¥–ª—è RadioButtons (–æ–Ω–∏ —Ö—É–∂–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç)
                if len(clean_option) > 45:
                    clean_option = clean_option[:42] + "..."

                clean_options.append(clean_option)
                self.logger.info(f"  –í–∞—Ä–∏–∞–Ω—Ç {j}: '{option}' -> '{clean_option}'")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ RadioButtons, –Ω–æ –ë–ï–ó –æ–±—Ä–µ–∑–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            clean_options = []
            for j, option in enumerate(options):
                clean_option = str(option).strip()

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                prefixes_to_remove = [
                    f"{chr(65+j)}. {chr(65+j)}.",  # A. A.
                    f"{chr(65+j)}.{chr(65+j)}.",  # A.A.
                    f"{chr(65+j)}. ",  # A.
                    f"{chr(65+j)}.",  # A.
                    "A. A.",
                    "B. B.",
                    "C. C.",
                    "D. D.",
                    "E. E.",  # –õ—é–±—ã–µ –¥–≤–æ–π–Ω—ã–µ
                    "A.A.",
                    "B.B.",
                    "C.C.",
                    "D.D.",
                    "E.E.",  # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
                    "A. ",
                    "B. ",
                    "C. ",
                    "D. ",
                    "E. ",  # –û–¥–∏–Ω–æ—á–Ω—ã–µ —Å –ø—Ä–æ–±–µ–ª–æ–º
                    "A.",
                    "B.",
                    "C.",
                    "D.",
                    "E.",  # –û–¥–∏–Ω–æ—á–Ω—ã–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞
                ]

                for prefix in prefixes_to_remove:
                    if clean_option.startswith(prefix):
                        clean_option = clean_option[len(prefix) :].strip()
                        break

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –æ–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –ø—É—Å—Ç—å RadioButtons —Å–∞–º —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è
                clean_options.append(clean_option)

            self.logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {clean_options}")

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
            radio_options = [
                (f"{chr(65+j)}. {clean_option}", j)
                for j, clean_option in enumerate(clean_options)
            ]

            radio_buttons = widgets.RadioButtons(
                options=radio_options,
                layout=widgets.Layout(
                    margin="10px 0 15px 20px",
                    width="100%",  # –ü—É—Å—Ç—å –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É
                ),
                style={"description_width": "0px"},  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è description
                disabled=False,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
            self.current_answers[i] = radio_buttons

            questions_widgets.extend([question_title, radio_buttons])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–Ω–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(self.current_questions) - 1:
                separator = widgets.HTML(
                    value="<div style='height: 15px;'></div>"
                )  # –£–º–µ–Ω—å—à–∏–ª —Å 25px –¥–æ 15px
                questions_widgets.append(separator)

        return widgets.VBox(questions_widgets)

    def _handle_test_submission(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        try:
            self.logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞")

            # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_answers = []
            for i in range(len(self.current_questions)):
                if (
                    i in self.current_answers
                    and self.current_answers[i].value is not None
                ):
                    user_answers.append(self.current_answers[i].value)
                else:
                    user_answers.append(None)

            # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã + –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            self.logger.info(f"–°–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answers}")
            self.logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(self.current_questions)}")

            # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            answers_debug = []
            for i, answer in enumerate(user_answers):
                if answer is not None:
                    answers_debug.append(
                        f"–í–æ–ø—Ä–æ—Å {i+1}: –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {answer} ({chr(65+answer)})"
                    )
                    self.logger.info(
                        f"–í–æ–ø—Ä–æ—Å {i+1}: –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {answer} ({chr(65+answer)})"
                    )
                else:
                    answers_debug.append(f"–í–æ–ø—Ä–æ—Å {i+1}: –æ—Ç–≤–µ—Ç –ù–ï –≤—ã–±—Ä–∞–Ω")
                    self.logger.info(f"–í–æ–ø—Ä–æ—Å {i+1}: –æ—Ç–≤–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")

            answers_debug_html = f"""
            <div style='background: #e3f2fd; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px;'>
                <h4>üìù –°–û–ë–†–ê–ù–ù–´–ï –û–¢–í–ï–¢–´:</h4>
                {'<br>'.join(answers_debug)}
            </div>
            """

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–∞–Ω—ã –æ—Ç–≤–µ—Ç—ã
            unanswered = [
                i + 1 for i, answer in enumerate(user_answers) if answer is None
            ]
            if unanswered:
                with self.results_container:
                    clear_output(wait=True)
                    display(
                        widgets.HTML(
                            value=f"<p style='color: #856404; background-color: #fff3cd; padding: 10px; border-radius: 5px; margin: 10px 0;'>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã: {', '.join(map(str, unanswered))} –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞.</p>"
                        )
                    )
                return

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –±—É–∫–≤—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            user_answers_letters = []
            for answer in user_answers:
                if answer is not None:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ –±—É–∫–≤—É: 0 ‚Üí 'A', 1 ‚Üí 'B', –∏ —Ç.–¥.
                    user_answers_letters.append(chr(65 + answer))
                else:
                    user_answers_letters.append(None)

            self.logger.info(
                f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answers_letters}"
            )

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–æ–≤
            score, correct_answers, score_count = self.assessment.calculate_score(
                self.current_questions, user_answers_letters
            )

            # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä—è–º–æ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            debug_info = f"""
            {answers_debug_html}
            <div style='background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; font-family: monospace; font-size: 12px;'>
                <h4>üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ß–ò–°–õ–ï–ù–ò–Ø:</h4>
                <p><strong>–ò—Å—Ö–æ–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (—á–∏—Å–ª–∞):</strong> {user_answers}</p>
                <p><strong>–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–±—É–∫–≤—ã):</strong> {user_answers_letters}</p>
                <p><strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</strong> {correct_answers}</p>
                <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç calculate_score:</strong> score={score}, score_count={score_count}</p>
                <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</strong> {len(self.current_questions)}</p>
                <p><strong>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ:</strong> {score_count}/{len(self.current_questions)} = {score:.1f}%</p>
            </div>
            """

            # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            self.logger.info(f"=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ß–ò–°–õ–ï–ù–ò–Ø ===")
            self.logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answers}")
            self.logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {user_answers_letters}")
            self.logger.info(
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç calculate_score: score={score}, correct_answers={correct_answers}, score_count={score_count}"
            )
            self.logger.info(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {correct_answers}")
            self.logger.info(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏—è: score_count={score_count}")
            self.logger.info(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {score:.1f}%")

            self.logger.info(
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {score_count}/{len(self.current_questions)} ({score:.1f}%)"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._save_assessment_results(user_answers_letters, correct_answers, score)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            is_passed = score >= 70

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ lesson_id –¥–ª—è mark_lesson_completed
            lesson_id = self._get_current_lesson_id()
            if lesson_id and is_passed:
                self.state_manager.mark_lesson_completed(lesson_id)
                self.logger.info(
                    f"–£—Ä–æ–∫ {lesson_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å –æ—Ü–µ–Ω–∫–æ–π {score:.1f}%"
                )

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._show_results(
                score, score_count, len(self.current_questions), is_passed, debug_info
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {str(e)}")
            with self.results_container:
                clear_output(wait=True)
                display(
                    self._create_error_widget(
                        "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
                    )
                )

    def _get_current_lesson_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞."""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º lesson_id –∏–∑ lesson_interface –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if hasattr(self.parent_facade, "lesson_interface") and hasattr(
                self.parent_facade.lesson_interface, "current_course_info"
            ):
                course_info = self.parent_facade.lesson_interface.current_course_info
                lesson_id = course_info.get("lesson_id")
                if lesson_id:
                    self.logger.info(
                        f"–ò—Å–ø–æ–ª—å–∑—É–µ–º lesson_id –∏–∑ lesson_interface: {lesson_id}"
                    )
                    return lesson_id

            # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ state_manager
            next_lesson = self.state_manager.get_next_lesson()
            if next_lesson and len(next_lesson) >= 3:
                lesson_id = next_lesson[2]  # lesson_id –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
                self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º lesson_id –∏–∑ state_manager: {lesson_id}")
                return lesson_id

            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å lesson_id")
            return None

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è lesson_id: {str(e)}")
            return None

    def _save_assessment_results(self, user_answers_letters, correct_answers, score):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            assessment_data = {
                "course": self.current_lesson_info["course"],
                "section": self.current_lesson_info["section"],
                "topic": self.current_lesson_info["topic"],
                "lesson": self.current_lesson_info["lesson"],
                "questions": self.current_questions,
                "user_answers": user_answers_letters,
                "correct_answers": correct_answers,
                "score": score,
                "passed": score >= 70,
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            if hasattr(self.system_logger, "log_assessment"):
                self.system_logger.log_assessment(assessment_data)

            self.logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")

    def _show_results(
        self, score, score_count, total_questions, is_passed, debug_info=""
    ):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        with self.results_container:
            clear_output(wait=True)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if is_passed:
                style = "background: linear-gradient(135deg, #4CAF50, #45a049); color: white;"
                status_icon = "‚úÖ"
                status_text = "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω"
            else:
                style = "background: linear-gradient(135deg, #f44336, #d32f2f); color: white;"
                status_icon = "‚ùå"
                status_text = "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"

            # –í–∏–¥–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_widget = widgets.HTML(
                value=f"""
                <div style="text-align: center; padding: 30px; {style} border-radius: 10px;
                           margin: 20px 0; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                    <h2 style="margin: 0 0 20px 0;">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</h2>
                    <div style="font-size: 18px; margin: 15px 0;">
                        <strong>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score:.1f}%</strong>
                    </div>
                    <div style="font-size: 16px; margin: 10px 0;">
                        –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score_count} –∏–∑ {total_questions}
                    </div>
                    <div style="font-size: 18px; margin: 20px 0;">
                        <strong>–°—Ç–∞—Ç—É—Å: {status_icon} {status_text}</strong>
                    </div>
                    <div style="font-size: 14px; margin: 15px 0;">
                        –£—Ä–æ–∫: {html.escape(self.current_lesson_info['lesson'])}
                    </div>
                </div>
                {debug_info}
                """
            )

            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω)
            if is_passed:
                continue_button = widgets.Button(
                    description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
                    button_style="success",
                    layout=widgets.Layout(
                        width="250px",
                        height="50px",
                        margin="20px auto",
                        display="block",
                    ),
                )

                def handle_continue(b):
                    self._continue_to_next_lesson()

                continue_button.on_click(handle_continue)

                display(widgets.VBox([results_widget, continue_button]))
            else:
                # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                retry_button = widgets.Button(
                    description="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    button_style="info",
                    layout=widgets.Layout(
                        width="250px",
                        height="50px",
                        margin="20px auto",
                        display="block",
                    ),
                )

                def handle_retry(b):
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    assessment_widget = self.show_assessment(
                        self.current_lesson_info["course"],
                        self.current_lesson_info["section"],
                        self.current_lesson_info["topic"],
                        self.current_lesson_info["lesson"],
                        self.current_lesson_info["content"],
                    )
                    clear_output(wait=True)
                    display(assessment_widget)

                retry_button.on_click(handle_retry)

                display(widgets.VBox([results_widget, retry_button]))

    def _continue_to_next_lesson(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É."""
        try:
            self.logger.info("=== –ü–ï–†–ï–•–û–î –ö –°–õ–ï–î–£–Æ–©–ï–ú–£ –£–†–û–ö–£ ===")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å content_generator
            if not self.content_generator:
                self._show_content_generator_error()
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            next_lesson = self.state_manager.get_next_lesson()
            self.logger.info(f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –∏–∑ state_manager: {next_lesson}")

            if next_lesson and len(next_lesson) >= 3:
                section_id, topic_id, lesson_id = next_lesson[:3]
                self.logger.info(
                    f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–∫—É: {section_id}:{topic_id}:{lesson_id}"
                )

                # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–¢–¢–ï–†–ù –ò–ó PROJECT KNOWLEDGE:
                from lesson_interface import LessonInterface

                lesson_ui = LessonInterface(
                    state_manager=self.state_manager,
                    content_generator=self.content_generator,
                    system_logger=self.system_logger,
                    assessment=self.assessment,
                    parent_facade=self.parent_facade,
                )

                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫
                clear_output(wait=True)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
                lesson_widget = lesson_ui.show_lesson(section_id, topic_id, lesson_id)
                display(lesson_widget)

                self.logger.info(
                    f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É {section_id}:{topic_id}:{lesson_id}"
                )

            else:
                # –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                self._show_course_completion()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É: {str(e)}")
            self._show_transition_error(str(e))

    def _show_content_generator_error(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        error_widget = widgets.HTML(
            value="""
            <div style='color: red; padding: 20px; text-align: center; border: 1px solid red; border-radius: 8px; margin: 20px;'>
                <h3>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Ä–æ–∫—É</h3>
                <p>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.</p>
                <p><small>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AssessmentInterface —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å parent_facade –≤ interface_facade.py</small></p>
            </div>
            """
        )
        clear_output(wait=True)
        display(error_widget)
        self.logger.error("content_generator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞")

    def _show_course_completion(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫—É—Ä—Å–∞."""
        completion_message = widgets.HTML(
            value="""
            <div style="text-align: center; padding: 50px; background: linear-gradient(135deg, #FFD700, #FFA500);
                       color: white; border-radius: 15px; margin: 20px; box-shadow: 0 8px 16px rgba(0,0,0,0.2);">
                <h1 style="margin: 0 0 20px 0; font-size: 36px;">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>
                <h2 style="margin: 0 0 15px 0; font-size: 24px;">–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
                <p style="font-size: 18px; margin: 0;">–í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</p>
            </div>
            """
        )
        clear_output(wait=True)
        display(completion_message)
        self.logger.info("–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω - –≤—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")

    def _show_transition_error(self, error_msg):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É."""
        error_widget = widgets.HTML(
            value=f"""
            <div style='color: red; padding: 20px; text-align: center; border: 1px solid red; border-radius: 8px; margin: 20px;'>
                <h3>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É</h3>
                <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {html.escape(error_msg)}</p>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É.</p>
            </div>
            """
        )
        clear_output(wait=True)
        display(error_widget)

    def _create_error_widget(self, title, message):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏."""
        return widgets.HTML(
            value=f"""
            <div style='color: red; padding: 20px; text-align: center; border: 1px solid red; border-radius: 8px; margin: 20px;'>
                <h3>{html.escape(title)}</h3>
                <p>{html.escape(message)}</p>
            </div>
            """
        )

    def _get_course_plan(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω –∫—É—Ä—Å–∞ –∏–∑ state_manager."""
        try:
            if hasattr(self.state_manager, "get_course_plan"):
                return self.state_manager.get_course_plan()
            elif hasattr(self.state_manager, "course_data_manager"):
                return self.state_manager.course_data_manager.get_course_plan()
            elif (
                hasattr(self.state_manager, "state")
                and "course_plan" in self.state_manager.state
            ):
                return self.state_manager.state["course_plan"]
            else:
                return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞: {str(e)}")
            return None
