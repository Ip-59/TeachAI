"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —è—á–µ–µ–∫.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ Jupyter Notebook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã DemoCellWidget.
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from cell_widget_base import CellWidgetBase
from demo_cell_widget import DemoCellWidget, create_demo_cell
from IPython.display import display
import ipywidgets as widgets


def test_basic_demo_cell():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —è—á–µ–π–∫–∞"""
    print("=== –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ ===")

    code = """# –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
x = 10
y = 20
result = x + y
print(f"x = {x}")
print(f"y = {y}")
print(f"x + y = {result}")
result"""

    demo1 = DemoCellWidget(
        code=code,
        title="–ü—Ä–∏–º–µ—Ä 1: –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏",
        description="–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∏—Ö —Å–ª–æ–∂–µ–Ω–∏–µ",
    )

    display(demo1)
    return demo1


def test_loop_demo_cell():
    """–¢–µ—Å—Ç 2: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ü–∏–∫–ª–æ–º"""
    print("=== –¢–µ—Å—Ç 2: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ü–∏–∫–ª–æ–º ===")

    code = """# –ü—Ä–∏–º–µ—Ä —Å —Ü–∏–∫–ª–æ–º
numbers = [1, 2, 3, 4, 5]
squares = []

for num in numbers:
    square = num ** 2
    squares.append(square)
    print(f"{num}¬≤ = {square}")

print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫: {numbers}")
print(f"–ö–≤–∞–¥—Ä–∞—Ç—ã: {squares}")
squares"""

    demo2 = DemoCellWidget(
        code=code,
        title="–ü—Ä–∏–º–µ—Ä 2: –¶–∏–∫–ª –∏ —Å–ø–∏—Å–æ–∫",
        description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏–∫–ª–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏",
    )

    display(demo2)
    return demo2


def test_function_demo_cell():
    """–¢–µ—Å—Ç 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–µ–π"""
    print("=== –¢–µ—Å—Ç 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–µ–π ===")

    code = """# –ü—Ä–∏–º–µ—Ä —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
def factorial(n):
    if n <= 1:
        return 1
    return n * factorial(n - 1)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
numbers = [3, 5, 7]
for num in numbers:
    fact = factorial(num)
    print(f"–§–∞–∫—Ç–æ—Ä–∏–∞–ª {num}! = {fact}")

factorial(5)"""

    demo3 = DemoCellWidget(
        code=code,
        title="–ü—Ä–∏–º–µ—Ä 3: –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
        description="–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–∫—É—Ä—Å–∏–∏",
    )

    display(demo3)
    return demo3


def test_hidden_code_demo():
    """–¢–µ—Å—Ç 4: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ —Å–∫—Ä—ã—Ç—ã–º –∫–æ–¥–æ–º"""
    print("=== –¢–µ—Å—Ç 4: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ —Å–∫—Ä—ã—Ç—ã–º –∫–æ–¥–æ–º ===")

    code = """# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
import random

print("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª")
print("=" * 30)

for i in range(5):
    number = random.randint(1, 100)
    print(f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ {i+1}: {number}")

print("=" * 30)
print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")"""

    demo4 = DemoCellWidget(
        code=code,
        title="–ü—Ä–∏–º–µ—Ä 4: –°–∫—Ä—ã—Ç—ã–π –∫–æ–¥",
        description="–ö–æ–¥ —Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π",
        show_code=False,  # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )

    display(demo4)
    return demo4


def test_auto_run_demo():
    """–¢–µ—Å—Ç 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫"""
    print("=== –¢–µ—Å—Ç 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ ===")

    code = """# –ö–æ–¥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º
import datetime

now = datetime.datetime.now()
print("üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞:")
print(f"–î–∞—Ç–∞: {now.strftime('%d.%m.%Y')}")
print(f"–í—Ä–µ–º—è: {now.strftime('%H:%M:%S')}")
print(f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {now.strftime('%A')}")

now.strftime('%d.%m.%Y %H:%M:%S')"""

    demo5 = DemoCellWidget(
        code=code,
        title="–ü—Ä–∏–º–µ—Ä 5: –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫",
        description="–≠—Ç–æ—Ç –∫–æ–¥ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—á–µ–π–∫–∏",
        auto_run=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
    )

    display(demo5)
    return demo5


def test_error_demo():
    """–¢–µ—Å—Ç 6: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π"""
    print("=== –¢–µ—Å—Ç 6: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π ===")

    code = """# –ö–æ–¥ —Å –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π
numbers = [1, 2, 3, 4, 5]
print("–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫:", numbers)

# –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
print("–≠–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º 10:", numbers[10])  # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É

print("–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è")"""

    demo6 = DemoCellWidget(
        code=code,
        title="–ü—Ä–∏–º–µ—Ä 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
        description="–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )

    display(demo6)
    return demo6


def test_using_helper_function():
    """–¢–µ—Å—Ç 7: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∞"""
    print("=== –¢–µ—Å—Ç 7: –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ create_demo_cell ===")

    code = """# –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
person = {
    'name': '–ê–Ω–Ω–∞',
    'age': 25,
    'city': '–ú–æ—Å–∫–≤–∞',
    'profession': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'
}

print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ:")
for key, value in person.items():
    print(f"{key.capitalize()}: {value}")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
person['experience'] = 3
print(f"\\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {person['experience']} –≥–æ–¥–∞")
person"""

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–ø–æ–º–æ—â–Ω–∏–∫
    demo7 = create_demo_cell(
        code=code,
        title="–ü—Ä–∏–º–µ—Ä 7: –°–ª–æ–≤–∞—Ä–∏",
        description="–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ create_demo_cell",
    )

    display(demo7)
    return demo7


def test_dynamic_code_change():
    """–¢–µ—Å—Ç 8: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞"""
    print("=== –¢–µ—Å—Ç 8: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ ===")

    initial_code = """# –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥
print("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
print("–≠—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–¥–∞")"""

    demo8 = DemoCellWidget(
        code=initial_code,
        title="–ü—Ä–∏–º–µ—Ä 8: –ò–∑–º–µ–Ω—è–µ–º—ã–π –∫–æ–¥",
        description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ",
    )

    display(demo8)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    change_button = widgets.Button(description="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥", button_style="warning")

    def change_code(button):
        new_code = """# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
import math

radius = 5
area = math.pi * radius ** 2
circumference = 2 * math.pi * radius

print(f"–†–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏: {radius}")
print(f"–ü–ª–æ—â–∞–¥—å: {area:.2f}")
print(f"–î–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏: {circumference:.2f}")
area"""

        demo8.set_code(new_code)
        print("–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥.")

    change_button.on_click(change_code)
    display(change_button)

    return demo8


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —è—á–µ–µ–∫"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–• –Ø–ß–ï–ï–ö")
    print("=" * 50)

    demos = []

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    demos.append(test_basic_demo_cell())
    print()
    demos.append(test_loop_demo_cell())
    print()
    demos.append(test_function_demo_cell())
    print()
    demos.append(test_hidden_code_demo())
    print()
    demos.append(test_auto_run_demo())
    print()
    demos.append(test_error_demo())
    print()
    demos.append(test_using_helper_function())
    print()
    demos.append(test_dynamic_code_change())

    print("\n" + "=" * 50)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!")
    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —è—á–µ–π–∫–∞–º–∏ –≤—ã—à–µ:")
    print("- –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥'")
    print("- –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–¥–∞")
    print("- –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞")

    return demos


# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    demos = run_all_tests()
