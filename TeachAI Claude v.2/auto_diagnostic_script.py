#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã TeachAI 2
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python diagnose_teachai.py

–°–æ–∑–¥–∞–Ω–æ: 12 –∏—é–ª—è 2025
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import sys
import traceback
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


class TeachAIDiagnostic:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã TeachAI."""

    def __init__(self):
        self.results = {}
        self.issues = []
        self.recommendations = []

    def run_full_diagnostic(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."""
        print("üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TEACHAI 2")
        print("=" * 50)
        print(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print("=" * 50)

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞", self._test_env_file),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞", self._test_api_key),
            ("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI", self._test_openai_connection),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã", self._test_system_modules),
            ("–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Engine", self._test_engine_initialization),
            ("–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞", self._test_lesson_generation),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö", self._test_data_transfer),
            ("–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", self._test_assessment_interface),
        ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        for test_name, test_func in tests:
            print(f"\nüîé {test_name}...")
            try:
                result = test_func()
                self.results[test_name] = result
                if result["success"]:
                    print(f"   ‚úÖ –£–°–ü–ï–•")
                else:
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê: {result['error']}")
                    self.issues.append(f"{test_name}: {result['error']}")
                    if result.get("recommendation"):
                        self.recommendations.append(
                            f"{test_name}: {result['recommendation']}"
                        )
            except Exception as e:
                error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {str(e)}"
                print(f"   üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_msg}")
                self.results[test_name] = {"success": False, "error": error_msg}
                self.issues.append(f"{test_name}: {error_msg}")

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._print_final_report()

    def _test_env_file(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å .env —Ñ–∞–π–ª–∞."""
        try:
            if not os.path.exists(".env"):
                return {
                    "success": False,
                    "error": ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "recommendation": "–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å OPENAI_API_KEY=–≤–∞—à-–∫–ª—é—á",
                }

            with open(".env", "r") as f:
                content = f.read()

            if "OPENAI_API_KEY" not in content:
                return {
                    "success": False,
                    "error": "OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ",
                    "recommendation": "–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É OPENAI_API_KEY=–≤–∞—à-–∫–ª—é—á –≤ .env —Ñ–∞–π–ª",
                }

            return {"success": True, "details": ".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç API –∫–ª—é—á"}

        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {str(e)}",
                "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ .env —Ñ–∞–π–ª—É",
            }

    def _test_api_key(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É API –∫–ª—é—á–∞."""
        try:
            from dotenv import load_dotenv

            load_dotenv()

            api_key = os.getenv("OPENAI_API_KEY")

            if not api_key:
                return {
                    "success": False,
                    "error": "API –∫–ª—é—á –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ .env",
                    "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ –≤ .env: OPENAI_API_KEY=REMOVED...",
                }

            if not api_key.startswith("REMOVED"):
                return {
                    "success": False,
                    "error": "API –∫–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                    "recommendation": "API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'REMOVED'",
                }

            if len(api_key) < 20:
                return {
                    "success": False,
                    "error": "API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π",
                    "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª–Ω—ã–π –∫–ª—é—á",
                }

            return {
                "success": True,
                "details": f"API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)}, –Ω–∞—á–∞–ª–æ: {api_key[:10]}...)",
            }

        except ImportError:
            return {
                "success": False,
                "error": "–ú–æ–¥—É–ª—å python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "recommendation": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv",
            }
        except Exception as e:
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–∞: {str(e)}"}

    def _test_openai_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API."""
        try:
            from dotenv import load_dotenv

            load_dotenv()

            import openai

            openai.api_key = os.getenv("OPENAI_API_KEY")

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "Test"}],
                max_tokens=5,
            )

            return {"success": True, "details": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç"}

        except Exception as e:
            error_str = str(e).lower()

            if "authentication" in error_str or "api key" in error_str:
                recommendation = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –Ω–∞ https://platform.openai.com/api-keys"
            elif "rate limit" in error_str:
                recommendation = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            elif "connection" in error_str or "timeout" in error_str:
                recommendation = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å OpenAI: https://status.openai.com/"
            else:
                recommendation = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API"

            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ OpenAI API: {str(e)}",
                "recommendation": recommendation,
            }

    def _test_system_modules(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã."""
        required_modules = [
            "engine",
            "state_manager",
            "content_generator",
            "lesson_interface",
            "lesson_interactive_handlers",
            "assessment_interface",
            "interface_facade",
        ]

        missing_modules = []

        for module_name in required_modules:
            try:
                __import__(module_name)
            except ImportError as e:
                missing_modules.append(f"{module_name}: {str(e)}")

        if missing_modules:
            return {
                "success": False,
                "error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}",
                "recommendation": "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
            }

        return {
            "success": True,
            "details": f"–í—Å–µ {len(required_modules)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã",
        }

    def _test_engine_initialization(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞."""
        try:
            from engine import TeachAIEngine

            engine = TeachAIEngine()
            init_result = engine.initialize()

            if not init_result.get("success", False):
                return {
                    "success": False,
                    "error": f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è engine –Ω–µ—É–¥–∞—á–Ω–∞: {init_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            components_check = []
            if hasattr(engine, "config_manager") and engine.config_manager:
                components_check.append("config_manager")
            if hasattr(engine, "state_manager") and engine.state_manager:
                components_check.append("state_manager")
            if hasattr(engine, "content_generator") and engine.content_generator:
                components_check.append("content_generator")
            if hasattr(engine, "interface") and engine.interface:
                components_check.append("interface")

            return {
                "success": True,
                "details": f"Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(components_check)}",
            }

        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ engine: {str(e)}",
                "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            }

    def _test_lesson_generation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Ä–æ–∫–∞."""
        try:
            from content_generator import ContentGenerator
            from dotenv import load_dotenv

            load_dotenv()

            api_key = os.getenv("OPENAI_API_KEY")
            generator = ContentGenerator(api_key)

            # –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞
            lesson_content = generator.generate_lesson_content(
                lesson_data={"title": "–¢–µ—Å—Ç —É—Ä–æ–∫", "id": "test-lesson"},
                user_data={"name": "–¢–µ—Å—Ç", "communication_style": "friendly"},
                course_context={"course_name": "–¢–µ—Å—Ç –∫—É—Ä—Å"},
            )

            if not lesson_content:
                return {
                    "success": False,
                    "error": "generate_lesson_content –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ContentGenerator –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API",
                }

            return {
                "success": True,
                "details": f"–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–∏–ø: {type(lesson_content)}",
            }

        except Exception as e:
            error_str = str(e).lower()

            if "connection" in error_str:
                recommendation = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å OpenAI API"
            elif "rate limit" in error_str:
                recommendation = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"
            elif "authentication" in error_str:
                recommendation = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞"
            else:
                recommendation = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"

            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞: {str(e)}",
                "recommendation": recommendation,
            }

    def _test_data_transfer(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏."""
        try:
            from lesson_interactive_handlers import LessonInteractiveHandlers
            import logging

            # –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            mock_lesson_content = {"content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"}
            mock_course_info = {
                "course_title": "–¢–µ—Å—Ç –∫—É—Ä—Å",
                "lesson_title": "–¢–µ—Å—Ç —É—Ä–æ–∫",
                "facade": "mock_facade",
            }
            mock_lesson_id = "test-lesson"

            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handlers = LessonInteractiveHandlers(
                content_generator="mock_generator",
                state_manager="mock_state",
                utils="mock_utils",
                logger=logging.getLogger("test"),
            )

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö
            handlers.set_lesson_data(
                mock_lesson_content, mock_course_info, mock_lesson_id
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            data_ok = (
                handlers.current_lesson_content is not None
                and handlers.current_course_info is not None
                and handlers.current_lesson_id is not None
            )

            if not data_ok:
                return {
                    "success": False,
                    "error": "–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏",
                    "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç–æ–¥ set_lesson_data –≤ LessonInteractiveHandlers",
                }

            return {
                "success": True,
                "details": "–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            }

        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É LessonInteractiveHandlers",
            }

    def _test_assessment_interface(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            from assessment_interface import AssessmentInterface

            # –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–π assessment interface
            assessment = AssessmentInterface(
                state_manager="mock_state",
                assessment="mock_assessment",
                system_logger="mock_logger",
                parent_facade=None,  # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if not hasattr(assessment, "_diagnose_assessment_issue"):
                return {
                    "success": False,
                    "error": "AssessmentInterface –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                    "recommendation": "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è assessment_interface.py",
                }

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            diagnosis = assessment._diagnose_assessment_issue("test_content")

            if "–ü–†–û–ë–õ–ï–ú–´ –° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï–ú" in diagnosis:
                return {
                    "success": True,
                    "details": "AssessmentInterface –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π",
                    "warning": "–ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ parent_facade",
                }

            return {
                "success": True,
                "details": "AssessmentInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            }

        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è assessment interface: {str(e)}",
                "recommendation": "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è assessment_interface.py",
            }

    def _print_final_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 50)

        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.results)
        successful_tests = sum(
            1 for result in self.results.values() if result["success"]
        )

        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests - successful_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {successful_tests/total_tests*100:.1f}%")

        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        if successful_tests == total_tests:
            print("\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–ê!")
            print("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        elif successful_tests >= total_tests * 0.7:
            print("\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–ê")
            print("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
        else:
            print("\n‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –°–ï–†–¨–ï–ó–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
            print("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ.")

        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        if self.issues:
            print(f"\nüî• –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.issues)}):")
            for i, issue in enumerate(self.issues, 1):
                print(f"{i}. {issue}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.recommendations:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ ({len(self.recommendations)}):")
            for i, rec in enumerate(self.recommendations, 1):
                print(f"{i}. {rec}")

        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        if successful_tests == total_tests:
            print("1. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ teachai.ipynb –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        elif successful_tests >= total_tests * 0.7:
            print("1. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º")
            print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print("3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
        else:
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–∞ OpenAI")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ")
            print("3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
            print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")

        print("\n" + "=" * 50)
        print(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().strftime('%H:%M:%S')}")
        print("=" * 50)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    try:
        diagnostic = TeachAIDiagnostic()
        diagnostic.run_full_diagnostic()
    except KeyboardInterrupt:
        print("\n\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {str(e)}")
        print(f"Traceback: {traceback.format_exc()}")


if __name__ == "__main__":
    main()
