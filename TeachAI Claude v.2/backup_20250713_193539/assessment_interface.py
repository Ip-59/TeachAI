"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π —É—á–∞—â–∏—Ö—Å—è.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
import html
import traceback
from interface_utils import InterfaceUtils


class AssessmentInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π —É—á–∞—â–∏—Ö—Å—è."""

    def __init__(self, state_manager, assessment, system_logger, parent_facade=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            parent_facade: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞—Å–∞–¥
        """
        self.state_manager = state_manager
        self.assessment = assessment
        self.system_logger = system_logger
        self.parent_facade = parent_facade
        self.logger = logging.getLogger(__name__)

        # –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.utils = InterfaceUtils()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.current_questions = []
        self.current_answers = {}
        self.results_container = None

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ content_generator
        if parent_facade and hasattr(parent_facade, "content_generator"):
            self.content_generator = parent_facade.content_generator
            self.logger.info(
                "AssessmentInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ content_generator"
            )
        else:
            self.content_generator = None
            self.logger.warning(
                "AssessmentInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ë–ï–ó –¥–æ—Å—Ç—É–ø–∞ –∫ content_generator"
            )

    def _diagnose_assessment_issue(self, current_lesson_content):
        """
        –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

        Args:
            current_lesson_content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            str: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        """
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º content_generator
        if not self.content_generator:
            issues.append("content_generator = None (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º assessment –º–æ–¥—É–ª—å
        if not self.assessment:
            issues.append("assessment = None (–º–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        if not current_lesson_content:
            issues.append(f"current_lesson_content –ø—É—Å—Ç–æ–π: {current_lesson_content}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º state_manager
        if not self.state_manager:
            issues.append("state_manager = None (–º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º parent_facade
        if not self.parent_facade:
            issues.append("parent_facade = None (—Ñ–∞—Å–∞–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)")

        if issues:
            detailed_message = "–ü–†–û–ë–õ–ï–ú–´ –° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï–ú:\n" + "\n".join(
                f"‚Ä¢ {issue}" for issue in issues
            )
            detailed_message += "\n\n–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:"
            detailed_message += "\n‚Ä¢ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ engine.py)"
            detailed_message += "\n‚Ä¢ –£—Ä–æ–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á)"
            detailed_message += "\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π facade –≤ lesson_interface.py"
            detailed_message += "\n‚Ä¢ –û—à–∏–±–∫–∞ –≤ content_generator (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ OpenAI API)"
            return detailed_message

        return "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ"

    def show_assessment(
        self,
        current_course,
        current_section,
        current_topic,
        current_lesson,
        current_lesson_content,
    ):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            current_course (str): –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å
            current_section (str): –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
            current_topic (str): –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞
            current_lesson (str): –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫
            current_lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            self.logger.info(
                f"–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞: {current_lesson}"
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not self.content_generator or not self.assessment:
                error_details = self._diagnose_assessment_issue(current_lesson_content)
                self.logger.error(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {error_details}")
                return self._create_error_widget(
                    "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", error_details
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
            self.current_lesson_info = {
                "course": current_course,
                "section": current_section,
                "topic": current_topic,
                "lesson": current_lesson,
            }

            # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            nav_info = widgets.HTML(
                value=f"""
                <div style="background: #f8fafc; padding: 15px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #3b82f6;">
                    <h4 style="margin: 0 0 10px 0; color: #1e40af;">üìç –ù–∞–≤–∏–≥–∞—Ü–∏—è</h4>
                    <p style="margin: 5px 0; color: #64748b;"><strong>–ö—É—Ä—Å:</strong> {html.escape(str(current_course))}</p>
                    <p style="margin: 5px 0; color: #64748b;"><strong>–†–∞–∑–¥–µ–ª:</strong> {html.escape(str(current_section))}</p>
                    <p style="margin: 5px 0; color: #64748b;"><strong>–¢–µ–º–∞:</strong> {html.escape(str(current_topic))}</p>
                    <p style="margin: 5px 0; color: #64748b;"><strong>–£—Ä–æ–∫:</strong> {html.escape(str(current_lesson))}</p>
                </div>
                """
            )

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —É—Ä–æ–∫–∞
            content_debug = ""
            if self.logger.isEnabledFor(logging.DEBUG):
                content_type = type(current_lesson_content).__name__
                content_length = (
                    len(str(current_lesson_content)) if current_lesson_content else 0
                )
                content_debug = f"""
                <div style="background: #fef3c7; padding: 10px; border-radius: 5px; margin-bottom: 15px; font-size: 12px;">
                    <strong>DEBUG:</strong> –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ - —Ç–∏–ø: {content_type}, –¥–ª–∏–Ω–∞: {content_length}
                </div>
                """

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_header = widgets.HTML(
                value=f"""
                {content_debug}
                <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #4CAF50, #45a049);
                           color: white; border-radius: 10px; margin: 20px 0; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                    <h2 style="margin: 0; font-size: 24px;">üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π</h2>
                    <p style="margin: 10px 0 0 0; font-size: 16px;">–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ <strong>{html.escape(current_lesson)}</strong>, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.</p>
                </div>
                """
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            self.current_questions = self._generate_questions(current_lesson_content)

            if not self.current_questions:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                self.logger.error(error_msg)
                return self._create_error_widget("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤", error_msg)

            self.logger.info(
                f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.current_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤"
            )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤
            questions_interface = self._create_questions_interface()

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            submit_button = widgets.Button(
                description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç",
                button_style="primary",
                layout=widgets.Layout(
                    width="200px",
                    height="50px",
                    margin="30px auto 20px auto",
                    display="block",
                ),
            )

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_container = widgets.Output()

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            def handle_test_submission(b):
                self._handle_test_submission()

            submit_button.on_click(handle_test_submission)

            # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            assessment_widget = widgets.VBox(
                [
                    nav_info,
                    test_header,
                    questions_interface,
                    submit_button,
                    self.results_container,
                ]
            )

            self.logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return assessment_widget

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
            self.logger.error(f"{error_msg}\nTraceback: {traceback.format_exc()}")
            return self._create_error_widget("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_msg)

    def _generate_questions(self, lesson_content):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞.

        Args:
            lesson_content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            list: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        try:
            self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ assessment –º–æ–¥—É–ª—å")

            if not self.assessment:
                self.logger.error("Assessment –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return []

            if not hasattr(self.assessment, "generate_questions"):
                self.logger.error(
                    "Assessment –º–æ–¥—É–ª—å –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ generate_questions"
                )
                return []

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ assessment –º–æ–¥—É–ª—å
            questions = self.assessment.generate_questions(
                course=self.current_lesson_info["course"],
                section=self.current_lesson_info["section"],
                topic=self.current_lesson_info["topic"],
                lesson=self.current_lesson_info["lesson"],
                lesson_content=lesson_content,
            )

            if questions:
                self.logger.info(
                    f"Assessment –º–æ–¥—É–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤"
                )
                return questions
            else:
                self.logger.warning("Assessment –º–æ–¥—É–ª—å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
                return []

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ assessment: {str(e)}"
            self.logger.error(f"{error_msg}\nTraceback: {traceback.format_exc()}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if "Connection error" in str(e) or "connection" in str(e).lower():
                self.logger.error(
                    "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"
                )
            elif "timeout" in str(e).lower():
                self.logger.error(
                    "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"
                )
            elif "rate limit" in str(e).lower():
                self.logger.error(
                    "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"
                )

            return []

    def _create_questions_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤."""
        if not self.current_questions:
            return widgets.HTML(
                value="""
                <div style="background: #fef2f2; padding: 20px; border-radius: 8px; border-left: 4px solid #ef4444; text-align: center;">
                    <h4 style="color: #dc2626; margin-top: 0;">–í–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h4>
                    <p style="color: #991b1b;">–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</p>
                </div>
                """
            )

        questions_widgets = []
        self.current_answers = {}

        for i, question in enumerate(self.current_questions):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
            question_title = widgets.HTML(
                value=f"<h4 style='margin: 15px 0 10px 0; color: #2c3e50; line-height: 1.4;'>–í–æ–ø—Ä–æ—Å {i+1}: {html.escape(question.get('text', question.get('question', '')))}</h4>"
            )

            # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = question.get("options", [])
            if not options:
                self.logger.warning(f"–í–æ–ø—Ä–æ—Å {i+1} –Ω–µ –∏–º–µ–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
                continue

            # –û—á–∏—â–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
            clean_options = []
            for j, option in enumerate(options):
                clean_option = str(option).strip()

                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤–∏–¥–∞ A., B., etc.
                prefixes_to_remove = [
                    f"{chr(65+j)}. ",
                    f"{chr(65+j)}.",
                    "A. ",
                    "B. ",
                    "C. ",
                    "D. ",
                    "E. ",
                    "A.",
                    "B.",
                    "C.",
                    "D.",
                    "E.",
                ]

                for prefix in prefixes_to_remove:
                    if clean_option.startswith(prefix):
                        clean_option = clean_option[len(prefix) :].strip()
                        break

                clean_options.append(clean_option)

            # –°–æ–∑–¥–∞–µ–º RadioButtons –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            radio_buttons = widgets.RadioButtons(
                options=clean_options, layout=widgets.Layout(margin="10px 0 20px 20px")
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ RadioButtons –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
            self.current_answers[i] = radio_buttons

            questions_widgets.extend([question_title, radio_buttons])

        return widgets.VBox(questions_widgets)

    def _handle_test_submission(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–∞."""
        try:
            self.logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞")

            # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_answers = []
            for i, radio_buttons in self.current_answers.items():
                selected_value = radio_buttons.value
                if selected_value:
                    user_answers.append(selected_value)
                else:
                    user_answers.append(None)  # –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞

            self.logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(user_answers)} –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã
            if not self.assessment:
                error_msg = "Assessment –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤"
                self.logger.error(error_msg)
                with self.results_container:
                    clear_output()
                    display(
                        widgets.HTML(
                            value=f"""
                        <div style="background: #fef2f2; padding: 15px; border-radius: 8px; border-left: 4px solid #ef4444;">
                            <h4 style="color: #dc2626; margin-top: 0;">–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤</h4>
                            <div style="color: #991b1b;">{error_msg}</div>
                        </div>
                        """
                        )
                    )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            results = self.assessment.check_answers(
                self.current_questions, user_answers
            )
            self._display_results(results, user_answers)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–∞: {str(e)}"
            self.logger.error(f"{error_msg}\nTraceback: {traceback.format_exc()}")

            with self.results_container:
                clear_output()
                display(
                    widgets.HTML(
                        value=f"""
                    <div style="background: #fef2f2; padding: 15px; border-radius: 8px; border-left: 4px solid #ef4444;">
                        <h4 style="color: #dc2626; margin-top: 0;">–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–∞</h4>
                        <div style="color: #991b1b;">{error_msg}</div>
                    </div>
                    """
                    )
                )

    def _display_results(self, results, user_answers):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            score = results.get("score", 0)
            total = results.get("total", len(self.current_questions))
            percentage = (score / total * 100) if total > 0 else 0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if percentage >= 80:
                color = "#22c55e"  # –ó–µ–ª–µ–Ω—ã–π
                status = "–û—Ç–ª–∏—á–Ω–æ!"
            elif percentage >= 60:
                color = "#f59e0b"  # –ñ–µ–ª—Ç—ã–π
                status = "–•–æ—Ä–æ—à–æ!"
            else:
                color = "#ef4444"  # –ö—Ä–∞—Å–Ω—ã–π
                status = "–ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"

            results_html = f"""
            <div style="background: white; padding: 20px; border-radius: 10px; margin-top: 20px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                <h3 style="text-align: center; color: {color}; margin-top: 0;">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                <div style="text-align: center; font-size: 24px; margin: 20px 0;">
                    <span style="color: {color}; font-weight: bold;">{score}/{total}</span>
                    <span style="color: #64748b;"> ({percentage:.1f}%)</span>
                </div>
                <div style="text-align: center; color: {color}; font-size: 18px; font-weight: bold; margin-bottom: 20px;">
                    {status}
                </div>
            </div>
            """

            with self.results_container:
                clear_output()
                display(widgets.HTML(value=results_html))

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.logger.info(
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {score}/{total} ({percentage:.1f}%)"
            )

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}"
            self.logger.error(error_msg)

            with self.results_container:
                clear_output()
                display(
                    widgets.HTML(
                        value=f"""
                    <div style="background: #fef2f2; padding: 15px; border-radius: 8px; border-left: 4px solid #ef4444;">
                        <h4 style="color: #dc2626; margin-top: 0;">–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h4>
                        <div style="color: #991b1b;">{error_msg}</div>
                    </div>
                    """
                    )
                )

    def _create_error_widget(self, title, message):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏."""
        return widgets.HTML(
            value=f"""
            <div style="background: #fef2f2; padding: 20px; border-radius: 10px; border-left: 4px solid #ef4444; margin: 20px 0;">
                <h3 style="color: #dc2626; margin-top: 0;">{html.escape(title)}</h3>
                <div style="color: #991b1b; white-space: pre-line; line-height: 1.5;">
                    {html.escape(message)}
                </div>
            </div>
            """
        )
