"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É—Ä–æ–∫–æ–≤.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ–π—Å—Ç–≤–∏–π "–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å".

–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ "–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
import traceback


class LessonInteractiveHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Ä–æ–∫–∞."""

    def __init__(self, content_generator, state_manager, utils, logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

        Args:
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            utils: –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            logger: –õ–æ–≥–≥–µ—Ä
        """
        self.content_generator = content_generator
        self.state_manager = state_manager
        self.utils = utils
        self.logger = logger

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.explain_container = None
        self.examples_container = None
        self.qa_container = None

        # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        self.current_lesson_content = None
        self.current_course_info = None
        self.current_lesson_id = None

    def set_lesson_data(self, lesson_content, course_info, lesson_id):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞.

        Args:
            lesson_content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            course_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
            lesson_id: ID —É—Ä–æ–∫–∞
        """
        self.logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞: {lesson_id}")
        self.logger.debug(
            f"lesson_content —Ç–∏–ø: {type(lesson_content)}, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {lesson_content}"
        )
        self.logger.debug(
            f"course_info —Ç–∏–ø: {type(course_info)}, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {course_info}"
        )

        self.current_lesson_content = lesson_content
        self.current_course_info = course_info
        self.current_lesson_id = lesson_id

        self.logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ {lesson_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    def _diagnose_lesson_data_issue(self):
        """
        –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞.

        Returns:
            str: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        """
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º current_lesson_content
        if self.current_lesson_content is None:
            issues.append("current_lesson_content = None (–¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã)")
        elif not self.current_lesson_content:
            issues.append(
                f"current_lesson_content –ø—É—Å—Ç–æ–π: {self.current_lesson_content}"
            )
        else:
            self.logger.debug(
                f"current_lesson_content OK: —Ç–∏–ø {type(self.current_lesson_content)}"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º current_course_info
        if self.current_course_info is None:
            issues.append("current_course_info = None (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞)")
        elif not self.current_course_info:
            issues.append(f"current_course_info –ø—É—Å—Ç–æ–π: {self.current_course_info}")
        else:
            self.logger.debug(
                f"current_course_info OK: —Ç–∏–ø {type(self.current_course_info)}"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º current_lesson_id
        if not self.current_lesson_id:
            issues.append(f"current_lesson_id –ø—É—Å—Ç–æ–π: {self.current_lesson_id}")
        else:
            self.logger.debug(f"current_lesson_id OK: {self.current_lesson_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º content_generator
        if not self.content_generator:
            issues.append("content_generator = None (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        else:
            self.logger.debug("content_generator OK")

        if issues:
            detailed_message = "–ü–†–û–ë–õ–ï–ú–´ –° –î–ê–ù–ù–´–ú–ò –£–†–û–ö–ê:\n" + "\n".join(
                f"‚Ä¢ {issue}" for issue in issues
            )
            detailed_message += "\n\n–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:"
            detailed_message += "\n‚Ä¢ –£—Ä–æ–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API"
            detailed_message += "\n‚Ä¢ –û—à–∏–±–∫–∞ –≤ lesson_interface.py –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
            detailed_message += "\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"
            detailed_message += "\n‚Ä¢ –û—à–∏–±–∫–∞ –≤ content_generator (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á)"
            return detailed_message

        return "–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ"

    def handle_explain_button(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ".
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Ä–æ–∫–∞.
        """
        try:
            self.logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ' –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}"
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not self.current_lesson_content or not self.current_course_info:
                error_details = self._diagnose_lesson_data_issue()
                self.logger.error(
                    f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞: {error_details}"
                )
                self._show_error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —É—Ä–æ–∫–∞:\n\n{error_details}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º content_generator
            if not self.content_generator:
                error_msg = "ContentGenerator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –∏ API –∫–ª—é—á."
                self.logger.error(error_msg)
                self._show_error(error_msg)
                return

            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.explain_container:
                self.explain_container.close()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            self.explain_container = widgets.VBox()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∑–µ–ª–µ–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            header = widgets.HTML(
                value=f"""
                <div style="background: linear-gradient(135deg, #4ade80, #22c55e);
                           padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                    <h3 style="color: white; margin: 0; font-size: 18px;">
                        üìö –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                    </h3>
                </div>
                """
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º lesson_data –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
            lesson_data = {
                "title": self.current_course_info.get("lesson_title", "–£—Ä–æ–∫"),
                "id": self.current_course_info.get("lesson_id", ""),
                "description": "",
            }

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            if isinstance(self.current_lesson_content, dict):
                lesson_content = self.current_lesson_content.get(
                    "content", str(self.current_lesson_content)
                )
            else:
                lesson_content = str(self.current_lesson_content)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = self.current_course_info.get("user_profile", {})
            communication_style = user_profile.get("communication_style", "friendly")

            self.logger.info("–í—ã–∑–æ–≤ content_generator.get_detailed_explanation")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
            explanation = self.content_generator.get_detailed_explanation(
                lesson_data=lesson_data,
                lesson_content=lesson_content,
                communication_style=communication_style,
            )

            # –ö–æ–Ω—Ç–µ–Ω—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            content = widgets.HTML(
                value=f"""
                <div style="background: #f0f9ff; padding: 20px; border-radius: 8px;
                           border-left: 4px solid #22c55e; margin-bottom: 15px;">
                    <div style="line-height: 1.6; color: #1f2937;">
                        {explanation}
                    </div>
                </div>
                """
            )

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button = widgets.Button(
                description="–ó–∞–∫—Ä—ã—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
                button_style="success",
                icon="check",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )
            close_button.on_click(self._close_explain_container)

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.explain_container.children = [header, content, close_button]
            display(self.explain_container)

            self.logger.info(
                f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}"
            )

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}"
            self.logger.error(f"{error_msg}\nTraceback: {traceback.format_exc()}")

            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "Connection error" in str(e) or "connection" in str(e).lower():
                detailed_error = f"{error_msg}\n\n–ü–†–û–í–ï–†–¨–¢–ï:\n‚Ä¢ API –∫–ª—é—á OpenAI –≤ .env —Ñ–∞–π–ª–µ\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ OpenAI"
            elif "timeout" in str(e).lower():
                detailed_error = (
                    f"{error_msg}\n\n–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"
                )
            elif "rate limit" in str(e).lower():
                detailed_error = f"{error_msg}\n\n–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"
            else:
                detailed_error = f"{error_msg}\n\n–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}"

            self._show_error(detailed_error)

    def handle_examples_button(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã".
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —É—Ä–æ–∫–∞.
        """
        try:
            self.logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã' –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}"
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not self.current_lesson_content or not self.current_course_info:
                error_details = self._diagnose_lesson_data_issue()
                self.logger.error(
                    f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞: {error_details}"
                )
                self._show_error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —É—Ä–æ–∫–∞:\n\n{error_details}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º content_generator
            if not self.content_generator:
                error_msg = "ContentGenerator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –∏ API –∫–ª—é—á."
                self.logger.error(error_msg)
                self._show_error(error_msg)
                return

            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.examples_container:
                self.examples_container.close()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
            self.examples_container = widgets.VBox()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–∏–Ω–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            header = widgets.HTML(
                value=f"""
                <div style="background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                           padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                    <h3 style="color: white; margin: 0; font-size: 18px;">
                        üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
                    </h3>
                </div>
                """
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º lesson_data –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
            lesson_data = {
                "title": self.current_course_info.get("lesson_title", "–£—Ä–æ–∫"),
                "id": self.current_course_info.get("lesson_id", ""),
                "description": "",
            }

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            if isinstance(self.current_lesson_content, dict):
                lesson_content = self.current_lesson_content.get(
                    "content", str(self.current_lesson_content)
                )
            else:
                lesson_content = str(self.current_lesson_content)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = self.current_course_info.get("user_profile", {})
            communication_style = user_profile.get("communication_style", "friendly")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞
            course_context = {
                "course_title": self.current_course_info.get("course_title", ""),
                "course_plan": self.current_course_info.get("course_plan", {}),
            }

            self.logger.info("–í—ã–∑–æ–≤ content_generator.generate_examples")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —á–µ—Ä–µ–∑ API
            examples = self.content_generator.generate_examples(
                lesson_data=lesson_data,
                lesson_content=lesson_content,
                communication_style=communication_style,
                course_context=course_context,
            )

            # –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–º–µ—Ä–æ–≤
            content = widgets.HTML(
                value=f"""
                <div style="background: #eff6ff; padding: 20px; border-radius: 8px;
                           border-left: 4px solid #3b82f6; margin-bottom: 15px;">
                    <div style="line-height: 1.6; color: #1f2937;">
                        {examples}
                    </div>
                </div>
                """
            )

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button = widgets.Button(
                description="–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–º–µ—Ä—ã",
                button_style="info",
                icon="check",
                layout=widgets.Layout(width="auto", margin="10px 0"),
            )
            close_button.on_click(self._close_examples_container)

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.examples_container.children = [header, content, close_button]
            display(self.examples_container)

            self.logger.info(
                f"–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}"
            )

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {str(e)}"
            self.logger.error(f"{error_msg}\nTraceback: {traceback.format_exc()}")

            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "Connection error" in str(e) or "connection" in str(e).lower():
                detailed_error = f"{error_msg}\n\n–ü–†–û–í–ï–†–¨–¢–ï:\n‚Ä¢ API –∫–ª—é—á OpenAI –≤ .env —Ñ–∞–π–ª–µ\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ OpenAI"
            elif "timeout" in str(e).lower():
                detailed_error = (
                    f"{error_msg}\n\n–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"
                )
            elif "rate limit" in str(e).lower():
                detailed_error = f"{error_msg}\n\n–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"
            else:
                detailed_error = f"{error_msg}\n\n–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}"

            self._show_error(detailed_error)

    def handle_qa_button(self, button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å".
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.
        """
        try:
            self.logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}"
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not self.current_lesson_content or not self.current_course_info:
                error_details = self._diagnose_lesson_data_issue()
                self.logger.error(
                    f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞: {error_details}"
                )
                self._show_error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —É—Ä–æ–∫–∞:\n\n{error_details}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º content_generator
            if not self.content_generator:
                error_msg = "ContentGenerator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –∏ API –∫–ª—é—á."
                self.logger.error(error_msg)
                self._show_error(error_msg)
                return

            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.qa_container:
                self.qa_container.close()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Q&A
            self.qa_container = widgets.VBox()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            header = widgets.HTML(
                value=f"""
                <div style="background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                           padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                    <h3 style="color: white; margin: 0; font-size: 18px;">
                        ‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ä–æ–∫—É
                    </h3>
                </div>
                """
            )

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
            question_input = widgets.Textarea(
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞...",
                layout=widgets.Layout(width="100%", height="100px", margin="10px 0"),
            )

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_button = widgets.Button(
                description="–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç",
                button_style="primary",
                icon="paper-plane",
                layout=widgets.Layout(width="150px", margin="5px 0"),
            )

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            answer_output = widgets.Output()

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_button = widgets.Button(
                description="–ó–∞–∫—Ä—ã—Ç—å",
                button_style="danger",
                icon="times",
                layout=widgets.Layout(width="100px", margin="5px 10px"),
            )

            def handle_question_submit(b):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞."""
                question = question_input.value.strip()
                if not question:
                    with answer_output:
                        clear_output()
                        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
                    return

                try:
                    with answer_output:
                        clear_output()
                        print("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
                    lesson_data = {
                        "title": self.current_course_info.get("lesson_title", "–£—Ä–æ–∫"),
                        "id": self.current_course_info.get("lesson_id", ""),
                        "description": "",
                    }

                    if isinstance(self.current_lesson_content, dict):
                        lesson_content = self.current_lesson_content.get(
                            "content", str(self.current_lesson_content)
                        )
                    else:
                        lesson_content = str(self.current_lesson_content)

                    user_profile = self.current_course_info.get("user_profile", {})
                    communication_style = user_profile.get(
                        "communication_style", "friendly"
                    )

                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API
                    answer = self.content_generator.answer_question(
                        question=question,
                        lesson_data=lesson_data,
                        lesson_content=lesson_content,
                        communication_style=communication_style,
                    )

                    with answer_output:
                        clear_output()
                        display(
                            widgets.HTML(
                                value=f"""
                            <div style="background: #f8fafc; padding: 15px; border-radius: 8px; border-left: 4px solid #8b5cf6;">
                                <h4 style="color: #7c3aed; margin-top: 0;">–û—Ç–≤–µ—Ç:</h4>
                                <div style="line-height: 1.6; color: #1f2937;">{answer}</div>
                            </div>
                            """
                            )
                        )

                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
                    with answer_output:
                        clear_output()
                        display(
                            widgets.HTML(
                                value=f"""
                            <div style="background: #fef2f2; padding: 15px; border-radius: 8px; border-left: 4px solid #ef4444;">
                                <h4 style="color: #dc2626; margin-top: 0;">–û—à–∏–±–∫–∞:</h4>
                                <div style="color: #991b1b;">{error_msg}</div>
                            </div>
                            """
                            )
                        )

            submit_button.on_click(handle_question_submit)
            close_button.on_click(self._close_qa_container)

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            button_row = widgets.HBox([submit_button, close_button])
            self.qa_container.children = [
                header,
                question_input,
                button_row,
                answer_output,
            ]
            display(self.qa_container)

            self.logger.info(
                f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Q&A —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è —É—Ä–æ–∫–∞ {self.current_lesson_id}"
            )

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}"
            self.logger.error(f"{error_msg}\nTraceback: {traceback.format_exc()}")
            self._show_error(error_msg)

    # Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def handle_question_button(self, button):
        """Alias –¥–ª—è handle_qa_button –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        return self.handle_qa_button(button)

    def _show_error(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        error_widget = widgets.HTML(
            value=f"""
            <div style="background: #fef2f2; padding: 15px; border-radius: 8px;
                       border-left: 4px solid #ef4444; margin: 10px 0;">
                <h4 style="color: #dc2626; margin-top: 0;">–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏</h4>
                <div style="color: #991b1b; white-space: pre-line;">{message}</div>
            </div>
            """
        )
        display(error_widget)

    def _close_explain_container(self, button):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±—ä—è—Å–Ω–µ–Ω–∏—è."""
        if self.explain_container:
            self.explain_container.close()

    def _close_examples_container(self, button):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤."""
        if self.examples_container:
            self.examples_container.close()

    def _close_qa_container(self, button):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Q&A."""
        if self.qa_container:
            self.qa_container.close()
