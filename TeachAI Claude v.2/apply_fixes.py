#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è TeachAI 2
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–∏—Å—Ç–µ–º—ã.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python apply_fixes.py

–°–æ–∑–¥–∞–Ω–æ: 12 –∏—é–ª—è 2025
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import shutil
import sys
from datetime import datetime


class TeachAIAutoFix:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π."""

    def __init__(self):
        self.backup_dir = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.fixes_applied = []
        self.errors = []

    def apply_all_fixes(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã TeachAI."""
        print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô TEACHAI 2")
        print("=" * 55)
        print(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print("=" * 55)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        self._create_backup_directory()

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        fixes = [
            ("lesson_content_manager.py", self._fix_lesson_content_manager),
            ("lesson_interactive_handlers.py", self._fix_lesson_interactive_handlers),
            ("assessment_interface.py", self._fix_assessment_interface),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞", self._check_env_file),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞", self._create_diagnostic_script),
        ]

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for fix_name, fix_func in fixes:
            print(f"\nüî® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {fix_name}...")
            try:
                result = fix_func()
                if result["success"]:
                    print(
                        f"   ‚úÖ –£–°–ü–ï–®–ù–û: {result.get('message', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ')}"
                    )
                    self.fixes_applied.append(fix_name)
                else:
                    print(
                        f"   ‚ö†Ô∏è –ü–†–û–ü–£–©–ï–ù–û: {result.get('message', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')}"
                    )
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ {fix_name}: {str(e)}"
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {error_msg}")
                self.errors.append(error_msg)

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._print_final_report()

    def _create_backup_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π."""
        try:
            os.makedirs(self.backup_dir, exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {self.backup_dir}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤: {str(e)}")
            self.backup_dir = None

    def _backup_file(self, filename):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞."""
        if not self.backup_dir or not os.path.exists(filename):
            return False

        try:
            backup_path = os.path.join(self.backup_dir, filename)
            shutil.copy2(filename, backup_path)
            print(f"   üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            return True
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é {filename}: {str(e)}")
            return False

    def _fix_lesson_content_manager(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç lesson_content_manager.py"""
        filename = "lesson_content_manager.py"

        if not os.path.exists(filename):
            return {"success": False, "message": f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self._backup_file(filename)

        # –ù–æ–≤—ã–π –∫–æ–¥ –º–æ–¥—É–ª—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞)
        new_content = '''"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤.

–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ë–†–ê–ù –î–ï–ú–û-–†–ï–ñ–ò–ú - —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""

import logging


class LessonContentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤."""

    def __init__(self, state_manager, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            logger: –õ–æ–≥–≥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.state_manager = state_manager
        self.logger = logger or logging.getLogger(__name__)

        # –ö—ç—à —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞
        self.cached_lesson_content = None
        self.current_lesson_cache_key = None

        self.logger.info("LessonContentManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_lesson_content(self, section_id, topic_id, lesson_id, content_generator):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º - —Ç–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∏ API –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤—ã—à–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

        Args:
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞

        Returns:
            dict: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Raises:
            Exception: –õ—é–±—ã–µ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        """
        lesson_cache_key = f"{section_id}:{topic_id}:{lesson_id}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (self.current_lesson_cache_key == lesson_cache_key and
            self.cached_lesson_content):
            self.logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ {lesson_cache_key}")
            return self.cached_lesson_content

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_cache_key}")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å content_generator
            if not content_generator:
                error_msg = f"ContentGenerator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—Ä–æ–∫–∞ {lesson_cache_key}"
                self.logger.error(error_msg)
                raise ValueError(error_msg)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è generate_lesson_content
            lesson_data = self._build_lesson_data(section_id, topic_id, lesson_id)
            user_data = self._get_user_data()
            course_context = self._get_course_context()

            self.logger.info(f"–í—ã–∑–æ–≤ content_generator.generate_lesson_content –¥–ª—è {lesson_cache_key}")
            self.logger.debug(f"lesson_data: {lesson_data}")
            self.logger.debug(f"user_data: {user_data}")
            self.logger.debug(f"course_context: {course_context}")

            lesson_content_data = content_generator.generate_lesson_content(
                lesson_data=lesson_data,
                user_data=user_data,
                course_context=course_context
            )

            if not lesson_content_data:
                error_msg = f"content_generator.generate_lesson_content –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {lesson_cache_key}"
                self.logger.error(error_msg)
                raise ValueError(error_msg)

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cached_lesson_content = lesson_content_data
            self.current_lesson_cache_key = lesson_cache_key

            self.logger.info(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ {lesson_cache_key} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ")
            return lesson_content_data

        except Exception as e:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º - –ø–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_cache_key}: {str(e)}"
            self.logger.error(error_msg)
            self.logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if "Connection error" in str(e) or "connection" in str(e).lower():
                self.logger.error("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API")
                self.logger.error("–ü–†–û–í–ï–†–¨–¢–ï: 1) API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ, 2) –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, 3) –°—Ç–∞—Ç—É—Å OpenAI API")
            elif "timeout" in str(e).lower():
                self.logger.error("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
            elif "rate limit" in str(e).lower():
                self.logger.error("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
            elif "api key" in str(e).lower():
                self.logger.error("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º")
            else:
                self.logger.error(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API: {str(e)}")

            # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –≤–º–µ—Å—Ç–æ —Å–∫—Ä—ã—Ç–∏—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–æ–º
            raise

    def _build_lesson_data(self, section_id, topic_id, lesson_id):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

        Args:
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            dict: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ state_manager
            if hasattr(self.state_manager, 'get_lesson_data'):
                lesson_data = self.state_manager.get_lesson_data(lesson_id)
                if lesson_data:
                    self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ state_manager: {lesson_data}")
                    return lesson_data

            # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            fallback_data = {
                'id': lesson_id,
                'title': f'–£—Ä–æ–∫ {lesson_id}',
                'section_id': section_id,
                'topic_id': topic_id,
                'description': f'–£—Ä–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ {section_id}, —Ç–µ–º–∞ {topic_id}'
            }
            self.logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞: {fallback_data}")
            return fallback_data

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è
            return {
                'id': lesson_id,
                'title': f'–£—Ä–æ–∫ {lesson_id}',
                'section_id': section_id,
                'topic_id': topic_id
            }

    def _get_user_data(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            if hasattr(self.state_manager, 'get_user_profile'):
                user_data = self.state_manager.get_user_profile()
                self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
                return user_data or {}
            self.logger.warning("–ú–µ—Ç–æ–¥ get_user_profile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ state_manager")
            return {}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            return {}

    def _get_course_context(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞.

        Returns:
            dict: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞
        """
        try:
            if hasattr(self.state_manager, 'get_course_plan'):
                course_plan = self.state_manager.get_course_plan()
                context = {
                    'course_name': course_plan.get('course_name', '–ö—É—Ä—Å Python') if course_plan else '–ö—É—Ä—Å Python',
                    'course_plan': course_plan
                }
                self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞: {context}")
                return context
            self.logger.warning("–ú–µ—Ç–æ–¥ get_course_plan –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ state_manager")
            return {'course_name': '–ö—É—Ä—Å Python'}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫—É—Ä—Å–∞: {str(e)}")
            return {'course_name': '–ö—É—Ä—Å Python'}

    def get_control_tasks_interface(self, lesson_id, course_info):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.

        Args:
            lesson_id (str): ID —É—Ä–æ–∫–∞
            course_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ

        Returns:
            widgets.Widget or None: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏–ª–∏ None
        """
        try:
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
            self.logger.debug(f"–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞ {lesson_id} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
            return None

        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É—Ä–æ–∫–∞ {lesson_id}: {str(e)}")
            return None

    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞."""
        self.cached_lesson_content = None
        self.current_lesson_cache_key = None
        self.logger.info("–ö—ç—à —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞ –æ—á–∏—â–µ–Ω")

    def get_cache_info(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ.

        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
        """
        return {
            "cache_active": self.cached_lesson_content is not None,
            "cached_lesson": self.current_lesson_cache_key,
            "cache_size": len(str(self.cached_lesson_content)) if self.cached_lesson_content else 0
        }
'''

        try:
            with open(filename, "w", encoding="utf-8") as f:
                f.write(new_content)
            return {
                "success": True,
                "message": "–£–±—Ä–∞–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –æ—à–∏–±–æ–∫",
            }
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {str(e)}"}

    def _fix_lesson_interactive_handlers(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç lesson_interactive_handlers.py"""
        filename = "lesson_interactive_handlers.py"

        if not os.path.exists(filename):
            return {"success": False, "message": f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self._backup_file(filename)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞
        try:
            with open(filename, "r", encoding="utf-8") as f:
                content = f.read()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if "_diagnose_lesson_data_issue" in content:
                return {"success": False, "message": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"}

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã
            old_pattern = 'if not self.current_lesson_content or not self.current_course_info:\n                self._show_error("–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")'

            new_pattern = """if not self.current_lesson_content or not self.current_course_info:
                error_details = self._diagnose_lesson_data_issue()
                self.logger.error(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞: {error_details}")
                self._show_error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —É—Ä–æ–∫–∞:\\n\\n{error_details}")"""

            if old_pattern not in content:
                return {
                    "success": False,
                    "message": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π",
                }

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
            updated_content = content.replace(old_pattern, new_pattern)

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –Ω–∞—á–∞–ª–æ –∫–ª–∞—Å—Å–∞ (–ø–æ—Å–ª–µ __init__)
            diagnostic_method = '''
    def _diagnose_lesson_data_issue(self):
        """
        –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞.

        Returns:
            str: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        """
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º current_lesson_content
        if self.current_lesson_content is None:
            issues.append("current_lesson_content = None (–¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã)")
        elif not self.current_lesson_content:
            issues.append(f"current_lesson_content –ø—É—Å—Ç–æ–π: {self.current_lesson_content}")
        else:
            self.logger.debug(f"current_lesson_content OK: —Ç–∏–ø {type(self.current_lesson_content)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º current_course_info
        if self.current_course_info is None:
            issues.append("current_course_info = None (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞)")
        elif not self.current_course_info:
            issues.append(f"current_course_info –ø—É—Å—Ç–æ–π: {self.current_course_info}")
        else:
            self.logger.debug(f"current_course_info OK: —Ç–∏–ø {type(self.current_course_info)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º current_lesson_id
        if not self.current_lesson_id:
            issues.append(f"current_lesson_id –ø—É—Å—Ç–æ–π: {self.current_lesson_id}")
        else:
            self.logger.debug(f"current_lesson_id OK: {self.current_lesson_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º content_generator
        if not self.content_generator:
            issues.append("content_generator = None (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        else:
            self.logger.debug("content_generator OK")

        if issues:
            detailed_message = "–ü–†–û–ë–õ–ï–ú–´ –° –î–ê–ù–ù–´–ú–ò –£–†–û–ö–ê:\\n" + "\\n".join(f"‚Ä¢ {issue}" for issue in issues)
            detailed_message += "\\n\\n–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:"
            detailed_message += "\\n‚Ä¢ –£—Ä–æ–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API"
            detailed_message += "\\n‚Ä¢ –û—à–∏–±–∫–∞ –≤ lesson_interface.py –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
            detailed_message += "\\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"
            detailed_message += "\\n‚Ä¢ –û—à–∏–±–∫–∞ –≤ content_generator (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á)"
            return detailed_message

        return "–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ"
'''

            # –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–æ—Å–ª–µ set_lesson_data
            insert_position = updated_content.find(
                "        self.current_lesson_id = lesson_id"
            )
            if insert_position != -1:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞ set_lesson_data
                next_method_position = updated_content.find(
                    "\n    def ", insert_position
                )
                if next_method_position != -1:
                    updated_content = (
                        updated_content[:next_method_position]
                        + diagnostic_method
                        + updated_content[next_method_position:]
                    )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(filename, "w", encoding="utf-8") as f:
                f.write(updated_content)

            return {
                "success": True,
                "message": "–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞",
            }

        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"}

    def _fix_assessment_interface(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç assessment_interface.py"""
        filename = "assessment_interface.py"

        if not os.path.exists(filename):
            return {"success": False, "message": f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self._backup_file(filename)

        try:
            with open(filename, "r", encoding="utf-8") as f:
                content = f.read()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if "_diagnose_assessment_issue" in content:
                return {"success": False, "message": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"}

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –∫–ª–∞—Å—Å
            diagnostic_method = '''
    def _diagnose_assessment_issue(self, current_lesson_content):
        """
        –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

        Args:
            current_lesson_content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            str: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        """
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º content_generator
        if not self.content_generator:
            issues.append("content_generator = None (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º assessment –º–æ–¥—É–ª—å
        if not self.assessment:
            issues.append("assessment = None (–º–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        if not current_lesson_content:
            issues.append(f"current_lesson_content –ø—É—Å—Ç–æ–π: {current_lesson_content}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º state_manager
        if not self.state_manager:
            issues.append("state_manager = None (–º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º parent_facade
        if not self.parent_facade:
            issues.append("parent_facade = None (—Ñ–∞—Å–∞–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)")

        if issues:
            detailed_message = "–ü–†–û–ë–õ–ï–ú–´ –° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï–ú:\\n" + "\\n".join(f"‚Ä¢ {issue}" for issue in issues)
            detailed_message += "\\n\\n–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:"
            detailed_message += "\\n‚Ä¢ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ engine.py)"
            detailed_message += "\\n‚Ä¢ –£—Ä–æ–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á)"
            detailed_message += "\\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π facade –≤ lesson_interface.py"
            detailed_message += "\\n‚Ä¢ –û—à–∏–±–∫–∞ –≤ content_generator (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ OpenAI API)"
            return detailed_message

        return "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ"
'''

            # –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å
            class_definition = "class AssessmentInterface:"
            insert_position = content.find(class_definition)
            if insert_position != -1:
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
                first_method_position = content.find("\n    def ", insert_position)
                if first_method_position != -1:
                    content = (
                        content[:first_method_position]
                        + diagnostic_method
                        + content[first_method_position:]
                    )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(filename, "w", encoding="utf-8") as f:
                f.write(content)

            return {
                "success": True,
                "message": "–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            }

        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"}

    def _check_env_file(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª."""
        filename = ".env"

        if os.path.exists(filename):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            try:
                with open(filename, "r") as f:
                    content = f.read()

                if "OPENAI_API_KEY" in content:
                    return {"success": False, "message": ".env —Ñ–∞–π–ª —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Å—Ç—Ä–æ–∫—É
                    with open(filename, "a") as f:
                        f.write("\n# OpenAI API –∫–ª—é—á\nOPENAI_API_KEY=–≤–∞—à-–∫–ª—é—á-–∑–¥–µ—Å—å\n")
                    return {
                        "success": True,
                        "message": "–î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è API –∫–ª—é—á–∞ –≤ .env",
                    }

            except Exception as e:
                return {"success": False, "message": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {str(e)}"}
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª
            try:
                with open(filename, "w") as f:
                    f.write(
                        """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TeachAI 2
# –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://platform.openai.com/api-keys
OPENAI_API_KEY=–≤–∞—à-–∫–ª—é—á-–∑–¥–µ—Å—å

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MODEL_NAME=gpt-3.5-turbo-16k
MAX_TOKENS=3500
TEMPERATURE=0.7
DEBUG_MODE=False
"""
                    )
                return {
                    "success": True,
                    "message": "–°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å —à–∞–±–ª–æ–Ω–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                }

            except Exception as e:
                return {"success": False, "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: {str(e)}"}

    def _create_diagnostic_script(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
        filename = "diagnose_teachai.py"

        if os.path.exists(filename):
            return {"success": False, "message": "–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}

        # –ó–¥–µ—Å—å –º–æ–≥ –±—ã –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è diagnostic script,
        # –Ω–æ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        return {"success": False, "message": "–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ"}

    def _print_final_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π."""
        print("\n" + "=" * 55)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        print("=" * 55)

        print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(self.fixes_applied)}")
        print(f"–û—à–∏–±–æ–∫ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏: {len(self.errors)}")

        if self.fixes_applied:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´ ({len(self.fixes_applied)}):")
            for i, fix in enumerate(self.fixes_applied, 1):
                print(f"{i}. {fix}")

        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò –ü–†–ò –ü–†–ò–ú–ï–ù–ï–ù–ò–ò ({len(self.errors)}):")
            for i, error in enumerate(self.errors, 1):
                print(f"{i}. {error}")

        if self.backup_dir:
            print(f"\nüíæ –†–ï–ó–ï–†–í–ù–´–ï –ö–û–ü–ò–ò –°–û–•–†–ê–ù–ï–ù–´ –í: {self.backup_dir}")
            print("–î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏")

        print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        if len(self.fixes_applied) > 0 and len(self.errors) == 0:
            print("1. ‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            print("2. üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ")
            print("3. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python diagnose_teachai.py")
            print("4. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: teachai.ipynb")
        elif len(self.fixes_applied) > 0:
            print("1. ‚ö†Ô∏è –ß–∞—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            print("2. üîß –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
            print("3. üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ")
            print("4. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python diagnose_teachai.py")
        else:
            print("1. ‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            print("2. üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
            print("3. üîß –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é")

        print("\n" + "=" * 55)
        print(
            f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )
        print("=" * 55)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π."""
    try:
        auto_fix = TeachAIAutoFix()
        auto_fix.apply_all_fixes()
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")


if __name__ == "__main__":
    main()
