"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏ TeachAI.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏, —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∏ —Ç–µ–º–∞–º–∏ –∫—É—Ä—Å–∞.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –∫—É—Ä—Å–µ.
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
from interface_utils import InterfaceUtils, InterfaceState


class NavigationInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏."""

    def __init__(
        self, state_manager, content_generator, system_logger, assessment=None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.state_manager = state_manager
        self.content_generator = content_generator
        self.system_logger = system_logger
        self.assessment = assessment
        self.logger = logging.getLogger(__name__)

        # –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.utils = InterfaceUtils()

    def show_lesson_navigation(
        self, current_section_id, current_topic_id, current_lesson_id
    ):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞.

        Args:
            current_section_id (str): ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            current_topic_id (str): ID —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
            current_lesson_id (str): ID —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_info = self._get_navigation_info(
                current_section_id, current_topic_id, current_lesson_id
            )

            if not nav_info:
                return self._create_error_navigation()

            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            breadcrumb = self._create_breadcrumb(nav_info)
            navigation_buttons = self._create_navigation_buttons(nav_info)
            progress_info = self._create_progress_info(nav_info)

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_container = widgets.VBox(
                [breadcrumb, progress_info, navigation_buttons]
            )

            return navigation_container

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}")
            return self._create_error_navigation()

    def _get_navigation_info(self, section_id, topic_id, lesson_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

        Args:
            section_id (str): ID —Ä–∞–∑–¥–µ–ª–∞
            topic_id (str): ID —Ç–µ–º—ã
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∫—É—Ä—Å–∞
            course_plan = self.state_manager.get_course_plan()
            if not course_plan:
                return None

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            learning_progress = self.state_manager.get_learning_progress()

            # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –∏ —Å–æ—Å–µ–¥–Ω–∏–µ
            current_lesson = self._find_lesson_in_plan(
                course_plan, section_id, topic_id, lesson_id
            )
            prev_lesson = self._find_previous_lesson(
                course_plan, section_id, topic_id, lesson_id
            )
            next_lesson = self._find_next_lesson(
                course_plan, section_id, topic_id, lesson_id
            )

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            course_title = course_plan.get("title", "–ö—É—Ä—Å")
            section_title, topic_title = self._get_element_titles(
                course_plan, section_id, topic_id
            )
            lesson_title = (
                current_lesson.get("title", f"–£—Ä–æ–∫ {lesson_id}")
                if current_lesson
                else f"–£—Ä–æ–∫ {lesson_id}"
            )

            return {
                "course_title": course_title,
                "section_title": section_title,
                "topic_title": topic_title,
                "lesson_title": lesson_title,
                "current_lesson": {
                    "section_id": section_id,
                    "topic_id": topic_id,
                    "lesson_id": lesson_id,
                },
                "prev_lesson": prev_lesson,
                "next_lesson": next_lesson,
                "progress": self._calculate_lesson_progress(
                    course_plan, section_id, topic_id, lesson_id
                ),
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}")
            return None

    def _create_breadcrumb(self, nav_info):
        """–°–æ–∑–¥–∞–µ—Ç —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        breadcrumb_html = f"""
        <div style="
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 12px 20px;
            border-radius: 8px;
            margin: 10px 0;
            border: 1px solid #dee2e6;
            font-size: 14px;
            color: #495057;
        ">
            üìö <strong>{nav_info['course_title']}</strong> ‚Üí
            üìñ {nav_info['section_title']} ‚Üí
            üìù {nav_info['topic_title']} ‚Üí
            üéØ <strong style="color: #007bff;">{nav_info['lesson_title']}</strong>
        </div>
        """
        return widgets.HTML(value=breadcrumb_html)

    def _create_progress_info(self, nav_info):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
        progress = nav_info["progress"]
        progress_html = f"""
        <div style="text-align: center; margin: 15px 0; color: #6c757d;">
            üìä –£—Ä–æ–∫ {progress['current']} –∏–∑ {progress['total']}
            ({progress['percentage']:.1f}% –∫—É—Ä—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ)
        </div>
        """
        return widgets.HTML(value=progress_html)

    def _create_navigation_buttons(self, nav_info):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫"
        prev_button = widgets.Button(
            description="‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
            disabled=not nav_info["prev_lesson"],
            button_style="info",
            layout=widgets.Layout(width="120px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        menu_button = widgets.Button(
            description="üè† –ú–µ–Ω—é",
            button_style="warning",
            layout=widgets.Layout(width="120px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫"
        next_button = widgets.Button(
            description="–°–ª–µ–¥—É—é—â–∏–π ‚Üí",
            disabled=not nav_info["next_lesson"],
            button_style="success",
            layout=widgets.Layout(width="120px"),
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        def on_prev_clicked(b):
            if nav_info["prev_lesson"]:
                self._navigate_to_lesson(nav_info["prev_lesson"])

        def on_menu_clicked(b):
            self._navigate_to_main_menu()

        def on_next_clicked(b):
            if nav_info["next_lesson"]:
                self._navigate_to_lesson(nav_info["next_lesson"])

        prev_button.on_click(on_prev_clicked)
        menu_button.on_click(on_menu_clicked)
        next_button.on_click(on_next_clicked)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        return widgets.HBox(
            [prev_button, menu_button, next_button],
            layout=widgets.Layout(
                justify_content="center",
                margin="20px 0",
                padding="15px",
                border_top="1px solid #dee2e6",
            ),
        )

    def _navigate_to_lesson(self, lesson_info):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —É—Ä–æ–∫—É."""
        try:
            clear_output(wait=True)

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LessonInterface –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
            from lesson_interface import LessonInterface

            lesson_interface = LessonInterface(
                self.state_manager,
                self.content_generator,
                self.system_logger,
                self.assessment,
            )

            display(
                lesson_interface.show_lesson(
                    lesson_info["section_id"],
                    lesson_info["topic_id"],
                    lesson_info["lesson_id"],
                )
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Ä–æ–∫—É: {str(e)}")
            display(
                self.utils.create_styled_message(
                    f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Ä–æ–∫—É: {str(e)}", "incorrect"
                )
            )

    def _navigate_to_main_menu(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."""
        try:
            clear_output(wait=True)

            from interface import UserInterface

            interface = UserInterface(
                self.state_manager,
                self.content_generator,
                self.assessment,
                self.system_logger,
            )

            display(interface.show_main_menu())

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é: {str(e)}")
            display(
                self.utils.create_styled_message(
                    f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é: {str(e)}", "incorrect"
                )
            )

    def _find_lesson_in_plan(self, course_plan, section_id, topic_id, lesson_id):
        """–ù–∞—Ö–æ–¥–∏—Ç —É—Ä–æ–∫ –≤ –ø–ª–∞–Ω–µ –∫—É—Ä—Å–∞."""
        try:
            sections = course_plan.get("sections", [])
            for section in sections:
                if section.get("id") == section_id:
                    for topic in section.get("topics", []):
                        if topic.get("id") == topic_id:
                            for lesson in topic.get("lessons", []):
                                if lesson.get("id") == lesson_id:
                                    return lesson
            return None
        except Exception:
            return None

    def _find_previous_lesson(self, course_plan, section_id, topic_id, lesson_id):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫."""
        return self.state_manager.get_previous_lesson(lesson_id)

    def _find_next_lesson(self, course_plan, section_id, topic_id, lesson_id):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫."""
        return self.state_manager.get_next_lesson(lesson_id)

    def _get_element_titles(self, course_plan, section_id, topic_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –∏ —Ç–µ–º—ã."""
        section_title = f"–†–∞–∑–¥–µ–ª {section_id}"
        topic_title = f"–¢–µ–º–∞ {topic_id}"

        try:
            sections = course_plan.get("sections", [])
            for section in sections:
                if section.get("id") == section_id:
                    section_title = section.get("title", section_title)
                    for topic in section.get("topics", []):
                        if topic.get("id") == topic_id:
                            topic_title = topic.get("title", topic_title)
                            break
                    break
        except Exception:
            pass

        return section_title, topic_title

    def _calculate_lesson_progress(self, course_plan, section_id, topic_id, lesson_id):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º."""
        try:
            total_lessons = 0
            current_lesson_num = 0

            sections = course_plan.get("sections", [])
            for section in sections:
                for topic in section.get("topics", []):
                    for lesson in topic.get("lessons", []):
                        total_lessons += 1
                        if (
                            section.get("id") == section_id
                            and topic.get("id") == topic_id
                            and lesson.get("id") == lesson_id
                        ):
                            current_lesson_num = total_lessons

            percentage = (
                (current_lesson_num / total_lessons * 100) if total_lessons > 0 else 0
            )

            return {
                "current": current_lesson_num,
                "total": total_lessons,
                "percentage": percentage,
            }

        except Exception:
            return {"current": 1, "total": 1, "percentage": 100}

    def _create_error_navigation(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        error_html = """
        <div style="text-align: center; padding: 20px; color: #dc3545;">
            ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        </div>
        """

        menu_button = widgets.Button(
            description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", button_style="primary"
        )

        def on_menu_clicked(b):
            self._navigate_to_main_menu()

        menu_button.on_click(on_menu_clicked)

        return widgets.VBox(
            [
                widgets.HTML(value=error_html),
                widgets.HBox(
                    [menu_button], layout=widgets.Layout(justify_content="center")
                ),
            ]
        )
