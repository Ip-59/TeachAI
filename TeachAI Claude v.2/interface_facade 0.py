"""
–§–∞—Å–∞–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ TeachAI.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º —Å–∏—Å—Ç–µ–º—ã.

–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 49: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import logging
from interface_utils import InterfaceState
import ipywidgets as widgets


class InterfaceFacade:
    """
    –§–∞—Å–∞–¥ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã TeachAI.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º.
    """

    def __init__(self, state_manager, content_generator, assessment, system_logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞—Å–∞–¥–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        """
        self.state_manager = state_manager
        self.content_generator = content_generator
        self.assessment = assessment
        self.system_logger = system_logger
        self.logger = logging.getLogger(__name__)

        self.current_state = InterfaceState.INITIAL_SETUP

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        self._initialize_interfaces()

        self.logger.info("InterfaceFacade –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _initialize_interfaces(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã."""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from lesson_interface import LessonInterface
            from assessment_interface import AssessmentInterface

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lesson_interface —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–∞—Å–∞–¥
            self.lesson_interface = LessonInterface(
                self.state_manager,
                self.content_generator,
                self.system_logger,
                self.assessment,
                parent_facade=self,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞—Å–∞–¥
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º assessment_interface
            self.assessment_interface = AssessmentInterface(
                self.state_manager,
                self.content_generator,
                self.assessment,
                self.system_logger,
            )

            self.logger.info("–í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {str(e)}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            self.lesson_interface = None
            self.assessment_interface = None

    def show_lesson(self, lesson_id=None):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞.

        Args:
            lesson_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "section_id:topic_id:lesson_id"

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–∞
        """
        try:
            self.logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–∞: {lesson_id}")

            if not self.lesson_interface:
                return self._create_error_interface(
                    "–û—à–∏–±–∫–∞", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ä–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫, –µ—Å–ª–∏ lesson_id –Ω–µ —É–∫–∞–∑–∞–Ω
            if lesson_id is None:
                next_lesson = self.state_manager.get_next_lesson()
                if next_lesson and len(next_lesson) >= 3:
                    section_id, topic_id, lesson_id_current = next_lesson[:3]
                else:
                    self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫")
                    return self._create_error_interface(
                        "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    )
            else:
                # –ü–∞—Ä—Å–∏–º lesson_id
                lesson_parts = lesson_id.split(":")
                if len(lesson_parts) >= 3:
                    # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: section-1:topic-2:lesson-3
                    section_id, topic_id, lesson_id_current = lesson_parts[:3]
                elif len(lesson_parts) == 1:
                    # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ state_manager
                    self.logger.info(
                        f"–ü–æ–ª—É—á–µ–Ω —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π lesson_id: {lesson_id}, –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                    )
                    next_lesson = self.state_manager.get_next_lesson()
                    if next_lesson and len(next_lesson) >= 3:
                        section_id, topic_id, lesson_id_current = next_lesson[:3]
                        self.logger.info(
                            f"–ü–æ–ª–Ω—ã–π —É—Ä–æ–∫ –∏–∑ state_manager: {section_id}:{topic_id}:{lesson_id_current}"
                        )
                    else:
                        self.logger.error(
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –∏–∑ state_manager"
                        )
                        return self._create_error_interface(
                            "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ"
                        )
                else:
                    self.logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç lesson_id: {lesson_id}")
                    return self._create_error_interface(
                        "–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —É—Ä–æ–∫–∞: {lesson_id}"
                    )

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ lesson_interface
            result = self.lesson_interface.show_lesson(
                section_id, topic_id, lesson_id_current
            )
            self.current_state = InterfaceState.LESSON_VIEW
            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_id}: {str(e)}")
            return self._create_error_interface("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞", str(e))

    def show_assessment(self, lesson_id=None):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 49: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

        Args:
            lesson_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            self.logger.info(
                f"üöÄ –ù–ê–ß–ê–õ–û: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞: {lesson_id}"
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å lesson_interface
            if not self.lesson_interface:
                error_msg = "LessonInterface –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞"
                self.logger.error(error_msg)
                return self._create_error_interface("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", error_msg)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ lesson_interface
            self.logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

            current_lesson_content = getattr(
                self.lesson_interface, "current_lesson_content", None
            )
            current_course_info = getattr(
                self.lesson_interface, "current_course_info", None
            )
            current_lesson_id = getattr(
                self.lesson_interface, "current_lesson_id", None
            )

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.logger.info(
                f"üìä current_lesson_content: {type(current_lesson_content)} ({'–ï—Å—Ç—å' if current_lesson_content else 'None'})"
            )
            self.logger.info(
                f"üìä current_course_info: {type(current_course_info)} ({'–ï—Å—Ç—å' if current_course_info else 'None'})"
            )
            self.logger.info(f"üìä current_lesson_id: {current_lesson_id}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
            if not current_lesson_content and not current_course_info:
                error_details = self._diagnose_assessment_data_issue(
                    current_lesson_content, current_course_info, current_lesson_id
                )
                self.logger.error(
                    f"‚ùå –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {error_details}"
                )
                return self._create_error_interface(
                    "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞", error_details
                )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            course_info = current_course_info or {}

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            assessment_params = {
                "current_course": course_info.get("course_title", "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å"),
                "current_section": course_info.get("section_title", "–¢–µ–∫—É—â–∞—è —Å–µ–∫—Ü–∏—è"),
                "current_topic": course_info.get("topic_title", "–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞"),
                "current_lesson": course_info.get("lesson_title", "–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫"),
                "current_lesson_content": current_lesson_content,
            }

            self.logger.info(
                f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {list(assessment_params.keys())}"
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å assessment_interface
            if not self.assessment_interface:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ assessment_interface –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                return self._create_simple_assessment_interface(
                    assessment_params, current_lesson_id
                )

            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ assessment_interface
            result = self.assessment_interface.show_assessment(**assessment_params)

            if result:
                self.current_state = InterfaceState.ASSESSMENT
                self.logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
                return result
            else:
                error_msg = "assessment_interface.show_assessment() –≤–µ—Ä–Ω—É–ª None"
                self.logger.error(error_msg)
                return self._create_error_interface("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", error_msg)

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
            self.logger.error(error_msg)
            self.logger.error(f"üìã Traceback: {__import__('traceback').format_exc()}")
            return self._create_error_interface(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", error_msg
            )

    def _diagnose_assessment_data_issue(
        self, current_lesson_content, current_course_info, current_lesson_id
    ):
        """
        –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            str: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
        """
        diagnosis = []
        diagnosis.append("–ü–†–û–ë–õ–ï–ú–´ –° –î–ê–ù–ù–´–ú–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        if current_lesson_content is None:
            diagnosis.append(
                "‚Ä¢ current_lesson_content = None (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ)"
            )
        elif not current_lesson_content:
            diagnosis.append(
                "‚Ä¢ current_lesson_content –ø—É—Å—Ç (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
            )
        else:
            content_size = len(str(current_lesson_content))
            diagnosis.append(
                f"‚Ä¢ current_lesson_content –¥–æ—Å—Ç—É–ø–µ–Ω ({content_size} —Å–∏–º–≤–æ–ª–æ–≤)"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
        if current_course_info is None:
            diagnosis.append(
                "‚Ä¢ current_course_info = None (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞)"
            )
        elif not current_course_info:
            diagnosis.append(
                "‚Ä¢ current_course_info –ø—É—Å—Ç (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
            )
        else:
            info_keys = (
                list(current_course_info.keys())
                if isinstance(current_course_info, dict)
                else []
            )
            diagnosis.append(
                f"‚Ä¢ current_course_info –¥–æ—Å—Ç—É–ø–µ–Ω ({len(info_keys)} –∫–ª—é—á–µ–π: {info_keys})"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —É—Ä–æ–∫–∞
        if current_lesson_id is None:
            diagnosis.append("‚Ä¢ current_lesson_id = None (ID —É—Ä–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)")
        elif not current_lesson_id:
            diagnosis.append("‚Ä¢ current_lesson_id –ø—É—Å—Ç (ID —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        else:
            diagnosis.append(f"‚Ä¢ current_lesson_id –¥–æ—Å—Ç—É–ø–µ–Ω: {current_lesson_id}")

        diagnosis.append("")
        diagnosis.append("–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        diagnosis.append(
            "‚Ä¢ –£—Ä–æ–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —É—Ä–æ–∫–∞)"
        )
        diagnosis.append(
            "‚Ä¢ –û—à–∏–±–∫–∞ –≤ lesson_interface._store_lesson_data() (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å)"
        )
        diagnosis.append("‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏")
        diagnosis.append("‚Ä¢ –û—à–∏–±–∫–∞ –≤ content_generator (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á OpenAI)")
        diagnosis.append("‚Ä¢ –°–±–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ engine.py)")

        return "\\n".join(diagnosis)

    def _create_simple_assessment_interface(self, assessment_params, lesson_id):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–≥–¥–∞ assessment_interface –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

        Args:
            assessment_params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            lesson_id (str): ID —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞
        lesson_content = assessment_params.get("current_lesson_content")
        if not lesson_content:
            return self._create_error_interface(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.\\n\\n"
                + "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —É—Ä–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å assessment –º–æ–¥—É–ª—è
        if not self.assessment:
            return self._create_error_interface(
                "–ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "Assessment –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\\n\\n"
                + "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
            )

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = widgets.HTML(
                value=f"""
                <div style="background: linear-gradient(135deg, #6366f1, #8b5cf6);
                           padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                    <h2 style="color: white; margin: 0; text-align: center;">
                        üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É
                    </h2>
                    <p style="color: #e5e7eb; margin: 10px 0 0 0; text-align: center;">
                        {assessment_params.get('current_lesson', '–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫')}
                    </p>
                </div>
            """
            )

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ
            info = widgets.HTML(
                value=f"""
                <div style="background: #fef3c7; border: 1px solid #f59e0b;
                           padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <h3 style="color: #92400e; margin: 0 0 10px 0;">‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                    <p style="color: #92400e; margin: 0;">
                        Assessment –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:<br>
                        ‚Ä¢ –ö—É—Ä—Å: {assessment_params.get('current_course', '–ù–µ —É–∫–∞–∑–∞–Ω')}<br>
                        ‚Ä¢ –†–∞–∑–¥–µ–ª: {assessment_params.get('current_section', '–ù–µ —É–∫–∞–∑–∞–Ω')}<br>
                        ‚Ä¢ –¢–µ–º–∞: {assessment_params.get('current_topic', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}<br>
                        ‚Ä¢ –£—Ä–æ–∫: {assessment_params.get('current_lesson', '–ù–µ —É–∫–∞–∑–∞–Ω')}<br>
                        ‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {'–î–æ—Å—Ç—É–ø–Ω–æ' if lesson_content else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
                    </p>
                </div>
            """
            )

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            retry_button = widgets.Button(
                description="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                button_style="info",
                layout=widgets.Layout(width="200px"),
            )

            def on_retry_click(b):
                # –û—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥ –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
                from IPython.display import clear_output, display

                clear_output(wait=True)
                display(self.show_assessment(lesson_id))

            retry_button.on_click(on_retry_click)

            return widgets.VBox([header, info, retry_button])

        except Exception as e:
            return self._create_error_interface(
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            )

    def _create_error_interface(self, title, message):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.

        Args:
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –æ—à–∏–±–∫–æ–π
        """
        return widgets.VBox(
            [
                widgets.HTML(
                    f"""
                <div style="padding: 20px; background: #fee; border: 1px solid #fcc; border-radius: 8px;">
                    <h3 style="color: #c33; margin: 0 0 10px 0;">{title}</h3>
                    <p style="margin: 0; color: #666; white-space: pre-line;">{message}</p>
                </div>
            """
                )
            ]
        )

    def get_current_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        return self.current_state

    def get_status(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ñ–∞—Å–∞–¥–∞.

        Returns:
            dict: –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ñ–∞—Å–∞–¥–∞
        """
        try:
            return {
                "facade_initialized": True,
                "current_state": self.current_state.value
                if self.current_state
                else None,
                "lesson_interface_available": self.lesson_interface is not None,
                "assessment_interface_available": self.assessment_interface is not None,
                "lesson_data_available": hasattr(
                    self.lesson_interface, "current_lesson_data"
                )
                and self.lesson_interface.current_lesson_data is not None
                if self.lesson_interface
                else False,
                "version": "2.0",
                "last_critical_fix": "–≠–¢–ê–ü 49: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞—Å–∞–¥–∞: {str(e)}")
            return {"error": str(e), "facade_initialized": False}
