"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ TeachAI.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π.
–ù–û–í–û–ï: –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø—Ü–∏—è–º–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Ä–æ–∫—É
–ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
–ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ #99 - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∫ —É—Ä–æ–∫–∞–º –≤–º–µ—Å—Ç–æ TODO
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
from datetime import datetime
from interface_utils import InterfaceUtils, InterfaceState


class MainMenuInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é TeachAI."""

    def __init__(
        self, state_manager, content_generator, system_logger, assessment=None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.state_manager = state_manager
        self.content_generator = content_generator
        self.system_logger = system_logger
        self.assessment = assessment
        self.logger = logging.getLogger(__name__)

        # –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.utils = InterfaceUtils()

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.main_container = None

        # –í—ã—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        self.output_container = widgets.Output()

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        try:
            from student_profile_interface import StudentProfileInterface

            self.profile_interface = StudentProfileInterface(
                state_manager, content_generator, system_logger, assessment
            )
            self.profile_available = True
        except ImportError:
            self.logger.warning("–ú–æ–¥—É–ª—å student_profile_interface –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.profile_interface = None
            self.profile_available = False

    def show_main_menu(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = self.utils.create_header("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é TeachAI")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            progress_data = self.state_manager.get_learning_progress()

            # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            welcome_section = self._create_welcome_section(progress_data)
            quick_access_section = self._create_quick_access_section(progress_data)
            action_buttons = self._create_action_buttons()

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.main_container = widgets.VBox(
                [
                    header,
                    welcome_section,
                    quick_access_section,
                    action_buttons,
                    self.output_container,
                ],
                layout=widgets.Layout(gap="20px", padding="20px"),
            )

            return self.main_container

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")
            return self._create_error_interface(str(e))

    def _create_welcome_section(self, progress_data):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.

        Args:
            progress_data (dict): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        """
        user_data = self.state_manager.user_profile.get_user_profile()
        current_time = datetime.now().strftime("%H:%M")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        hour = datetime.now().hour
        if 5 <= hour < 12:
            greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        elif 12 <= hour < 17:
            greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        elif 17 <= hour < 22:
            greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        else:
            greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"

        current_course = progress_data.get("current_course", "–ù–µ –≤—ã–±—Ä–∞–Ω")

        welcome_html = f"""
        <div style="
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        ">
            <h2 style="margin: 0 0 15px 0; font-size: 26px;">
                {greeting}, {user_data['name']}! üëã
            </h2>
            <p style="margin: 5px 0; opacity: 0.9; font-size: 16px;">
                üìö –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: <strong>{current_course}</strong>
            </p>
            <p style="margin: 5px 0; opacity: 0.8; font-size: 14px;">
                üïê {current_time} | –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?
            </p>
        </div>
        """

        return widgets.HTML(value=welcome_html)

    def _create_quick_access_section(self, progress_data):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

        Args:
            progress_data (dict): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
        current_lesson_info = self._get_current_lesson_info()

        if current_lesson_info:
            section_id, topic_id, lesson_id = current_lesson_info
            quick_access_html = f"""
            <div style="
                background: white;
                padding: 20px;
                border-radius: 12px;
                border: 1px solid #e5e7eb;
                box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            ">
                <h3 style="margin: 0 0 15px 0; color: #374151;">‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</h3>
                <div style="
                    background: #f3f4f6;
                    padding: 15px;
                    border-radius: 8px;
                    border-left: 4px solid #3b82f6;
                ">
                    <p style="margin: 0; color: #374151;">
                        <strong>üìñ –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫:</strong><br>
                        {section_id} ‚Üí {topic_id} ‚Üí {lesson_id}
                    </p>
                </div>
            </div>
            """
        else:
            quick_access_html = """
            <div style="
                background: white;
                padding: 20px;
                border-radius: 12px;
                border: 1px solid #e5e7eb;
                box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            ">
                <h3 style="margin: 0 0 15px 0; color: #374151;">‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</h3>
                <div style="
                    background: #f9fafb;
                    padding: 15px;
                    border-radius: 8px;
                    text-align: center;
                    color: #6b7280;
                ">
                    <p style="margin: 0;">–í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ<br>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.</p>
                </div>
            </div>
            """

        return widgets.HTML(value=quick_access_html)

    def _create_action_buttons(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.

        Returns:
            widgets.VBox: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
        continue_button = widgets.Button(
            description="üìö –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
            button_style="primary",
            layout=widgets.Layout(width="240px", height="50px", margin="5px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
        profile_button = widgets.Button(
            description="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
            button_style="info",
            layout=widgets.Layout(width="240px", height="50px", margin="5px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤"
        courses_button = widgets.Button(
            description="üìñ –ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤",
            button_style="success",
            layout=widgets.Layout(width="240px", height="50px", margin="5px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_button = widgets.Button(
            description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            button_style="warning",
            layout=widgets.Layout(width="240px", height="50px", margin="5px"),
        )

        def on_continue_clicked(b):
            """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è (–ø—Ä–æ–±–ª–µ–º–∞ #99)."""
            with self.output_container:
                clear_output(wait=True)
                try:
                    current_lesson_info = self._get_current_lesson_info()
                    if current_lesson_info:
                        # –ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
                        section_id, topic_id, lesson_id = current_lesson_info
                        display(
                            self.utils.create_styled_message(
                                f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É: {section_id} ‚Üí {topic_id} ‚Üí {lesson_id}",
                                "info",
                            )
                        )

                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É
                        from lesson_interface import LessonInterface

                        lesson_ui = LessonInterface(
                            self.state_manager,
                            self.content_generator,
                            self.system_logger,
                            self.assessment,
                        )

                        clear_output(wait=True)
                        lesson_widget = lesson_ui.show_lesson(
                            section_id, topic_id, lesson_id
                        )
                        display(lesson_widget)

                    else:
                        # –ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
                        display(
                            self.utils.create_styled_message(
                                "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞...", "info"
                            )
                        )

                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
                        from interface import UserInterface

                        interface = UserInterface(
                            self.state_manager,
                            self.content_generator,
                            self.assessment,
                            self.system_logger,
                        )

                        clear_output(wait=True)
                        display(interface.show_course_selection())

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {str(e)}")
                    display(
                        self.utils.create_styled_message(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ: {str(e)}", "incorrect"
                        )
                    )

        def on_profile_clicked(b):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."""
            with self.output_container:
                clear_output(wait=True)
                if self.profile_available:
                    try:
                        profile_interface = (
                            self.profile_interface.show_student_profile()
                        )
                        display(profile_interface)
                    except Exception as e:
                        self.logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {str(e)}"
                        )
                        display(
                            self.utils.create_styled_message(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {str(e)}",
                                "incorrect",
                            )
                        )
                else:
                    display(
                        self.utils.create_styled_message(
                            "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "warning"
                        )
                    )

        def on_courses_clicked(b):
            """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫—É—Ä—Å–æ–≤ (–ø—Ä–æ–±–ª–µ–º–∞ #99)."""
            with self.output_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∫—É—Ä—Å–æ–≤...", "info"
                    )
                )

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∫—É—Ä—Å–æ–≤
                try:
                    from interface import UserInterface

                    interface = UserInterface(
                        self.state_manager,
                        self.content_generator,
                        self.assessment,
                        self.system_logger,
                    )

                    clear_output(wait=True)
                    display(interface.show_course_selection())

                except Exception as e:
                    self.logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∫—É—Ä—Å–æ–≤: {str(e)}"
                    )
                    display(
                        self.utils.create_styled_message(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É: {str(e)}", "incorrect"
                        )
                    )

        def on_settings_clicked(b):
            """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø—Ä–æ–±–ª–µ–º–∞ #99)."""
            with self.output_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è...", "info"
                    )
                )

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                try:
                    from interface import UserInterface

                    interface = UserInterface(
                        self.state_manager,
                        self.content_generator,
                        self.assessment,
                        self.system_logger,
                    )

                    clear_output(wait=True)
                    display(interface.show_initial_setup())

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {str(e)}")
                    display(
                        self.utils.create_styled_message(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {str(e)}", "incorrect"
                        )
                    )

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        continue_button.on_click(on_continue_clicked)
        profile_button.on_click(on_profile_clicked)
        courses_button.on_click(on_courses_clicked)
        settings_button.on_click(on_settings_clicked)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        buttons_row1 = widgets.HBox(
            [continue_button, profile_button],
            layout=widgets.Layout(justify_content="center", gap="20px"),
        )
        buttons_row2 = widgets.HBox(
            [courses_button, settings_button],
            layout=widgets.Layout(justify_content="center", gap="20px"),
        )

        return widgets.VBox(
            [buttons_row1, buttons_row2], layout=widgets.Layout(gap="15px")
        )

    def _get_current_lesson_info(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —É—Ä–æ–∫–µ.

        Returns:
            tuple: (section_id, topic_id, lesson_id) –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ (–æ–Ω –∂–µ —Ç–µ–∫—É—â–∏–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π)
            next_lesson_data = self.state_manager.get_next_lesson()

            if next_lesson_data and next_lesson_data[0]:
                section_id, topic_id, lesson_id, _ = next_lesson_data
                return section_id, topic_id, lesson_id
            else:
                return None

        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ: {str(e)}"
            )
            return None

    def _create_error_interface(self, error_message):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏.

        Args:
            error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏
        """
        error_header = self.utils.create_header("‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        error_widget = self.utils.create_styled_message(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {error_message}", "incorrect"
        )

        back_button = widgets.Button(
            description="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
            button_style="primary",
            layout=widgets.Layout(width="200px", margin="20px auto"),
        )

        def try_again(b):
            """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
            clear_output(wait=True)
            try:
                display(self.show_main_menu())
            except Exception as e:
                self.logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")
                display(
                    self.utils.create_styled_message(
                        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        "incorrect",
                    )
                )

        back_button.on_click(try_again)

        return widgets.VBox(
            [error_header, error_widget, back_button],
            layout=widgets.Layout(align_items="center", padding="20px"),
        )
