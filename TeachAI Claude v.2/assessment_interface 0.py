"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π —É—á–∞—â–∏—Ö—Å—è.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 40: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Ä–æ–∫–∞–º (–ø—Ä–æ–±–ª–µ–º–∞ #171)
–û–°–ù–û–í–ê–ù–û –ù–ê: project knowledge - lesson_interface.py, main_menu_interface.py
–ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´: #165, #166, #167, #168, #169, #170 (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É —á–µ—Ä–µ–∑ lesson_interface.show_lesson()
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
import html
from interface_utils import InterfaceUtils


class AssessmentInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π —É—á–∞—â–∏—Ö—Å—è."""

    def __init__(self, state_manager, assessment, system_logger, parent_facade=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            parent_facade: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞—Å–∞–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.state_manager = state_manager
        self.assessment = assessment
        self.system_logger = system_logger
        self.parent_facade = parent_facade
        self.logger = logging.getLogger(__name__)

        # –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.utils = InterfaceUtils()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.current_questions = []
        self.current_answers = {}
        self.results_container = None

        self.logger.info("AssessmentInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def show_assessment(
        self,
        current_course,
        current_section,
        current_topic,
        current_lesson,
        current_lesson_content,
    ):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            current_course (str): ID —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
            current_section (str): ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            current_topic (str): ID —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
            current_lesson (str): ID —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
            current_lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            self.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            course_plan = self._get_course_plan()
            (
                course_title,
                section_title,
                topic_title,
                lesson_title,
            ) = self._get_element_titles(course_plan)

            if not lesson_title or lesson_title == "–£—Ä–æ–∫":
                lesson_title = current_lesson or "–£—Ä–æ–∫"

            # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            nav_info = self.utils.create_navigation_info(
                course_title, section_title, topic_title, lesson_title
            )

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_header = widgets.HTML(
                value="""
                <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #4CAF50, #45a049);
                           color: white; border-radius: 10px; margin: 20px 0; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                    <h2 style="margin: 0; font-size: 24px;">üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π</h2>
                    <p style="margin: 10px 0 0 0; font-size: 16px;">–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ <strong>{}</strong>, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.</p>
                </div>
                """.format(
                    html.escape(lesson_title)
                )
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.current_questions = self._generate_questions(
                current_lesson_content,
                {
                    "course": course_title,
                    "section": section_title,
                    "topic": topic_title,
                    "lesson": lesson_title,
                },
            )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤
            questions_interface = self._create_questions_interface()

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            submit_button = widgets.Button(
                description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç",
                button_style="primary",
                layout=widgets.Layout(
                    width="200px",
                    height="50px",
                    margin="30px auto 20px auto",
                    display="block",
                ),
            )

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_container = widgets.VBox()

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            submit_button.on_click(
                lambda b: self._handle_test_submission(
                    b, course_title, section_title, topic_title, lesson_title
                )
            )

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π main_container (–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 40: –ø—Ä–æ–±–ª–µ–º–∞ #165)
            main_container = widgets.VBox(
                [
                    nav_info,
                    test_header,
                    questions_interface,
                    submit_button,
                    self.results_container,
                ],
                layout=widgets.Layout(
                    margin="0 auto", max_width="900px", padding="0 20px"
                ),
            )

            return main_container

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            return self.utils.create_styled_message(
                f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", "incorrect"
            )

    def _generate_questions(self, lesson_content, course_info):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            lesson_content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            course_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ

        Returns:
            list: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        try:
            self.logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è assessment.generate_questions
            course_title = course_info.get("course", "–ö—É—Ä—Å")
            section_title = course_info.get("section", "–†–∞–∑–¥–µ–ª")
            topic_title = course_info.get("topic", "–¢–µ–º–∞")
            lesson_title = course_info.get("lesson", "–£—Ä–æ–∫")

            self.logger.info(
                f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è: {course_title} ‚Üí {section_title} ‚Üí {topic_title} ‚Üí {lesson_title}"
            )
            self.logger.info(
                f"–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞: {len(lesson_content) if lesson_content else 0} —Å–∏–º–≤–æ–ª–æ–≤"
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ assessment —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            questions = self.assessment.generate_questions(
                course=course_title,
                section=section_title,
                topic=topic_title,
                lesson=lesson_title,
                lesson_content=lesson_content,
                num_questions=5,
            )

            if not questions:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
                return []

            self.logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
            return questions

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")
            return []

    def _create_questions_interface(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤.

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        if not self.current_questions:
            return widgets.HTML(
                value="<div style='text-align: center; color: #666; padding: 20px;'>–í–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</div>"
            )

        questions_widgets = []

        for i, question in enumerate(self.current_questions):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
            question_title = widgets.HTML(
                value=f"<h3 style='margin: 20px 0 10px 0; color: #333;'>–í–æ–ø—Ä–æ—Å {i + 1}: {html.escape(question['text'])}</h3>"
            )

            # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = question.get("options", [])
            if not options:
                continue

            self.logger.info(f"–í–æ–ø—Ä–æ—Å {i + 1}: –≤–∞—Ä–∏–∞–Ω—Ç—ã = {options}")

            # –û–±—ã—á–Ω—ã–µ RadioButtons (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ)
            radio_group = widgets.RadioButtons(
                options=options,
                value=None,
                disabled=False,
                layout=widgets.Layout(margin="0 0 0 20px", width="100%"),
            )

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (–ü–†–û–í–ï–†–ï–ù–ù–´–ô –†–ê–ë–û–ß–ò–ô –ö–û–î)
            def make_answer_handler(question_index, opts=options):
                def answer_handler(change):
                    if change["new"] is not None:
                        selected_option = change["new"]
                        self.logger.info(
                            f"–í–æ–ø—Ä–æ—Å {question_index + 1}: –≤—ã–±—Ä–∞–Ω '{selected_option}' = –≤–∞—Ä–∏–∞–Ω—Ç {opts.index(selected_option) + 1}"
                        )
                        answer_letter = opts.index(selected_option) + 1
                        self.current_answers[question_index] = answer_letter
                        self.logger.info(f"–¢–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã: {self.current_answers}")

                return answer_handler

            radio_group.observe(make_answer_handler(i), names="value")

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
            question_container = widgets.VBox(
                [question_title, radio_group],
                layout=widgets.Layout(
                    margin="10px 0",
                    padding="15px",
                    border="1px solid #ddd",
                    border_radius="8px",
                ),
            )

            questions_widgets.append(question_container)

        return widgets.VBox(questions_widgets)

    def _handle_test_submission(
        self, button, course_title, section_title, topic_title, lesson_title
    ):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–∞.

        Args:
            button: –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
            course_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            section_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            topic_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            lesson_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        """
        try:
            self.logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ (–ü–†–û–°–¢–û–ô –†–ê–ë–û–ß–ò–ô –ö–û–î)
            user_answers = []
            for i in range(len(self.current_questions)):
                answer = self.current_answers.get(i, 0)
                user_answers.append(answer)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 40: –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ–±–ª–µ–º–∞ #170)
            self.logger.info("=== –û–¢–õ–ê–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ê ===")
            self.logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(self.current_questions)}")
            self.logger.info(f"–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answers}")

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            score, correct_answers, score_count = self.assessment.calculate_score(
                self.current_questions, user_answers
            )

            self.logger.info(
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç calculate_score: score={score}, correct_answers={correct_answers}, score_count={score_count}"
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 40: –ø—Ä–æ–±–ª–µ–º–∞ #170 - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±—É–∫–≤ –≤ —Ü–∏—Ñ—Ä—ã
            if correct_answers and isinstance(correct_answers[0], str):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–∫–≤—ã –≤ —Ü–∏—Ñ—Ä—ã: A=1, B=2, C=3
                letter_to_number = {"A": 1, "B": 2, "C": 3}
                correct_answers_numbers = [
                    letter_to_number.get(answer, 1) for answer in correct_answers
                ]

                self.logger.info(
                    f"–ò–°–ü–†–ê–í–õ–ï–ù–û: –ë—É–∫–≤—ã {correct_answers} -> –¶–∏—Ñ—Ä—ã {correct_answers_numbers}"
                )

                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
                score_count = sum(
                    1
                    for i in range(len(user_answers))
                    if i < len(correct_answers_numbers)
                    and user_answers[i] == correct_answers_numbers[i]
                )
                score = (score_count / len(self.current_questions)) * 100

                self.logger.info(
                    f"–ü–ï–†–ï–°–ß–ò–¢–ê–ù–û: score={score}%, score_count={score_count}"
                )

            self.logger.info(
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {score_count}/{len(self.current_questions)} ({score:.1f}%)"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._save_assessment_results(
                course_title,
                section_title,
                topic_title,
                lesson_title,
                self.current_questions,
                user_answers,
                correct_answers,
                score,
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            is_passed = score >= 70

            # –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            lesson_key = f"{section_title}:{topic_title}:{lesson_title}"
            self.state_manager.mark_lesson_completed(lesson_key)
            self.logger.info(
                f"–£—Ä–æ–∫ {lesson_key} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å –æ—Ü–µ–Ω–∫–æ–π {score:.1f}%"
            )

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 40: –ø—Ä–æ–±–ª–µ–º–∞ #165 - –±–µ–∑ —Å–¥–≤–∏–≥–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
            results_widget = self._create_results_widget(
                score, score_count, len(self.current_questions), is_passed, lesson_title
            )

            self.results_container.children = [results_widget]

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 40: –ø—Ä–æ–±–ª–µ–º–∞ #168)
            self.logger.info(f"=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
            self.logger.info(f"–ö—É—Ä—Å: {course_title}")
            self.logger.info(f"–†–∞–∑–¥–µ–ª: {section_title}")
            self.logger.info(f"–¢–µ–º–∞: {topic_title}")
            self.logger.info(f"–£—Ä–æ–∫: {lesson_title}")
            self.logger.info(f"–û—Ü–µ–Ω–∫–∞: {score:.1f}%")
            self.logger.info(
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score_count} –∏–∑ {len(self.current_questions)}"
            )
            self.logger.info(f"–°—Ç–∞—Ç—É—Å: {'–ü–†–û–ô–î–ï–ù' if is_passed else '–ù–ï –ü–†–û–ô–î–ï–ù'}")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ system_logger –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self.system_logger, "log_lesson"):
                try:
                    self.system_logger.log_lesson(
                        course=course_title,
                        section=section_title,
                        topic=topic_title,
                        lesson=lesson_title,
                        score=score,
                        passed=is_passed,
                    )
                except Exception as log_error:
                    self.logger.warning(
                        f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ system_logger: {log_error}"
                    )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {str(e)}")
            error_widget = widgets.HTML(
                value=f"<div style='color: red; padding: 20px;'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {html.escape(str(e))}</div>"
            )
            self.results_container.children = [error_widget]

    def _create_results_widget(
        self, score, score_count, total_questions, is_passed, lesson_title
    ):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞.

        Args:
            score (float): –û—Ü–µ–Ω–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            score_count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            total_questions (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            is_passed (bool): –ü—Ä–æ–π–¥–µ–Ω –ª–∏ —Ç–µ—Å—Ç
            lesson_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            widgets.VBox: –í–∏–¥–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        # –¶–≤–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        color = "#4CAF50" if is_passed else "#f44336"
        status_icon = "‚úÖ" if is_passed else "‚ùå"
        status_text = "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" if is_passed else "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"

        # HTML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_html = f"""
        <div style="text-align: center; padding: 30px; border: 2px solid {color};
                   border-radius: 15px; margin: 20px 0; background: linear-gradient(135deg, {color}20, {color}10);">
            <h2 style="color: {color}; margin: 0 0 20px 0; font-size: 28px;">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</h2>
            <div style="font-size: 20px; margin: 15px 0;">
                <strong>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score:.1f}%</strong>
            </div>
            <div style="font-size: 18px; margin: 10px 0;">
                –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <strong>{score_count} –∏–∑ {total_questions}</strong>
            </div>
            <div style="font-size: 18px; margin: 15px 0; color: {color};">
                –°—Ç–∞—Ç—É—Å: <strong>{status_icon} {status_text}</strong>
            </div>
            <div style="font-size: 16px; margin: 10px 0; color: #666;">
                –£—Ä–æ–∫: <strong>{html.escape(lesson_title)}</strong>
            </div>
        </div>
        """

        results_widget = widgets.HTML(value=results_html)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
        continue_button = widgets.Button(
            description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
            button_style="success",
            layout=widgets.Layout(
                width="200px",
                height="40px",
                margin="20px auto 10px auto",
                display="block",
            ),
        )

        # –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 40: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Ä–æ–∫–∞–º (–ø—Ä–æ–±–ª–µ–º–∞ #171)
        def on_continue_clicked(b):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê."""
            try:
                self.logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
                next_lesson = self.state_manager.get_next_lesson()

                if next_lesson and len(next_lesson) >= 3:
                    section_id, topic_id, lesson_id = next_lesson[:3]
                    self.logger.info(
                        f"–ù–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫: {section_id}:{topic_id}:{lesson_id}"
                    )

                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º content_generator –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    content_generator = None
                    if self.parent_facade and hasattr(
                        self.parent_facade, "content_generator"
                    ):
                        content_generator = self.parent_facade.content_generator
                    elif hasattr(self, "content_generator"):
                        content_generator = self.content_generator

                    if not content_generator:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        error_widget = widgets.HTML(
                            value="""
                            <div style='color: red; padding: 20px; text-align: center; border: 1px solid red; border-radius: 8px; margin: 20px;'>
                                <h3>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Ä–æ–∫—É</h3>
                                <p>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.</p>
                            </div>
                            """
                        )
                        clear_output(wait=True)
                        display(error_widget)
                        self.logger.error(
                            "content_generator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞"
                        )
                        return

                    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–¢–¢–ï–†–ù –ò–ó PROJECT KNOWLEDGE:
                    from lesson_interface import LessonInterface

                    lesson_ui = LessonInterface(
                        state_manager=self.state_manager,
                        content_generator=content_generator,
                        system_logger=self.system_logger,
                        assessment=self.assessment,
                        parent_facade=self.parent_facade,
                    )

                    # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫
                    clear_output(wait=True)

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
                    lesson_widget = lesson_ui.show_lesson(
                        section_id, topic_id, lesson_id
                    )
                    display(lesson_widget)

                    self.logger.info(
                        f"–£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É {section_id}:{topic_id}:{lesson_id}"
                    )

                else:
                    # –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                    clear_output(wait=True)
                    completion_message = widgets.HTML(
                        value="""
                        <div style="text-align: center; padding: 50px; background: linear-gradient(135deg, #FFD700, #FFA500);
                                   color: white; border-radius: 15px; margin: 20px; box-shadow: 0 8px 16px rgba(0,0,0,0.2);">
                            <h1 style="margin: 0 0 20px 0; font-size: 36px;">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>
                            <h2 style="margin: 0 0 15px 0; font-size: 24px;">–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
                            <p style="font-size: 18px; margin: 0;">–í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</p>
                        </div>
                        """
                    )
                    display(completion_message)
                    self.logger.info(
                        "–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"
                    )

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É: {str(e)}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                error_widget = widgets.HTML(
                    value=f"""
                    <div style='color: red; padding: 20px; text-align: center; border: 1px solid red; border-radius: 8px; margin: 20px;'>
                        <h3>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h3>
                        <p><strong>–û—à–∏–±–∫–∞:</strong> {html.escape(str(e))}</p>
                        <p>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.</p>
                    </div>
                    """
                )
                clear_output(wait=True)
                display(error_widget)

        continue_button.on_click(on_continue_clicked)

        return widgets.VBox([results_widget, continue_button])

    def _save_assessment_results(
        self,
        course_title,
        section_title,
        topic_title,
        lesson_title,
        questions,
        user_answers,
        correct_answers,
        score,
    ):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            course_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            section_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            topic_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            lesson_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            questions (list): –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            user_answers (list): –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            correct_answers (list): –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            score (float): –û—Ü–µ–Ω–∫–∞
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ state_manager
            assessment_data = {
                "course": course_title,
                "section": section_title,
                "topic": topic_title,
                "lesson": lesson_title,
                "questions": questions,
                "user_answers": user_answers,
                "correct_answers": correct_answers,
                "score": score,
                "passed": score >= 70,
            }

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if hasattr(self.state_manager, "save_assessment_result"):
                self.state_manager.save_assessment_result(assessment_data)
            elif hasattr(self.state_manager, "save_assessment"):
                self.state_manager.save_assessment(assessment_data)
            else:
                self.logger.warning(
                    "–ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state_manager"
                )

            self.logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")

    def _get_course_plan(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω –∫—É—Ä—Å–∞ –∏–∑ state_manager.

        Returns:
            dict: –ü–ª–∞–Ω –∫—É—Ä—Å–∞ –∏–ª–∏ None
        """
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞
            if hasattr(self.state_manager, "get_course_plan"):
                return self.state_manager.get_course_plan()
            elif hasattr(self.state_manager, "course_data_manager"):
                return self.state_manager.course_data_manager.get_course_plan()
            elif (
                hasattr(self.state_manager, "state")
                and "course_plan" in self.state_manager.state
            ):
                return self.state_manager.state["course_plan"]
            else:
                return None
        except Exception:
            return None

    def _get_element_titles(self, course_plan):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞.

        –ò–°–ü–†–ê–í–õ–ï–ù–û –≠–¢–ê–ü 40: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä course_plan (–ø—Ä–æ–±–ª–µ–º–∞ #167)

        Args:
            course_plan (dict): –ü–ª–∞–Ω –∫—É—Ä—Å–∞

        Returns:
            tuple: (course_title, section_title, topic_title, lesson_title)
        """
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã course_plan
            if isinstance(course_plan, dict):
                course_title = course_plan.get("title", "–ö—É—Ä—Å")

                if "sections" in course_plan:
                    sections = course_plan["sections"]

                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 1: sections –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                    if isinstance(sections, list) and sections:
                        first_section = sections[0]
                        section_title = first_section.get("title", "–†–∞–∑–¥–µ–ª")

                        topics = first_section.get("topics", [])
                        if isinstance(topics, list) and topics:
                            first_topic = topics[0]
                            topic_title = first_topic.get("title", "–¢–µ–º–∞")

                            lessons = first_topic.get("lessons", [])
                            if isinstance(lessons, list) and lessons:
                                first_lesson = lessons[0]
                                lesson_title = first_lesson.get("title", "–£—Ä–æ–∫")
                                return (
                                    course_title,
                                    section_title,
                                    topic_title,
                                    lesson_title,
                                )

                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 2: sections –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
                    elif isinstance(sections, dict):
                        for section_id, section_data in sections.items():
                            section_title = section_data.get("title", "–†–∞–∑–¥–µ–ª")

                            topics = section_data.get("topics", {})
                            if isinstance(topics, dict):
                                for topic_id, topic_data in topics.items():
                                    topic_title = topic_data.get("title", "–¢–µ–º–∞")

                                    lessons = topic_data.get("lessons", {})
                                    if isinstance(lessons, dict):
                                        for lesson_id, lesson_data in lessons.items():
                                            lesson_title = lesson_data.get(
                                                "title", "–£—Ä–æ–∫"
                                            )
                                            return (
                                                course_title,
                                                section_title,
                                                topic_title,
                                                lesson_title,
                                            )

            # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
            return ("–ö—É—Ä—Å", "–†–∞–∑–¥–µ–ª", "–¢–µ–º–∞", "–£—Ä–æ–∫")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {str(e)}")
            return ("–ö—É—Ä—Å", "–†–∞–∑–¥–µ–ª", "–¢–µ–º–∞", "–£—Ä–æ–∫")
