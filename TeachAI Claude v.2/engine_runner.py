"""
–ú–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è TeachAI.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
"""

import logging
from interface_utils import InterfaceState


class TeachAIEngineRunner:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã TeachAI."""

    def __init__(self, core):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∑–∞–ø—É—Å–∫–∞.

        Args:
            core: –≠–∫–∑–µ–º–ø–ª—è—Ä TeachAIEngineCore
        """
        self.core = core
        self.logger = logging.getLogger(__name__)

        # –§–ª–∞–≥–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        self.is_running = False
        self.should_continue = True

        self.logger.info("TeachAIEngineRunner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def determine_initial_flow(self):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            str: –¢–∏–ø –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ('first_run', 'continue_learning', 'main_menu')
        """
        try:
            if not self.core.state_manager:
                self.logger.error("StateManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return "first_run"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
            if self.core.state_manager.is_first_run():
                self.logger.info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")
                return "first_run"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
            try:
                next_lesson = self.core.state_manager.get_next_lesson()
                if next_lesson:
                    self.logger.info("–ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—É—á–µ–Ω–∏—é")
                    return "continue_learning"
                else:
                    self.logger.info("–í—Å–µ —É—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")
                    return "main_menu"
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–∫–æ–≤: {str(e)}")
                return "main_menu"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: {str(e)}")
            return "first_run"

    def run_first_time_setup(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.

        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.core.interface.show_initial_setup()

            # –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            self.core.state_manager.set_not_first_run()

            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
            return False

    def run_continue_learning(self):
        """
        –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞.

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.info("üìö –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            next_lesson = self.core.state_manager.get_next_lesson()
            if next_lesson:
                lesson_id = next_lesson.get("id")
                self.logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É: {lesson_id}")

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Ä–æ–∫
                self.core.interface.show_lesson(lesson_id)
                return True
            else:
                self.logger.info("–ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")
                return self.run_main_menu()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è: {str(e)}")
            return False

    def run_main_menu(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã.

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.info("üè† –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            if hasattr(self.core.interface, "show_main_menu"):
                self.core.interface.show_main_menu()
            else:
                # Fallback –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É—Ä–æ–∫–∞
                self.logger.warning("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, fallback –∫ —É—Ä–æ–∫—É")
                self.core.interface.show_lesson()

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")
            return False

    def handle_course_completion(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞.

        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.core.interface.show_completion()

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if hasattr(self.core.state_manager, "get_course_statistics"):
                stats = self.core.state_manager.get_course_statistics()
                self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞: {stats}")

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞: {str(e)}")
            return False

    def run_interactive_session(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è.

        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.info("üéì –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è")
            self.is_running = True

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
            initial_flow = self.determine_initial_flow()
            self.logger.info(f"–ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫: {initial_flow}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ç–æ–∫
            if initial_flow == "first_run":
                success = self.run_first_time_setup()
            elif initial_flow == "continue_learning":
                success = self.run_continue_learning()
            elif initial_flow == "main_menu":
                success = self.run_main_menu()
            else:
                self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫: {initial_flow}")
                success = False

            if success:
                self.logger.info("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")

            self.is_running = False
            return success

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {str(e)}")
            self.is_running = False
            return False

    def run_demo_mode(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ API).

        Returns:
            bool: True –µ—Å–ª–∏ –¥–µ–º–æ —Ä–µ–∂–∏–º –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.info("üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")

            print("\n" + "=" * 50)
            print("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –†–ï–ñ–ò–ú TeachAI")
            print("=" * 50)
            print("üìù API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
            print("‚öôÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ")
            print("=" * 50 + "\n")

            # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.core.interface.show_initial_setup()

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {str(e)}")
            return False

    def run_diagnostics_mode(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã.

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        """
        try:
            self.logger.info("üîç –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

            diagnostics = {
                "timestamp": self.get_current_timestamp(),
                "system_status": {},
                "component_tests": {},
            }

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            diagnostics["system_status"] = self.core.get_initialization_status()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            validation = self.core.validate_components()
            diagnostics["component_tests"]["validation"] = validation

            # –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if self.core.state_manager:
                try:
                    state_integrity = self.core.state_manager.validate_state_integrity()
                    diagnostics["component_tests"]["state_integrity"] = state_integrity
                except Exception as e:
                    diagnostics["component_tests"]["state_integrity"] = {
                        "error": str(e)
                    }

            # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if self.core.config_manager:
                try:
                    config_status = {
                        "api_key_present": bool(self.core.config_manager.get_api_key()),
                        "model_name": self.core.config_manager.get_model_name(),
                        "debug_mode": self.core.config_manager.is_debug_mode(),
                    }
                    diagnostics["component_tests"]["configuration"] = config_status
                except Exception as e:
                    diagnostics["component_tests"]["configuration"] = {"error": str(e)}

            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            all_components_ok = diagnostics["system_status"].get("is_ready", False)
            validation_ok = validation.get("valid", False)

            diagnostics["overall_status"] = {
                "healthy": all_components_ok and validation_ok,
                "ready_for_use": all_components_ok,
                "issues_count": len(validation.get("issues", [])),
                "warnings_count": len(validation.get("warnings", [])),
            }

            return diagnostics

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")
            return {"error": str(e)}

    def get_current_timestamp(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É.

        Returns:
            str: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
        """
        try:
            from datetime import datetime

            return datetime.now().isoformat()
        except Exception:
            return "unknown"

    def stop_execution(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã."""
        try:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            self.should_continue = False
            self.is_running = False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")

    def get_execution_status(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

        Returns:
            dict: –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        return {
            "is_running": self.is_running,
            "should_continue": self.should_continue,
            "core_ready": self.core.is_ready if self.core else False,
            "runner_initialized": True,
        }

    def handle_error(self, error, context="unknown"):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

        Args:
            error: –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
            context (str): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏

        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏
        """
        try:
            error_info = {
                "context": context,
                "error_type": type(error).__name__,
                "error_message": str(error),
                "timestamp": self.get_current_timestamp(),
                "handled": True,
            }

            self.logger.error(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ '{context}': {str(error)}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if "initialization" in context.lower():
                error_info["recovery_strategy"] = "restart_initialization"
            elif "interface" in context.lower():
                error_info["recovery_strategy"] = "fallback_interface"
            elif "state" in context.lower():
                error_info["recovery_strategy"] = "reset_state"
            else:
                error_info["recovery_strategy"] = "graceful_degradation"

            return error_info

        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {str(e)}")
            return {
                "context": context,
                "error_message": str(error),
                "handler_error": str(e),
                "handled": False,
            }

    def cleanup_session(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Å—Å–∏–∏."""
        try:
            self.logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Å—Å–∏–∏...")

            self.is_running = False
            self.should_continue = True  # –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞

            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —è–¥—Ä–∞
            if self.core:
                self.core.cleanup()

            self.logger.info("–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")

    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ TeachAIEngineRunner."""
        return f"TeachAIEngineRunner(running={self.is_running}, core_ready={self.core.is_ready if self.core else False})"

    def __repr__(self):
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ TeachAIEngineRunner –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        return (
            f"TeachAIEngineRunner(core={bool(self.core)}, is_running={self.is_running})"
        )
