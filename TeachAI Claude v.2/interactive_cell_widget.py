"""
–í–∏–¥–∂–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –≤—ã–ø–æ–ª–Ω—è—Ç—å –µ–≥–æ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
"""

import ipywidgets as widgets
import time
from cell_widget_base import CellWidgetBase
from result_checker import CheckResult, check_result
from control_tasks_logger import log_attempt, get_cell_stats, is_cell_completed
from typing import Optional, Any, Dict, List, Tuple


class InteractiveCellWidget(CellWidgetBase):
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —è—á–µ–π–∫–∞ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∫–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –ø–∏—Å–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–¥.
    """

    def __init__(
        self,
        task_description: str,
        expected_result: Any,
        check_type: str = "exact",
        initial_code: str = "",
        cell_id: str = None,
        title: str = None,
        description: str = None,
        check_kwargs: Dict[str, Any] = None,
        max_attempts: int = None,
        show_solution: bool = False,
        solution_code: str = "",
        **kwargs,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–∏.

        Args:
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            expected_result: –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            check_type: –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ ('exact', 'numeric', 'list', 'function', 'output')
            initial_code: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            cell_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è—á–µ–π–∫–∏
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —è—á–µ–π–∫–∏
            description: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            check_kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (None = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
            show_solution: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É —Å —Ä–µ—à–µ–Ω–∏–µ–º
            solution_code: –ö–æ–¥ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        """
        self.task_description = task_description
        self.expected_result = expected_result
        self.check_type = check_type
        self.initial_code = initial_code
        self.check_kwargs = check_kwargs or {}
        self.max_attempts = max_attempts
        self.show_solution = show_solution
        self.solution_code = solution_code

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–æ –≤—ã–∑–æ–≤–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        self._create_widgets()

        super().__init__(
            cell_id=cell_id, title=title, description=description, **kwargs
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–ø—ã—Ç–∫—É
        self._load_previous_state()

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤."""

        # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        self.task_widget = widgets.HTML(
            value=f"<div style='background: #f8f9fa; padding: 10px; border-left: 4px solid #007bff; margin: 5px 0;'>"
            f"<strong>üìù –ó–∞–¥–∞–Ω–∏–µ:</strong><br>{self.task_description}</div>",
            layout=widgets.Layout(margin="0 0 10px 0"),
        )

        # –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞
        self.code_editor = widgets.Textarea(
            value=self.initial_code,
            description="–í–∞—à –∫–æ–¥:",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Python –∫–æ–¥ –∑–¥–µ—Å—å...",
            layout=widgets.Layout(
                width="100%", height="150px", font_family="monospace"
            ),
            style={"description_width": "80px"},
        )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.run_button = widgets.Button(
            description="üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å",
            button_style="primary",
            tooltip="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            layout=widgets.Layout(width="120px"),
        )

        self.clear_button = widgets.Button(
            description="üóë –û—á–∏—Å—Ç–∏—Ç—å",
            button_style="warning",
            tooltip="–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞",
            layout=widgets.Layout(width="120px"),
        )

        self.reset_button = widgets.Button(
            description="üîÑ –°–±—Ä–æ—Å",
            button_style="info",
            tooltip="–í–µ—Ä–Ω—É—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥",
            layout=widgets.Layout(width="120px"),
        )

        # –ö–Ω–æ–ø–∫–∞ —Å —Ä–µ—à–µ–Ω–∏–µ–º (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
        if self.show_solution:
            self.solution_button = widgets.Button(
                description="üí° –†–µ—à–µ–Ω–∏–µ",
                button_style="success",
                tooltip="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                layout=widgets.Layout(width="120px"),
            )
            self.solution_button.on_click(self._show_solution)

        # –°—Ç–∞—Ç—É—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.status_widget = widgets.HTML(
            value="<div style='color: #666; font-style: italic;'>–ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é</div>",
            layout=widgets.Layout(margin="5px 0"),
        )

        self.result_widget = widgets.HTML(
            value="", layout=widgets.Layout(margin="5px 0")
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
        self.stats_widget = widgets.HTML(
            value="", layout=widgets.Layout(margin="5px 0")
        )

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.run_button.on_click(self._execute_and_check)
        self.clear_button.on_click(self._clear_code)
        self.reset_button.on_click(self._reset_code)

    def _get_specific_widgets(self) -> List[widgets.Widget]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–∏."""
        widgets_list = [
            self.task_widget,
            self.code_editor,
            self._create_button_row(),
            self.status_widget,
            self.result_widget,
            self.stats_widget,
        ]

        return widgets_list

    def _create_button_row(self) -> widgets.HBox:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        buttons = [self.run_button, self.clear_button, self.reset_button]

        if self.show_solution:
            buttons.append(self.solution_button)

        return widgets.HBox(buttons, layout=widgets.Layout(margin="5px 0"))

    def _execute_and_check(self, button):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        start_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º
        if self.max_attempts and self._get_attempt_count() >= self.max_attempts:
            self._update_status("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫", "error")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        student_code = self.code_editor.value.strip()
        if not student_code:
            self._update_status("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "error")
            return

        self._update_status("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...", "running")

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞
            result, output, success = self.execute_code(student_code)
            execution_time_ms = (time.time() - start_time) * 1000

            if success:
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç None, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–º–µ–Ω
                if (
                    result is None
                    and hasattr(self, "execution_namespace")
                    and self.execution_namespace
                ):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    result_vars = [
                        "result",
                        "answer",
                        "output",
                        "res",
                        "squares",
                        "numbers",
                        "data",
                        "values",
                    ]

                    # –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ –∏–º–µ–Ω–∏
                    for var_name in result_vars:
                        if var_name in self.execution_namespace:
                            result = self.execution_namespace[var_name]
                            break

                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ None, –∏—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if result is None:
                        expected_type = type(self.expected_result)
                        for var_name, var_value in self.execution_namespace.items():
                            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏–º–ø–æ—Ä—Ç—ã
                            if (
                                not var_name.startswith("_")
                                and not var_name in ["__builtins__"]
                                and type(var_value) == expected_type
                                and var_name
                                not in ["print", "len", "range", "list", "dict", "set"]
                            ):
                                result = var_value
                                break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                check_result_obj = check_result(
                    result, self.expected_result, self.check_type, **self.check_kwargs
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
                attempt_id = log_attempt(
                    cell_id=self.cell_id,
                    student_code=student_code,
                    execution_result=result,
                    execution_output=output,
                    execution_success=success,
                    check_result=check_result_obj,
                    execution_time_ms=execution_time_ms,
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self._update_result_display(check_result_obj, execution_time_ms)
                self._update_stats_display()

            else:
                # –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                failed_check = CheckResult(
                    passed=False, message="–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞", score=0.0
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                log_attempt(
                    cell_id=self.cell_id,
                    student_code=student_code,
                    execution_result=None,
                    execution_output=output,
                    execution_success=success,
                    check_result=failed_check,
                    execution_time_ms=execution_time_ms,
                )

                self._update_status("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–º. –≤—ã–≤–æ–¥ –Ω–∏–∂–µ)", "error")
                self._update_stats_display()

        except Exception as e:
            self._update_status(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "error")

    def _update_result_display(
        self, check_result_obj: CheckResult, execution_time_ms: float
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        if check_result_obj.passed:
            status_color = "#28a745"  # –ó–µ–ª–µ–Ω—ã–π
            status_icon = "‚úÖ"
            status_text = "–ó–ê–ß–Å–¢"
        else:
            status_color = "#dc3545"  # –ö—Ä–∞—Å–Ω—ã–π
            status_icon = "‚ùå"
            status_text = "–ù–ï –ó–ê–ß–Å–¢"

        result_html = f"""
        <div style='border: 2px solid {status_color}; border-radius: 8px; padding: 12px; margin: 8px 0; background: {"#d4edda" if check_result_obj.passed else "#f8d7da"}'>
            <div style='font-weight: bold; font-size: 16px; color: {status_color}; margin-bottom: 8px;'>
                {status_icon} {status_text}
            </div>
            <div style='margin-bottom: 6px;'>
                <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {check_result_obj.message}
            </div>
            <div style='font-size: 12px; color: #666;'>
                –û—Ü–µ–Ω–∫–∞: {check_result_obj.score:.1%} | –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time_ms:.1f} –º—Å
            </div>
        </div>
        """

        self.result_widget.value = result_html
        self._update_status(
            f"{status_icon} {status_text}: {check_result_obj.message}",
            "success" if check_result_obj.passed else "error",
        )

    def _update_status(self, message: str, status_type: str = "info"):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —è—á–µ–π–∫–∏."""
        color_map = {
            "info": "#17a2b8",
            "success": "#28a745",
            "error": "#dc3545",
            "warning": "#ffc107",
            "running": "#6f42c1",
        }

        color = color_map.get(status_type, "#666")
        self.status_widget.value = (
            f"<div style='color: {color}; font-weight: bold;'>{message}</div>"
        )

    def _update_stats_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats = get_cell_stats(self.cell_id)

        if stats:
            completed_icon = "‚úÖ" if stats["successful_attempts"] > 0 else "‚è≥"
            stats_html = f"""
            <div style='background: #f8f9fa; padding: 8px; border-radius: 4px; font-size: 12px; color: #666;'>
                {completed_icon} –ü–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']} |
                –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_attempts']} |
                –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']:.1%} |
                –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['average_score']:.1%}
            </div>
            """
            self.stats_widget.value = stats_html

    def _get_attempt_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏."""
        stats = get_cell_stats(self.cell_id)
        return stats["total_attempts"] if stats else 0

    def _clear_code(self, button):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞."""
        self.code_editor.value = ""
        self._update_status("üóë –ö–æ–¥ –æ—á–∏—â–µ–Ω", "info")
        self.result_widget.value = ""

    def _reset_code(self, button):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥."""
        self.code_editor.value = self.initial_code
        self._update_status("üîÑ –ö–æ–¥ —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É", "info")
        self.result_widget.value = ""

    def _show_solution(self, button):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        if self.solution_code:
            self.code_editor.value = self.solution_code
            self._update_status("üí° –ü–æ–∫–∞–∑–∞–Ω–æ —Ä–µ—à–µ–Ω–∏–µ", "warning")
        else:
            self._update_status("‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", "error")

    def _load_previous_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–π–∫–∏."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats_display()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —è—á–µ–π–∫–∞
        if is_cell_completed(self.cell_id):
            self._update_status("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!", "success")

    def set_expected_result(self, expected_result: Any, check_type: str = None):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

        Args:
            expected_result: –ù–æ–≤—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            check_type: –ù–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.expected_result = expected_result
        if check_type:
            self.check_type = check_type

        self._update_status("üîÑ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω", "info")
        self.result_widget.value = ""

    def set_task_description(self, task_description: str):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.

        Args:
            task_description: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        """
        self.task_description = task_description
        self.task_widget.value = (
            f"<div style='background: #f8f9fa; padding: 10px; border-left: 4px solid #007bff; margin: 5px 0;'>"
            f"<strong>üìù –ó–∞–¥–∞–Ω–∏–µ:</strong><br>{self.task_description}</div>"
        )

    def get_student_code(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞."""
        return self.code_editor.value

    def set_code(self, code: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä."""
        self.code_editor.value = code

    def is_completed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —è—á–µ–π–∫–∞."""
        return is_cell_completed(self.cell_id)

    def get_cell_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–µ."""
        info = super().get_cell_info()
        stats = get_cell_stats(self.cell_id)

        info.update(
            {
                "task_description": self.task_description,
                "check_type": self.check_type,
                "max_attempts": self.max_attempts,
                "has_solution": bool(self.solution_code),
                "is_completed": self.is_completed(),
                "current_code": self.get_student_code(),
                "stats": stats,
            }
        )

        return info


def create_interactive_cell(
    task_description: str,
    expected_result: Any,
    check_type: str = "exact",
    initial_code: str = "",
    title: str = None,
    description: str = None,
    cell_id: str = None,
    check_kwargs: Dict[str, Any] = None,
    max_attempts: int = None,
    show_solution: bool = False,
    solution_code: str = "",
) -> InteractiveCellWidget:
    """
    –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–∏.

    Args:
        task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        expected_result: –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        check_type: –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏
        initial_code: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —è—á–µ–π–∫–∏
        description: –û–ø–∏—Å–∞–Ω–∏–µ —è—á–µ–π–∫–∏
        cell_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è—á–µ–π–∫–∏
        check_kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        max_attempts: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
        show_solution: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—à–µ–Ω–∏—è
        solution_code: –ö–æ–¥ —Ä–µ—à–µ–Ω–∏—è

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä InteractiveCellWidget
    """
    return InteractiveCellWidget(
        task_description=task_description,
        expected_result=expected_result,
        check_type=check_type,
        initial_code=initial_code,
        title=title,
        description=description,
        cell_id=cell_id,
        check_kwargs=check_kwargs,
        max_attempts=max_attempts,
        show_solution=show_solution,
        solution_code=solution_code,
    )
