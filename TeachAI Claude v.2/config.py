"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏.
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ #115 - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
"""

import os
import logging
from pathlib import Path
from dotenv import load_dotenv


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã."""

    def __init__(self, env_file=".env"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Args:
            env_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env
        """
        self.logger = logging.getLogger(__name__)
        self.project_dir = Path(__file__).parent.absolute()
        self.env_file = self.project_dir / env_file

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.config = {
            "OPENAI_API_KEY": None,
            "MODEL_NAME": "gpt-3.5-turbo-16k",
            "MAX_TOKENS": 3500,
            "TEMPERATURE": 0.7,
            "DEBUG_MODE": False,
        }

        self.logger.info("ConfigManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def check_env_file(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env.

        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False
        """
        try:
            if self.env_file.exists():
                self.logger.info(f"–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {self.env_file}")
                return True
            else:
                self.logger.error(f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.env_file}")
                return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ .env —Ñ–∞–π–ª–∞: {str(e)}")
            return False

    def load_config(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —á—Ç–µ–Ω–∏–µ–º API –∫–ª—é—á–∞.

        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
            load_dotenv(self.env_file)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ API –∫–ª—é—á–∞
            api_key = os.getenv("OPENAI_API_KEY")

            if not api_key:
                self.logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
                return False

            if api_key.strip() == "":
                self.logger.error("OPENAI_API_KEY –ø—É—Å—Ç–æ–π –≤ .env —Ñ–∞–π–ª–µ")
                return False

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á, –∞ –Ω–µ placeholder
            self.config["OPENAI_API_KEY"] = api_key.strip()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.config["MODEL_NAME"] = os.getenv("MODEL_NAME", "gpt-3.5-turbo-16k")
            self.config["MAX_TOKENS"] = int(os.getenv("MAX_TOKENS", "3500"))
            self.config["TEMPERATURE"] = float(os.getenv("TEMPERATURE", "0.7"))
            self.config["DEBUG_MODE"] = (
                os.getenv("DEBUG_MODE", "False").lower() == "true"
            )

            # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            self.logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            self.logger.info(f"üìù API –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {api_key[:10]}...")
            self.logger.info(f"üîß –ú–æ–¥–µ–ª—å: {self.config['MODEL_NAME']}")
            self.logger.info(f"üéØ Max tokens: {self.config['MAX_TOKENS']}")
            self.logger.info(f"üå°Ô∏è Temperature: {self.config['TEMPERATURE']}")

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            return False

    def get_api_key(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á OpenAI.

        Returns:
            str: API –∫–ª—é—á –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        api_key = self.config.get("OPENAI_API_KEY")

        if not api_key:
            self.logger.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None

        # –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ placeholder
        if api_key.startswith("<") or "config." in api_key:
            self.logger.error(f"API –∫–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {api_key[:20]}...")
            return None

        return api_key

    def get_model_name(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI.

        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        """
        return self.config.get("MODEL_NAME", "gpt-3.5-turbo-16k")

    def get_max_tokens(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.

        Returns:
            int: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        """
        return self.config.get("MAX_TOKENS", 3500)

    def get_temperature(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        Returns:
            float: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        """
        return self.config.get("TEMPERATURE", 0.7)

    def is_debug_mode(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏.

        Returns:
            bool: True –µ—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω
        """
        return self.config.get("DEBUG_MODE", False)

    def ensure_directories(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            directories = ["data", "logs", "debug_responses"]

            for dir_name in directories:
                dir_path = self.project_dir / dir_name
                dir_path.mkdir(exist_ok=True, parents=True)
                self.logger.debug(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")

            self.logger.info("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {str(e)}")
            return False

    def validate_api_key_format(self, api_key):
        """
        –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞ OpenAI.

        Args:
            api_key (str): API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏–Ω–∞—á–µ False
        """
        try:
            if not api_key or not isinstance(api_key, str):
                return False

            # API –∫–ª—é—á–∏ OpenAI –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'REMOVED' –∏ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–ª–∏–Ω—É
            if not api_key.startswith("REMOVED"):
                self.logger.warning("API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'REMOVED'")
                return False

            if len(api_key) < 45:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏–Ω–∞
                self.logger.warning("API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return False

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–∞: {str(e)}")
            return False

    def test_api_key(self):
        """
        –ù–û–í–û–ï: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–ª—é—á —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.

        Returns:
            bool: True –µ—Å–ª–∏ –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–Ω–∞—á–µ False
        """
        try:
            api_key = self.get_api_key()

            if not api_key:
                return False

            if not self.validate_api_key_format(api_key):
                return False

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            self.logger.info("API –∫–ª—é—á –ø—Ä–æ—à–µ–ª –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –∫–ª—é—á–∞: {str(e)}")
            return False

    def get_all_config(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ API –∫–ª—é—á–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏).

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        """
        safe_config = self.config.copy()

        # –°–∫—Ä—ã–≤–∞–µ–º API –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if safe_config.get("OPENAI_API_KEY"):
            key = safe_config["OPENAI_API_KEY"]
            safe_config["OPENAI_API_KEY"] = f"{key[:10]}...{key[-4:]}"

        return safe_config

    def reload_config(self):
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞.

        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            self.logger.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            return self.load_config()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            return False
