"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞.
–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Ä–æ–∫–∞–º,
—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
–ù–û–í–û–ï: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
–ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º –∏ —Ç–µ—Å—Ç–∞–º
–ù–û–í–û–ï: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ #97 —Å lesson_attempts_count - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ–ø—ã—Ç–æ–∫
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
import logging
from datetime import datetime
from interface_utils import InterfaceUtils, InterfaceState


class StudentProfileInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞."""

    def __init__(
        self, state_manager, content_generator, system_logger, assessment=None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.

        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            content_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            system_logger: –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            assessment: –ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.state_manager = state_manager
        self.content_generator = content_generator
        self.system_logger = system_logger
        self.assessment = assessment
        self.logger = logging.getLogger(__name__)

        # –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.utils = InterfaceUtils()

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.main_container = None

        # –í—ã—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.output_container = widgets.Output()

    def show_student_profile(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = self.utils.create_header("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            progress_data = self.state_manager.learning_progress.get_learning_progress()
            detailed_stats = (
                self.state_manager.learning_progress.get_detailed_course_statistics()
            )

            # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            profile_info = self._create_profile_info_section(progress_data)
            course_progress = self._create_course_progress_section(detailed_stats)
            lessons_statistics = self._create_lessons_statistics_section(detailed_stats)
            control_tasks_stats = self._create_control_tasks_section(detailed_stats)
            detailed_breakdown = self._create_detailed_breakdown_section()

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            action_buttons = self._create_action_buttons()

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.main_container = widgets.VBox(
                [
                    header,
                    profile_info,
                    course_progress,
                    lessons_statistics,
                    control_tasks_stats,
                    detailed_breakdown,
                    action_buttons,
                    self.output_container,
                ],
                layout=widgets.Layout(gap="20px", padding="20px"),
            )

            return self.main_container

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {str(e)}")
            return self._create_error_interface(str(e))

    def _create_profile_info_section(self, progress_data):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ.

        Args:
            progress_data (dict): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        """
        user_data = self.state_manager.user_profile.get_user_profile()
        current_date = datetime.now().strftime("%d.%m.%Y %H:%M")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ
        current_course = progress_data.get("current_course", "–ù–µ –≤—ã–±—Ä–∞–Ω")
        current_section = progress_data.get("current_section", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
        current_topic = progress_data.get("current_topic", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
        current_lesson = progress_data.get("current_lesson", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

        profile_html = f"""
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        ">
            <h2 style="margin: 0 0 20px 0; font-size: 28px;">
                üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['name']}!
            </h2>

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;">
                <div>
                    <h4 style="margin: 0 0 10px 0; opacity: 0.9;">üìö –û–±—É—á–µ–Ω–∏–µ</h4>
                    <p style="margin: 5px 0;"><strong>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</strong> {current_course}</p>
                    <p style="margin: 5px 0;"><strong>–†–∞–∑–¥–µ–ª:</strong> {current_section}</p>
                    <p style="margin: 5px 0;"><strong>–¢–µ–º–∞:</strong> {current_topic}</p>
                    <p style="margin: 5px 0;"><strong>–£—Ä–æ–∫:</strong> {current_lesson}</p>
                </div>

                <div>
                    <h4 style="margin: 0 0 10px 0; opacity: 0.9;">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                    <p style="margin: 5px 0;"><strong>–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è:</strong> {user_data.get('total_study_hours', 0)} —á.</p>
                    <p style="margin: 5px 0;"><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞:</strong> {user_data.get('lesson_duration_minutes', 0)} –º–∏–Ω.</p>
                    <p style="margin: 5px 0;"><strong>–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:</strong> {user_data.get('communication_style', 'friendly')}</p>
                    <p style="margin: 5px 0; opacity: 0.8;"><small>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_date}</small></p>
                </div>
            </div>
        </div>
        """

        return widgets.HTML(value=profile_html)

    def _create_course_progress_section(self, stats):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –æ–±—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ –∫—É—Ä—Å—É.

        Args:
            stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        if not stats:
            no_progress_html = """
            <div style="
                background: white;
                padding: 20px;
                border-radius: 10px;
                border: 1px solid #e9ecef;
                text-align: center;
                color: #6c757d;
            ">
                <h3 style="margin: 0 0 10px 0;">üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É</h3>
                <p>–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∏–∑—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞.</p>
            </div>
            """
            return widgets.HTML(value=no_progress_html)

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_lessons = stats.get("total_lessons", 0)
        completed_lessons = stats.get("completed_lessons", 0)
        progress_percentage = (
            (completed_lessons / total_lessons * 100) if total_lessons > 0 else 0
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if progress_percentage >= 80:
            progress_color = "#28a745"
            progress_text = "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"
        elif progress_percentage >= 50:
            progress_color = "#ffc107"
            progress_text = "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!"
        elif progress_percentage > 0:
            progress_color = "#17a2b8"
            progress_text = "–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ!"
        else:
            progress_color = "#6c757d"
            progress_text = "–í—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞—Ç—å!"

        progress_html = f"""
        <div style="
            background: white;
            padding: 25px;
            border-radius: 12px;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        ">
            <h3 style="margin: 0 0 20px 0; color: #495057;">üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É</h3>

            <div style="
                display: flex;
                align-items: center;
                justify-content: space-between;
                margin-bottom: 20px;
            ">
                <div style="flex: 1;">
                    <div style="
                        background-color: #f1f3f4;
                        border-radius: 10px;
                        height: 20px;
                        overflow: hidden;
                        margin-right: 20px;
                    ">
                        <div style="
                            background-color: {progress_color};
                            height: 100%;
                            width: {progress_percentage:.1f}%;
                            transition: width 0.3s ease;
                        "></div>
                    </div>
                </div>

                <div style="
                    font-size: 24px;
                    font-weight: bold;
                    color: {progress_color};
                    margin-left: 20px;
                ">
                    {progress_percentage:.1f}%
                </div>
            </div>

            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; text-align: center;">
                <div>
                    <div style="font-size: 28px; font-weight: bold; color: #17a2b8;">{completed_lessons}</div>
                    <div style="color: #6c757d; font-size: 14px;">–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤</div>
                </div>

                <div>
                    <div style="font-size: 28px; font-weight: bold; color: #6c757d;">{total_lessons}</div>
                    <div style="color: #6c757d; font-size: 14px;">–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤</div>
                </div>

                <div>
                    <div style="font-size: 28px; font-weight: bold; color: {progress_color};">{total_lessons - completed_lessons}</div>
                    <div style="color: #6c757d; font-size: 14px;">–û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤</div>
                </div>
            </div>

            <div style="
                margin-top: 20px;
                padding: 15px;
                background-color: #f8f9fa;
                border-radius: 8px;
                text-align: center;
                color: {progress_color};
                font-weight: bold;
            ">
                {progress_text}
            </div>
        </div>
        """

        return widgets.HTML(value=progress_html)

    def _create_lessons_statistics_section(self, stats):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —É—Ä–æ–∫–∞–º –∏ —Ç–µ—Å—Ç–∞–º.

        Args:
            stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—Ä–æ–∫–∞–º
        """
        if not stats:
            return widgets.HTML(value="")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º
        average_score = stats.get("average_score", 0)
        highest_score = stats.get("highest_score", 0)
        lowest_score = stats.get("lowest_score", 0)
        total_assessments = stats.get("total_assessments", 0)
        lessons_passed = stats.get("completed_lessons", 0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
        if average_score >= 80:
            score_color = "#28a745"
        elif average_score >= 60:
            score_color = "#ffc107"
        else:
            score_color = "#dc3545"

        lessons_html = f"""
        <div style="
            background: white;
            padding: 25px;
            border-radius: 12px;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        ">
            <h3 style="margin: 0 0 25px 0; color: #495057;">üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–∫–∞–º –∏ —Ç–µ—Å—Ç–∞–º</h3>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 20px;">

                <div style="
                    background: linear-gradient(135deg, {score_color}20, {score_color}10);
                    padding: 20px;
                    border-radius: 10px;
                    border: 1px solid {score_color}40;
                    text-align: center;
                ">
                    <div style="font-size: 32px; font-weight: bold; color: {score_color};">
                        {average_score:.1f}%
                    </div>
                    <div style="color: #6c757d; margin-top: 5px;">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                </div>

                <div style="
                    background: linear-gradient(135deg, #17a2b820, #17a2b810);
                    padding: 20px;
                    border-radius: 10px;
                    border: 1px solid #17a2b840;
                    text-align: center;
                ">
                    <div style="font-size: 32px; font-weight: bold; color: #17a2b8;">
                        {total_assessments}
                    </div>
                    <div style="color: #6c757d; margin-top: 5px;">–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤</div>
                </div>

                <div style="
                    background: linear-gradient(135deg, #28a74520, #28a74510);
                    padding: 20px;
                    border-radius: 10px;
                    border: 1px solid #28a74540;
                    text-align: center;
                ">
                    <div style="font-size: 32px; font-weight: bold; color: #28a745;">
                        {highest_score:.1f}%
                    </div>
                    <div style="color: #6c757d; margin-top: 5px;">–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
                </div>

                <div style="
                    background: linear-gradient(135deg, #6f42c120, #6f42c110);
                    padding: 20px;
                    border-radius: 10px;
                    border: 1px solid #6f42c140;
                    text-align: center;
                ">
                    <div style="font-size: 32px; font-weight: bold; color: #6f42c1;">
                        {lessons_passed}
                    </div>
                    <div style="color: #6c757d; margin-top: 5px;">–£—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                </div>

            </div>

            {"" if total_assessments == 0 else f'''
            <div style="
                margin-top: 20px;
                padding: 15px;
                background-color: #f8f9fa;
                border-radius: 8px;
                border-left: 4px solid #17a2b8;
            ">
                <p style="margin: 0; color: #495057;">
                    <strong>üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br>
                    –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π –±–∞–ª–ª: {lowest_score:.1f}% |
                    –†–∞–∑–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {highest_score - lowest_score:.1f} –±–∞–ª–ª–æ–≤
                </p>
            </div>
            '''}
        </div>
        """

        return widgets.HTML(value=lessons_html)

    def _create_control_tasks_section(self, stats):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º.

        Args:
            stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞

        Returns:
            widgets.HTML: –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        """
        if not stats:
            return widgets.HTML(value="")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
        total_control_tasks = stats.get("total_control_tasks", 0)
        completed_control_tasks = stats.get("completed_control_tasks", 0)

        if total_control_tasks == 0:
            control_tasks_html = """
            <div style="
                background: white;
                padding: 20px;
                border-radius: 10px;
                border: 1px solid #e9ecef;
                text-align: center;
                color: #6c757d;
            ">
                <h3 style="margin: 0 0 10px 0;">üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>
                <p>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å.</p>
            </div>
            """
        else:
            completion_rate = completed_control_tasks / total_control_tasks * 100

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if completion_rate >= 80:
                tasks_color = "#28a745"
                tasks_message = "–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞!"
            elif completion_rate >= 50:
                tasks_color = "#ffc107"
                tasks_message = "üëç –•–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞!"
            else:
                tasks_color = "#17a2b8"
                tasks_message = "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!"

            control_tasks_html = f"""
            <div style="
                background: white;
                padding: 25px;
                border-radius: 12px;
                border: 1px solid #e9ecef;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            ">
                <h3 style="margin: 0 0 20px 0; color: #495057;">üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>

                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; text-align: center; margin-bottom: 20px;">
                    <div style="
                        background: linear-gradient(135deg, {tasks_color}20, {tasks_color}10);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid {tasks_color}40;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: {tasks_color};">
                            {completed_control_tasks}
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
                    </div>

                    <div style="
                        background: linear-gradient(135deg, #6c757d20, #6c757d10);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid #6c757d40;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: #6c757d;">
                            {total_control_tasks}
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π</div>
                    </div>

                    <div style="
                        background: linear-gradient(135deg, {tasks_color}20, {tasks_color}10);
                        padding: 20px;
                        border-radius: 10px;
                        border: 1px solid {tasks_color}40;
                    ">
                        <div style="font-size: 32px; font-weight: bold; color: {tasks_color};">
                            {completion_rate:.1f}%
                        </div>
                        <div style="color: #6c757d; margin-top: 5px;">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                    </div>
                </div>

                <div style="
                    padding: 15px;
                    background-color: #f8f9fa;
                    border-radius: 8px;
                    border-left: 4px solid {tasks_color};
                    text-align: center;
                ">
                    <p style="margin: 0; color: #495057; font-weight: bold;">
                        {tasks_message}
                    </p>
                </div>
            </div>
            """

        return widgets.HTML(value=control_tasks_html)

    def _create_detailed_breakdown_section(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —É—Ä–æ–∫–∞–º (–ø—Ä–æ–±–ª–µ–º–∞ #97).

        Returns:
            widgets.VBox: –°–µ–∫—Ü–∏—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        lesson_scores = self.state_manager.learning_progress.state_manager.state[
            "learning"
        ].get("lesson_scores", {})
        lesson_attempts = self.state_manager.learning_progress.state_manager.state[
            "learning"
        ].get("lesson_attempts", {})
        control_tasks_status = self.state_manager.learning_progress.state_manager.state[
            "learning"
        ].get("control_tasks_status", {})
        completion_status = self.state_manager.learning_progress.state_manager.state[
            "learning"
        ].get("lesson_completion_status", {})

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        header = widgets.HTML(
            value="""
        <h3 style="margin: 20px 0 15px 0; color: #495057;">
            üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —É—Ä–æ–∫–∞–º
        </h3>
        """
        )

        if not lesson_scores and not control_tasks_status:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            no_data = widgets.HTML(
                value="""
            <div style="
                background: white;
                padding: 25px;
                border-radius: 12px;
                border: 1px solid #e9ecef;
                text-align: center;
                color: #6c757d;
                font-style: italic;
            ">
                –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞—Ö.<br>
                –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
            </div>
            """
            )
            return widgets.VBox([header, no_data])

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
        lessons_list = []

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Ä–æ–∫–∞–º
        all_lesson_ids = set()
        all_lesson_ids.update(lesson_scores.keys())
        all_lesson_ids.update(control_tasks_status.keys())
        all_lesson_ids.update(completion_status.keys())

        for lesson_id in sorted(all_lesson_ids):
            lesson_score = lesson_scores.get(lesson_id, 0)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ (–ø—Ä–æ–±–ª–µ–º–∞ #97)
            lesson_attempts_data = lesson_attempts.get(lesson_id, [])
            if isinstance(lesson_attempts_data, list):
                lesson_attempts_count = len(lesson_attempts_data)
            else:
                # Fallback: –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–∏—Å–æ–∫, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ
                lesson_attempts_count = (
                    int(lesson_attempts_data) if lesson_attempts_data else 0
                )

            is_completed = completion_status.get(lesson_id, False)
            control_tasks = control_tasks_status.get(lesson_id, {})

            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
            if control_tasks:
                completed_tasks = sum(
                    1 for completed in control_tasks.values() if completed
                )
                total_tasks = len(control_tasks)
                tasks_completion = f"{completed_tasks}/{total_tasks}"
            else:
                tasks_completion = "–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞
            if is_completed:
                status_icon = "‚úÖ"
                status_color = "#28a745"
                status_text = "–ó–∞–≤–µ—Ä—à–µ–Ω"
            elif lesson_score > 0:
                status_icon = "üìù"
                status_color = "#ffc107"
                status_text = "–ü—Ä–æ–π–¥–µ–Ω —Ç–µ—Å—Ç"
            else:
                status_icon = "‚è≥"
                status_color = "#6c757d"
                status_text = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –æ—Ü–µ–Ω–∫–∏
            if lesson_score >= 80:
                score_color = "#28a745"
            elif lesson_score >= 60:
                score_color = "#ffc107"
            elif lesson_score > 0:
                score_color = "#dc3545"
            else:
                score_color = "#6c757d"

            lesson_html = f"""
            <div style="
                background: white;
                border: 1px solid #e9ecef;
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 10px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            ">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div style="flex: 1;">
                        <div style="font-weight: bold; color: #495057; margin-bottom: 5px;">
                            {status_icon} –£—Ä–æ–∫: {lesson_id}
                        </div>
                        <div style="color: {status_color}; font-size: 14px; margin-bottom: 5px;">
                            {status_text}
                        </div>
                        <div style="font-size: 13px; color: #6c757d;">
                            –ü–æ–ø—ã—Ç–æ–∫: {lesson_attempts_count} | –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ: {tasks_completion}
                        </div>
                    </div>

                    <div style="text-align: right;">
                        <div style="
                            font-size: 20px;
                            font-weight: bold;
                            color: {score_color};
                            margin-bottom: 5px;
                        ">
                            {lesson_score:.1f}%
                        </div>
                        <div style="font-size: 12px; color: #6c757d;">
                            {'–ë–∞–ª–ª –∑–∞ —Ç–µ—Å—Ç' if lesson_score > 0 else '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω'}
                        </div>
                    </div>
                </div>
            </div>
            """

            lessons_list.append(widgets.HTML(value=lesson_html))

        if not lessons_list:
            return widgets.VBox(
                [header, widgets.HTML(value="<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>")]
            )

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É—Ä–æ–∫–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        lessons_container = widgets.VBox(
            lessons_list,
            layout=widgets.Layout(
                max_height="400px",
                overflow_y="auto",
                border="1px solid #e9ecef",
                border_radius="8px",
                padding="10px",
            ),
        )

        return widgets.VBox([header, lessons_container])

    def _create_action_buttons(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.

        Returns:
            widgets.HBox: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
        continue_button = widgets.Button(
            description="üìö –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
            button_style="primary",
            layout=widgets.Layout(width="200px", margin="5px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        menu_button = widgets.Button(
            description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            button_style="",
            layout=widgets.Layout(width="150px", margin="5px"),
        )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        settings_button = widgets.Button(
            description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            button_style="info",
            layout=widgets.Layout(width="150px", margin="5px"),
        )

        def on_continue_clicked(b):
            """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è (–ø—Ä–æ–±–ª–µ–º–∞ #99)."""
            with self.output_container:
                clear_output(wait=True)

                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    learning_state = (
                        self.state_manager.learning_progress.state_manager.state[
                            "learning"
                        ]
                    )

                    current_course = learning_state.get("current_course")
                    current_section = learning_state.get("current_section")
                    current_topic = learning_state.get("current_topic")
                    current_lesson = learning_state.get("current_lesson")

                    if (
                        current_course
                        and current_section
                        and current_topic
                        and current_lesson
                    ):
                        # –ï—Å—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
                        display(
                            self.utils.create_styled_message(
                                f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É: {current_section} ‚Üí {current_topic} ‚Üí {current_lesson}",
                                "info",
                            )
                        )

                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É
                        from lesson_interface import LessonInterface

                        lesson_ui = LessonInterface(
                            self.state_manager,
                            self.content_generator,
                            self.system_logger,
                            self.assessment,
                        )

                        clear_output(wait=True)
                        lesson_widget = lesson_ui.show_lesson(
                            current_section, current_topic, current_lesson
                        )
                        display(lesson_widget)

                    else:
                        # –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å
                        display(
                            self.utils.create_styled_message(
                                "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞...", "info"
                            )
                        )

                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
                        from interface import UserInterface

                        interface = UserInterface(
                            self.state_manager,
                            self.content_generator,
                            self.assessment,
                            self.system_logger,
                        )

                        clear_output(wait=True)
                        display(interface.show_course_selection())

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–±—É—á–µ–Ω–∏—é: {str(e)}")
                    display(
                        self.utils.create_styled_message(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–±—É—á–µ–Ω–∏—é: {str(e)}", "incorrect"
                        )
                    )

        def on_menu_clicked(b):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
            with self.output_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é...", "info"
                    )
                )

                try:
                    from interface import UserInterface

                    interface = UserInterface(
                        self.state_manager,
                        self.content_generator,
                        self.assessment,
                        self.system_logger,
                    )
                    clear_output(wait=True)
                    display(interface.show_main_menu())
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é: {str(e)}")
                    display(
                        self.utils.create_styled_message(
                            f"–û—à–∏–±–∫–∞: {str(e)}", "incorrect"
                        )
                    )

        def on_settings_clicked(b):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
            with self.output_container:
                clear_output(wait=True)
                display(
                    self.utils.create_styled_message(
                        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è...", "info"
                    )
                )

                try:
                    from interface import UserInterface

                    interface = UserInterface(
                        self.state_manager,
                        self.content_generator,
                        self.assessment,
                        self.system_logger,
                    )
                    clear_output(wait=True)
                    display(interface.show_initial_setup())
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {str(e)}")
                    display(
                        self.utils.create_styled_message(
                            f"–û—à–∏–±–∫–∞: {str(e)}", "incorrect"
                        )
                    )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        continue_button.on_click(on_continue_clicked)
        menu_button.on_click(on_menu_clicked)
        settings_button.on_click(on_settings_clicked)

        return widgets.HBox(
            [continue_button, menu_button, settings_button],
            layout=widgets.Layout(justify_content="center", margin="20px 0"),
        )

    def _create_error_interface(self, error_message):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏.

        Args:
            error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            widgets.VBox: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—à–∏–±–∫–∏
        """
        error_header = self.utils.create_header("‚ùå –û—à–∏–±–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞")
        error_widget = self.utils.create_styled_message(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {error_message}",
            "incorrect",
        )

        back_button = widgets.Button(
            description="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é",
            button_style="primary",
            layout=widgets.Layout(width="250px", margin="20px auto"),
        )

        def go_back_to_menu(b):
            """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."""
            clear_output(wait=True)
            try:
                from interface import UserInterface

                interface = UserInterface(
                    self.state_manager,
                    self.content_generator,
                    self.assessment,
                    self.system_logger,
                )
                display(interface.show_main_menu())
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é: {str(e)}")
                display(
                    self.utils.create_styled_message(
                        f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "incorrect"
                    )
                )

        back_button.on_click(go_back_to_menu)

        return widgets.VBox(
            [error_header, error_widget, back_button],
            layout=widgets.Layout(align_items="center", padding="20px"),
        )
